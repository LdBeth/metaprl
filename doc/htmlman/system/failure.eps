%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 7.0
%%For: (Jason J Hickey) (Cornell University)
%%Title: (failure.eps)
%%CreationDate: (9/9/98) (8:27 AM)
%%BoundingBox: 93 481 222 656
%%HiResBoundingBox: 93.3604 481.4255 221.6396 655.922
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_Illustrator_AI5 1.2 0
%%+ procset Adobe_cshow 2.0 8
%AI5_FileFormat 3
%AI3_ColorUsage: Color
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%DocumentCustomColors: (Light Green)
%%+ (Light Magenta)
%%CMYKCustomColor: 0.1 0 0 0 (Light Blue)
%%+ 0.1 0 0.1 0 (Light Green)
%%+ 0 0.1 0 0 (Light Magenta)
%%RGBCustomColor: 0.1059 0.3059 0.851 (Back blue)
%%+ 0.9608 1 0.3725 (Bright Yellow)
%%+ 0.2078 0.3569 0.651 (Buff Blue)
%%+ 0.9098 0.5922 0 (Burnt Orange)
%%+ 0 0.5882 0.4706 (Forest Green)
%%+ 1 0.9608 0.6588 (Light Yellow)
%%+ 0.502 0.3843 0.7412 (Tool Purple)
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () 
%AI3_TemplateBox: 306 396 306 396
%AI3_TileBox: 32 32 583 761
%AI3_DocumentPreview: Header
%AI5_ArtSize: 612 792
%AI5_RulerUnits: 2
%AI5_ArtFlags: 1 0 0 1 0 0 1 1 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI5_OpenToView: 84 678 4 738 690 18 0 1 69 60 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:32 32
%%AI3_PaperRect:-32 761 580 -31
%%AI3_Margin:32 -32 -29 31
%AI7_GridSettings: 12 1 12 1 0 0 0.833333 0.833333 0.833333 0.833333 0.833333 0.833333
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 7.0 Full Prolog)
%%Version: 1.2 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 107 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XA
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/_rgbtocmyk
{
3
	{
	1 exch sub 3 1 roll
	} repeat
3 copy 1 4 1 roll
3
	{
	3 index 2 copy gt
		{
		exch
		} if
	pop 4 1 roll
	} repeat
pop pop pop
4 1 roll
3
	{
	3 index sub
	3 1 roll
	} repeat
4 -1 roll
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq
	{
		findcmykcustomcolor
	}
	{
		/findrgbcustomcolor where not {
			4 1 roll _rgbtocmyk
			5 -1 roll
			findcmykcustomcolor
		}
		{
			pop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_BeginPalette
0 0 Pb
0.1 0 0 0 (Light Blue) 0 x
(Light Blue) Pc
0.1 0 0.1 0 (Light Green) 0 x
(Light Green) Pc
0 0.1 0 0 (Light Magenta) 0 x
(Light Magenta) Pc
0.9608 1 0.3725 (Bright Yellow) 0 1 Xx
(Bright Yellow\012  1) Pc
0 0.5882 0.4706 (Forest Green) 0 1 Xx
(Forest Green) Pc
0.2078 0.3569 0.651 (Buff Blue) 0 1 Xx
(Buff Blue) Pc
1 0.9608 0.6588 (Light Yellow) 0 1 Xx
(Light Yellow\012  1) Pc
0.9098 0.5922 0 (Burnt Orange) 0 1 Xx
(Burnt Orange\012  1) Pc
0.1059 0.3059 0.851 (Back blue) 0 1 Xx
(Back blue\012  1) Pc
0.502 0.3843 0.7412 (Tool Purple) 0 1 Xx
(Tool Purple\012  1) Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 0 79 128 255 Lb
(Background) Ln
0 A
0 O
0.1 0 0.1 0 (Light Green) 0 x
0 R
0 0 0 1 K
800 Ar
0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D
0 XR
157.5 655.4221 m
122.3533 655.4221 93.8604 629.9367 93.8604 598.5 c
93.8604 578.4746 105.4322 560.8769 122.9106 550.7306 C
134.25 567.5 L
136.25 587.5 L
144.0001 609.25 L
143.25 622.5 L
149.75 635.5 L
147.5 623 L
148.5 609.25 L
142.75 585.25 L
141.75 566 L
130.2178 547.0666 L
138.4872 543.551 147.735 541.5779 157.5 541.5779 c
192.6467 541.5779 221.1396 567.0632 221.1396 598.5 c
221.1396 629.9367 192.6467 655.4221 157.5 655.4221 c
buu0 0 0 XA
0 w-156.0003 876.0001 m
-156.0003 -107.9999 l
(S) *
-143.9999 875.9998 m
-143.9999 -108.0002 l
(S) *
-132.0001 876.0001 m
-132.0001 -107.9999 l
(S) *
-120.0001 875.9998 m
-120.0001 -108.0002 l
(S) *
-108.0003 876.0001 m
-108.0003 -107.9999 l
(S) *
-95.9999 875.9998 m
-95.9999 -108.0002 l
(S) *
-84.0001 876.0001 m
-84.0001 -107.9999 l
(S) *
-72.0001 875.9998 m
-72.0001 -108.0002 l
(S) *
-60.0003 876.0001 m
-60.0003 -107.9999 l
(S) *
-47.9999 875.9998 m
-47.9999 -108.0002 l
(S) *
-36.0001 876.0001 m
-36.0001 -107.9999 l
(S) *
-24.0001 875.9998 m
-24.0001 -108.0002 l
(S) *
-12.0003 876.0001 m
-12.0003 -107.9999 l
(S) *
0.0001 875.9998 m
0.0001 -108.0002 l
(S) *
11.9999 876.0001 m
11.9999 -107.9999 l
(S) *
23.9999 875.9998 m
23.9999 -108.0002 l
(S) *
35.9996 876.0001 m
35.9996 -107.9999 l
(S) *
48.0001 875.9998 m
48.0001 -108.0002 l
(S) *
59.9999 876.0001 m
59.9999 -107.9999 l
(S) *
71.9999 875.9998 m
71.9999 -108.0002 l
(S) *
83.9996 876.0001 m
83.9996 -107.9999 l
(S) *
96.0001 875.9998 m
96.0001 -108.0002 l
(S) *
107.9999 876.0001 m
107.9999 -107.9999 l
(S) *
119.9999 875.9998 m
119.9999 -108.0002 l
(S) *
131.9996 876.0001 m
131.9996 -107.9999 l
(S) *
144.0001 875.9998 m
144.0001 -108.0002 l
(S) *
155.9999 876.0001 m
155.9999 -107.9999 l
(S) *
167.9999 875.9998 m
167.9999 -108.0002 l
(S) *
179.9996 876.0001 m
179.9996 -107.9999 l
(S) *
192.0001 875.9998 m
192.0001 -108.0002 l
(S) *
203.9999 876.0001 m
203.9999 -107.9999 l
(S) *
215.9999 875.9998 m
215.9999 -108.0002 l
(S) *
227.9996 876.0001 m
227.9996 -107.9999 l
(S) *
240.0001 875.9998 m
240.0001 -108.0002 l
(S) *
251.9999 876.0001 m
251.9999 -107.9999 l
(S) *
263.9999 875.9998 m
263.9999 -108.0002 l
(S) *
275.9996 876.0001 m
275.9996 -107.9999 l
(S) *
288.0001 875.9998 m
288.0001 -108.0002 l
(S) *
299.9999 876.0001 m
299.9999 -107.9999 l
(S) *
311.9999 875.9998 m
311.9999 -108.0002 l
(S) *
323.9996 876.0001 m
323.9996 -107.9999 l
(S) *
336.0001 875.9998 m
336.0001 -108.0002 l
(S) *
347.9999 876.0001 m
347.9999 -107.9999 l
(S) *
359.9999 875.9998 m
359.9999 -108.0002 l
(S) *
371.9996 876.0001 m
371.9996 -107.9999 l
(S) *
384.0001 875.9998 m
384.0001 -108.0002 l
(S) *
395.9999 876.0001 m
395.9999 -107.9999 l
(S) *
407.9999 875.9998 m
407.9999 -108.0002 l
(S) *
419.9996 876.0001 m
419.9996 -107.9999 l
(S) *
432.0001 875.9998 m
432.0001 -108.0002 l
(S) *
443.9999 876.0001 m
443.9999 -107.9999 l
(S) *
455.9999 875.9998 m
455.9999 -108.0002 l
(S) *
467.9996 876.0001 m
467.9996 -107.9999 l
(S) *
480.0001 875.9998 m
480.0001 -108.0002 l
(S) *
491.9999 876.0001 m
491.9999 -107.9999 l
(S) *
503.9999 875.9998 m
503.9999 -108.0002 l
(S) *
515.9996 876.0001 m
515.9996 -107.9999 l
(S) *
528.0001 875.9998 m
528.0001 -108.0002 l
(S) *
539.9999 876.0001 m
539.9999 -107.9999 l
(S) *
551.9999 875.9998 m
551.9999 -108.0002 l
(S) *
563.9996 876.0001 m
563.9996 -107.9999 l
(S) *
576.0001 875.9998 m
576.0001 -108.0002 l
(S) *
587.9999 876.0001 m
587.9999 -107.9999 l
(S) *
599.9999 875.9998 m
599.9999 -108.0002 l
(S) *
611.9996 876.0001 m
611.9996 -107.9999 l
(S) *
624.0001 875.9998 m
624.0001 -108.0002 l
(S) *
635.9999 876.0001 m
635.9999 -107.9999 l
(S) *
647.9999 875.9998 m
647.9999 -108.0002 l
(S) *
659.9996 876.0001 m
659.9996 -107.9999 l
(S) *
672.0001 875.9998 m
672.0001 -108.0002 l
(S) *
683.9999 876.0001 m
683.9999 -107.9999 l
(S) *
695.9999 875.9998 m
695.9999 -108.0002 l
(S) *
707.9996 876.0001 m
707.9996 -107.9999 l
(S) *
720.0001 875.9998 m
720.0001 -108.0002 l
(S) *
731.9999 876.0001 m
731.9999 -107.9999 l
(S) *
743.9999 875.9998 m
743.9999 -108.0002 l
(S) *
755.9996 876.0001 m
755.9996 -107.9999 l
(S) *
768.0001 875.9998 m
768.0001 -108.0002 l
(S) *
779.9999 876.0001 m
779.9999 -107.9999 l
(S) *
791.9999 875.9998 m
791.9999 -108.0002 l
(S) *
803.9996 876.0001 m
803.9996 -107.9999 l
(S) *
816.0001 875.9998 m
816.0001 -108.0002 l
(S) *
827.9999 876.0001 m
827.9999 -107.9999 l
(S) *
Uu827.9996 876.0003 m
-156.0003 876.0003 l
(S) *
827.9994 863.9998 m
-156.0006 863.9998 l
(S) *
827.9996 852.0001 m
-156.0003 852.0001 l
(S) *
827.9994 840.0001 m
-156.0006 840.0001 l
(S) *
827.9996 828.0003 m
-156.0003 828.0003 l
(S) *
827.9994 815.9998 m
-156.0006 815.9998 l
(S) *
827.9996 804.0001 m
-156.0003 804.0001 l
(S) *
827.9994 792.0001 m
-156.0006 792.0001 l
(S) *
827.9996 780.0003 m
-156.0003 780.0003 l
(S) *
827.9994 767.9998 m
-156.0006 767.9998 l
(S) *
827.9996 756.0001 m
-156.0003 756.0001 l
(S) *
827.9994 744.0001 m
-156.0006 744.0001 l
(S) *
827.9996 732.0003 m
-156.0003 732.0003 l
(S) *
827.9994 719.9998 m
-156.0006 719.9998 l
(S) *
827.9996 708.0001 m
-156.0003 708.0001 l
(S) *
827.9994 696.0001 m
-156.0006 696.0001 l
(S) *
827.9996 684.0003 m
-156.0003 684.0003 l
(S) *
827.9994 671.9998 m
-156.0006 671.9998 l
(S) *
827.9996 660.0001 m
-156.0003 660.0001 l
(S) *
827.9994 648.0001 m
-156.0006 648.0001 l
(S) *
827.9996 636.0003 m
-156.0003 636.0003 l
(S) *
827.9994 623.9998 m
-156.0006 623.9998 l
(S) *
827.9996 612.0001 m
-156.0003 612.0001 l
(S) *
827.9994 600.0001 m
-156.0006 600.0001 l
(S) *
827.9996 588.0003 m
-156.0003 588.0003 l
(S) *
827.9994 575.9998 m
-156.0006 575.9998 l
(S) *
827.9996 564.0001 m
-156.0003 564.0001 l
(S) *
827.9994 552.0001 m
-156.0006 552.0001 l
(S) *
827.9996 540.0003 m
-156.0003 540.0003 l
(S) *
827.9994 527.9998 m
-156.0006 527.9998 l
(S) *
827.9996 516.0001 m
-156.0003 516.0001 l
(S) *
827.9994 504.0001 m
-156.0006 504.0001 l
(S) *
827.9996 492.0003 m
-156.0003 492.0003 l
(S) *
827.9994 479.9998 m
-156.0006 479.9998 l
(S) *
827.9996 468.0001 m
-156.0003 468.0001 l
(S) *
827.9994 456.0001 m
-156.0006 456.0001 l
(S) *
827.9996 444.0003 m
-156.0003 444.0003 l
(S) *
827.9994 431.9998 m
-156.0006 431.9998 l
(S) *
827.9996 420.0001 m
-156.0003 420.0001 l
(S) *
827.9994 408.0001 m
-156.0006 408.0001 l
(S) *
827.9996 396.0003 m
-156.0003 396.0003 l
(S) *
827.9994 383.9998 m
-156.0006 383.9998 l
(S) *
827.9996 372.0001 m
-156.0003 372.0001 l
(S) *
827.9994 360.0001 m
-156.0006 360.0001 l
(S) *
827.9996 348.0003 m
-156.0003 348.0003 l
(S) *
827.9994 335.9998 m
-156.0006 335.9998 l
(S) *
827.9996 324.0001 m
-156.0003 324.0001 l
(S) *
827.9994 312.0001 m
-156.0006 312.0001 l
(S) *
827.9996 300.0003 m
-156.0003 300.0003 l
(S) *
827.9994 287.9998 m
-156.0006 287.9998 l
(S) *
827.9996 276.0001 m
-156.0003 276.0001 l
(S) *
827.9994 264.0001 m
-156.0006 264.0001 l
(S) *
827.9996 252.0003 m
-156.0003 252.0003 l
(S) *
827.9994 239.9998 m
-156.0006 239.9998 l
(S) *
827.9996 228.0001 m
-156.0003 228.0001 l
(S) *
827.9994 216.0001 m
-156.0006 216.0001 l
(S) *
827.9996 204.0003 m
-156.0003 204.0003 l
(S) *
827.9994 191.9998 m
-156.0006 191.9998 l
(S) *
827.9996 180.0001 m
-156.0003 180.0001 l
(S) *
827.9994 168.0001 m
-156.0006 168.0001 l
(S) *
827.9996 156.0003 m
-156.0003 156.0003 l
(S) *
827.9994 143.9998 m
-156.0006 143.9998 l
(S) *
827.9996 132.0001 m
-156.0003 132.0001 l
(S) *
827.9994 120.0001 m
-156.0006 120.0001 l
(S) *
827.9996 108.0003 m
-156.0003 108.0003 l
(S) *
827.9994 95.9998 m
-156.0006 95.9998 l
(S) *
827.9996 84.0001 m
-156.0003 84.0001 l
(S) *
827.9994 72.0001 m
-156.0006 72.0001 l
(S) *
827.9996 60.0003 m
-156.0003 60.0003 l
(S) *
827.9994 47.9998 m
-156.0006 47.9998 l
(S) *
827.9996 36.0001 m
-156.0003 36.0001 l
(S) *
827.9994 24.0001 m
-156.0006 24.0001 l
(S) *
827.9996 12.0003 m
-156.0003 12.0003 l
(S) *
827.9994 -0.0002 m
-156.0006 -0.0002 l
(S) *
827.9996 -11.9999 m
-156.0003 -11.9999 l
(S) *
827.9994 -23.9999 m
-156.0006 -23.9999 l
(S) *
827.9996 -35.9997 m
-156.0003 -35.9997 l
(S) *
827.9994 -48.0002 m
-156.0006 -48.0002 l
(S) *
827.9996 -59.9999 m
-156.0003 -59.9999 l
(S) *
827.9994 -71.9999 m
-156.0006 -71.9999 l
(S) *
827.9996 -83.9997 m
-156.0003 -83.9997 l
(S) *
827.9994 -96.0002 m
-156.0006 -96.0002 l
(S) *
827.9996 -107.9999 m
-156.0003 -107.9999 l
(S) *
UU1 Ap
0 O
0 0 0 1 k
1 w119.9999 619.9998 m
122.209 619.9998 123.9999 621.7907 123.9999 623.9998 c
123.9999 626.2089 122.209 627.9998 119.9999 627.9998 c
117.7908 627.9998 115.9999 626.2089 115.9999 623.9998 c
115.9999 621.7907 117.7908 619.9998 119.9999 619.9998 c
f167.8331 548.2081 m
170.0422 548.2081 171.8331 549.999 171.8331 552.2081 c
171.8331 554.4172 170.0422 556.2081 167.8331 556.2081 c
165.624 556.2081 163.8331 554.4172 163.8331 552.2081 c
163.8331 549.999 165.624 548.2081 167.8331 548.2081 c
f119.9999 571.9998 m
122.209 571.9998 123.9999 573.7907 123.9999 575.9998 c
123.9999 578.2089 122.209 579.9998 119.9999 579.9998 c
117.7908 579.9998 115.9999 578.2089 115.9999 575.9998 c
115.9999 573.7907 117.7908 571.9998 119.9999 571.9998 c
f192.0001 632.0003 m
194.2092 632.0003 196.0001 633.7912 196.0001 636.0003 c
196.0001 638.2094 194.2092 640.0003 192.0001 640.0003 c
189.791 640.0003 188.0001 638.2094 188.0001 636.0003 c
188.0001 633.7912 189.791 632.0003 192.0001 632.0003 c
fu0.1 0 0.1 0 (Light Green) 0 x
0 R
0 0 0 1 K
185.5994 498.1752 m
188.9133 498.1752 191.5994 500.8616 191.5994 504.1751 C
191.5994 528.1755 L
191.5994 531.489 188.9133 534.1755 185.5994 534.1755 C
149.5994 534.1755 L
146.2855 534.1755 143.5994 531.489 143.5994 528.1755 C
143.5994 504.1751 L
143.5994 500.8616 146.2855 498.1752 149.5994 498.1752 C
185.5994 498.1752 L
b0 0.1 0 0 (Light Magenta) 0 x
187.3495 501.9253 m
187.3495 529.6753 L
147.5995 529.6753 L
147.5995 501.9253 L
187.3495 501.9253 L
b191.349 481.9255 m
191.349 493.9255 L
143.349 493.9255 L
143.349 481.9255 L
191.349 481.9255 L
b0 Ap
1 J [2 ]0 d145.3491 491.4253 m
188.5991 491.4253 l
B145.3491 489.4253 m
188.5991 489.4253 l
B145.3491 487.4253 m
188.5991 487.4253 l
B145.3491 485.4253 m
188.5991 485.4253 l
Bu0 J 3 w []0 d154.0056 521.2409 m
S0 O
0.1686 0.2314 0.2314 Xa
1 w1 XR
163.1412 524.4638 m
162.5149 525.3131 L
161.5721 519.4439 160.1054 515.5451 159.3573 508.2774 C
160.2981 509.1214 L
160.9712 515.6684 162.2924 519.178 163.1412 524.4638 C
f0 XR
163.148 524.4671 m
171.8302 521.9301 176.4013 517.298 177.3675 515.9392 C
178.3241 515.8398 L
178.3245 515.8401 178.3249 515.8404 178.3252 515.8407 C
177.257 517.346 172.1775 522.4988 162.523 525.3199 C
162.5205 525.3187 162.518 525.3174 162.5154 525.3162 C
162.5153 525.3152 162.5151 525.3141 162.5149 525.3131 C
163.1412 524.4638 L
163.1435 524.4649 163.1457 524.466 163.148 524.4671 C
f1 XR
178.3241 515.8398 m
177.3675 515.9392 L
177.3683 515.9381 177.3692 515.937 177.3699 515.9359 C
177.3554 515.924 177.3414 515.9126 177.327 515.9008 C
177.3354 515.9125 177.3445 515.9248 177.3524 515.9361 C
168.3242 511.6296 168.1836 510.7755 160.2976 509.1167 C
160.2978 509.1183 160.2979 509.1199 160.2981 509.1214 C
159.3573 508.2774 L
159.3569 508.2728 159.3563 508.2684 159.3559 508.2638 C
168.1182 510.1069 168.2744 511.0559 178.3058 515.8409 C
178.297 515.8283 178.2869 515.8146 178.2776 515.8016 C
178.2932 515.8145 178.3084 515.8269 178.3241 515.8398 C
f0.2745 0.3765 0.3765 Xa
0 XR
177.3699 515.9359 m
176.4086 517.2907 171.837 521.9281 163.148 524.4671 C
163.1457 524.466 163.1435 524.4649 163.1412 524.4638 C
162.2922 519.1767 160.9706 515.6667 160.2976 509.1167 C
168.1836 510.7755 168.3242 511.6296 177.3524 515.9361 C
177.3445 515.9248 177.3354 515.9125 177.327 515.9008 C
177.3414 515.9126 177.3554 515.924 177.3699 515.9359 C
fu0.2823 0.3882 0.3882 Xa
177.0576 515.9672 m
176.1313 517.2725 171.7268 521.7405 163.3554 524.1867 C
163.3532 524.1856 163.351 524.1845 163.3488 524.1835 C
162.5308 519.0896 161.2575 515.7079 160.6092 509.3972 C
168.207 510.9954 168.3424 511.8183 177.0408 515.9674 C
177.0331 515.9565 177.0243 515.9447 177.0162 515.9334 C
177.0301 515.9448 177.0436 515.9557 177.0576 515.9672 C
f0.2902 0.3961 0.3961 Xa
176.7452 515.9985 m
175.8541 517.2543 171.6166 521.5528 163.5628 523.9062 C
163.5606 523.9052 163.5585 523.9042 163.5565 523.9032 C
162.7695 519.0025 161.5445 515.749 160.9207 509.6777 C
168.2303 511.2153 168.3606 512.007 176.729 515.9987 C
176.7217 515.9882 176.7132 515.9768 176.7054 515.9659 C
176.7188 515.9769 176.7318 515.9875 176.7452 515.9985 C
f0.298 0.4078 0.4078 Xa
176.433 516.0298 m
175.577 517.2361 171.5065 521.3652 163.77 523.6259 C
163.768 523.6249 163.766 523.6239 163.764 523.6229 C
163.008 518.9154 161.8313 515.7902 161.2321 509.9581 C
168.2537 511.4351 168.3788 512.1956 176.4174 516.03 C
176.4104 516.0199 176.4023 516.009 176.3948 515.9985 C
176.4076 516.0091 176.4201 516.0192 176.433 516.0298 C
f0.3059 0.4196 0.4196 Xa
176.1206 516.0611 m
175.2998 517.2179 171.3964 521.1775 163.9774 523.3454 C
163.9755 523.3445 163.9735 523.3435 163.9716 523.3426 C
163.2467 518.8282 162.1182 515.8313 161.5436 510.2386 C
168.277 511.655 168.397 512.3843 176.1057 516.0613 C
176.0989 516.0517 176.0912 516.0411 176.084 516.0311 C
176.0963 516.0413 176.1082 516.051 176.1206 516.0611 C
f0.3137 0.4274 0.4274 Xa
175.8084 516.0924 m
175.0227 517.1997 171.2863 520.99 164.1847 523.0651 C
164.1829 523.0642 164.181 523.0633 164.1791 523.0624 C
163.4852 518.7411 162.4051 515.8724 161.855 510.519 C
168.3004 511.8748 168.4152 512.5729 175.7941 516.0925 C
175.7877 516.0834 175.7802 516.0733 175.7733 516.0637 C
175.7851 516.0734 175.7966 516.0827 175.8084 516.0924 C
f0.3216 0.4392 0.4392 Xa
175.496 516.1237 m
174.7454 517.1815 171.1761 520.8023 164.3921 522.7846 C
164.3903 522.7837 164.3885 522.7829 164.3868 522.7821 C
163.7239 518.654 162.692 515.9136 162.1666 510.7996 C
168.3237 512.0947 168.4335 512.7615 175.4824 516.1239 C
175.4762 516.1151 175.4691 516.1054 175.4626 516.0963 C
175.4738 516.1056 175.4847 516.1145 175.496 516.1237 C
f0.3294 0.451 0.451 Xa
175.1838 516.155 m
174.4683 517.1633 171.066 520.6147 164.5993 522.5043 C
164.5977 522.5035 164.596 522.5027 164.5943 522.5018 C
163.9624 518.567 162.9788 515.9547 162.478 511.08 C
168.347 512.3145 168.4517 512.9501 175.1708 516.1552 C
175.1649 516.1468 175.1581 516.1376 175.1519 516.1289 C
175.1626 516.1377 175.173 516.1462 175.1838 516.155 C
f0.3372 0.4627 0.4627 Xa
174.8715 516.1864 m
174.1911 517.1451 170.9559 520.427 164.8067 522.2238 C
164.8051 522.223 164.8035 522.2223 164.8019 522.2215 C
164.2011 518.4799 163.2658 515.9959 162.7895 511.3605 C
168.3704 512.5344 168.4699 513.1388 174.8591 516.1865 C
174.8535 516.1785 174.8471 516.1698 174.8411 516.1615 C
174.8513 516.1699 174.8612 516.1779 174.8715 516.1864 C
f0.3451 0.4706 0.4706 Xa
174.5591 516.2177 m
173.9139 517.1269 170.8457 520.2393 165.0141 521.9434 C
165.0126 521.9426 165.011 521.9419 165.0095 521.9412 C
164.4397 518.3927 163.5527 516.037 163.1011 511.641 C
168.3938 512.7543 168.4881 513.3275 174.5474 516.2178 C
174.5421 516.2102 174.536 516.202 174.5303 516.1941 C
174.54 516.2021 174.5494 516.2097 174.5591 516.2177 C
f0.3529 0.4823 0.4823 Xa
174.2469 516.249 m
173.6368 517.1087 170.7355 520.0518 165.2214 521.663 C
165.2199 521.6623 165.2185 521.6616 165.2171 521.6609 C
164.6782 518.3056 163.8396 516.0782 163.4125 511.9214 C
168.4171 512.9741 168.5063 513.5161 174.2358 516.249 C
174.2308 516.2419 174.225 516.2341 174.2196 516.2267 C
174.2288 516.2342 174.2377 516.2414 174.2469 516.249 C
f0.3608 0.4941 0.4941 Xa
173.9345 516.2803 m
173.3596 517.0905 170.6254 519.8641 165.4288 521.3826 C
165.4274 521.3819 165.426 521.3813 165.4247 521.3806 C
164.9169 518.2185 164.1265 516.1193 163.724 512.2019 C
168.4404 513.194 168.5245 513.7048 173.9241 516.2804 C
173.9193 516.2736 173.9139 516.2663 173.9089 516.2593 C
173.9175 516.2663 173.9258 516.2731 173.9345 516.2803 C
f0.3686 0.502 0.502 Xa
173.6223 516.3116 m
173.0825 517.0723 170.5153 519.6765 165.636 521.1022 C
165.6348 521.1016 165.6335 521.101 165.6322 521.1004 C
165.1555 518.1314 164.4133 516.1604 164.0354 512.4823 C
168.4638 513.4138 168.5427 513.8934 173.6125 516.3117 C
173.608 516.3053 173.6029 516.2984 173.5982 516.2918 C
173.6063 516.2985 173.6141 516.3049 173.6223 516.3116 C
f0.3765 0.5137 0.5137 Xa
173.3099 516.3429 m
172.8052 517.0541 170.4051 519.4888 165.8434 520.8218 C
165.8422 520.8212 165.841 520.8206 165.8399 520.8201 C
165.3941 518.0443 164.7003 516.2016 164.347 512.7628 C
168.4871 513.6337 168.5609 514.0821 173.3008 516.343 C
173.2966 516.337 173.2919 516.3306 173.2874 516.3245 C
173.295 516.3307 173.3023 516.3366 173.3099 516.3429 C
f0.3804 0.5255 0.5255 Xa
172.9976 516.3742 m
172.528 517.0359 170.295 519.3011 166.0508 520.5413 C
166.0497 520.5408 166.0486 520.5403 166.0475 520.5397 C
165.6327 517.9572 164.9872 516.2427 164.6585 513.0433 C
168.5105 513.8536 168.5791 514.2707 172.9891 516.3743 C
172.9852 516.3688 172.9807 516.3628 172.9766 516.357 C
172.9837 516.3628 172.9905 516.3684 172.9976 516.3742 C
f0.3882 0.5333 0.5333 Xa
172.6854 516.4055 m
172.2509 517.0178 170.1849 519.1136 166.2581 520.261 C
166.257 520.2605 166.256 520.26 166.255 520.2595 C
165.8713 517.8701 165.2741 516.2839 164.9699 513.3237 C
168.5338 514.0734 168.5973 514.4594 172.6775 516.4056 C
172.6739 516.4005 172.6698 516.3949 172.666 516.3896 C
172.6725 516.395 172.6788 516.4001 172.6854 516.4055 C
f0.3961 0.5451 0.5451 Xa
172.373 516.4368 m
171.9737 516.9995 170.0747 518.9259 166.4655 519.9805 C
166.4645 519.9801 166.4636 519.9796 166.4626 519.9792 C
166.11 517.783 165.561 516.325 165.2814 513.6042 C
168.5572 514.2933 168.6156 514.6481 172.3658 516.4369 C
172.3625 516.4322 172.3587 516.4271 172.3552 516.4222 C
172.3612 516.4271 172.367 516.4319 172.373 516.4368 C
f0.4039 0.5569 0.5569 Xa
172.0608 516.4681 m
171.6966 516.9814 169.9646 518.7383 166.6727 519.7002 C
166.6719 519.6998 166.671 519.6994 166.6702 519.6989 C
166.3485 517.6959 165.8478 516.3661 165.5929 513.8846 C
168.5805 514.5131 168.6338 514.8367 172.0542 516.4682 C
172.0512 516.4639 172.0477 516.4592 172.0445 516.4548 C
172.05 516.4593 172.0553 516.4636 172.0608 516.4681 C
f0.4118 0.5647 0.5647 Xa
171.7484 516.4994 m
171.4194 516.9632 169.8544 518.5506 166.8801 519.4198 C
166.8793 519.4194 166.8786 519.419 166.8778 519.4186 C
166.5872 517.6088 166.1348 516.4073 165.9044 514.1651 C
168.6039 514.733 168.652 515.0253 171.7425 516.4995 C
171.7397 516.4956 171.7366 516.4914 171.7337 516.4874 C
171.7387 516.4915 171.7435 516.4954 171.7484 516.4994 C
f0.4196 0.5765 0.5765 Xa
171.4362 516.5307 m
171.1422 516.945 169.7444 518.363 167.0874 519.1394 C
167.0867 519.1391 167.086 519.1387 167.0853 519.1384 C
166.8257 517.5217 166.4216 516.4484 166.2158 514.4455 C
168.6272 514.9528 168.6702 515.2139 171.4309 516.5308 C
171.4284 516.5273 171.4257 516.5236 171.4231 516.52 C
171.4275 516.5236 171.4318 516.5271 171.4362 516.5307 C
f0.4274 0.5882 0.5882 Xa
171.1239 516.562 m
170.865 516.9268 169.6342 518.1754 167.2948 518.859 C
167.2942 518.8587 167.2936 518.8584 167.293 518.8581 C
167.0644 517.4346 166.7085 516.4896 166.5274 514.7261 C
168.6506 515.1726 168.6884 515.4026 171.1192 516.5621 C
171.117 516.559 171.1146 516.5557 171.1123 516.5526 C
171.1162 516.5558 171.1199 516.5588 171.1239 516.562 C
f0.4353 0.6 0.6 Xa
170.8115 516.5933 m
170.5878 516.9086 169.524 517.9877 167.5021 518.5785 C
167.5016 518.5783 167.5011 518.578 167.5006 518.5777 C
167.303 517.3475 166.9955 516.5307 166.8389 515.0066 C
168.6739 515.3925 168.7066 515.5913 170.8074 516.5934 C
170.8056 516.5908 170.8035 516.5879 170.8015 516.5852 C
170.8049 516.5879 170.8081 516.5906 170.8115 516.5933 C
f0.4431 0.6078 0.6078 Xa
170.4993 516.6246 m
170.3107 516.8904 169.4139 517.8001 167.7095 518.2982 C
167.709 518.298 167.7086 518.2977 167.7081 518.2975 C
167.5416 517.2604 167.2823 516.5718 167.1503 515.287 C
168.6972 515.6124 168.7248 515.7799 170.4958 516.6247 C
170.4943 516.6225 170.4925 516.62 170.4908 516.6178 C
170.4937 516.6201 170.4964 516.6223 170.4993 516.6246 C
f0.451 0.6196 0.6196 Xa
170.1869 516.656 m
170.0335 516.8722 169.3038 517.6125 167.9168 518.0177 C
167.9165 518.0175 167.9161 518.0174 167.9157 518.0172 C
167.7802 517.1732 167.5693 516.613 167.4618 515.5675 C
168.7206 515.8323 168.743 515.9686 170.1841 516.656 C
170.1829 516.6542 170.1814 516.6522 170.1801 516.6503 C
170.1824 516.6522 170.1846 516.6541 170.1869 516.656 C
f0.4588 0.6314 0.6314 Xa
169.8747 516.6872 m
169.7563 516.854 169.1936 517.4249 168.1241 517.7374 C
168.1238 517.7372 168.1235 517.7371 168.1233 517.7369 C
168.0187 517.0862 167.8561 516.6541 167.7732 515.8479 C
168.7439 516.052 168.7612 516.1572 169.8725 516.6873 C
169.8716 516.6859 169.8704 516.6844 169.8694 516.6829 C
169.8712 516.6844 169.8729 516.6858 169.8747 516.6872 C
f0.4667 0.6392 0.6392 Xa
169.5623 516.7186 m
169.4791 516.8358 169.0835 517.2372 168.3315 517.4569 C
168.3313 517.4568 168.3311 517.4567 168.3309 517.4566 C
168.2574 516.999 168.143 516.6953 168.0848 516.1284 C
168.7673 516.272 168.7794 516.3459 169.5608 516.7186 C
169.5601 516.7176 169.5593 516.7165 169.5586 516.7155 C
169.5599 516.7165 169.5611 516.7175 169.5623 516.7186 C
fU0.4745 0.651 0.651 Xa
169.25 516.7499 m
169.2019 516.8176 168.9733 517.0495 168.5388 517.1765 C
168.5387 517.1764 168.5386 517.1764 168.5385 517.1763 C
168.4961 516.912 168.43 516.7364 168.3963 516.4089 C
168.7906 516.4918 168.7977 516.5345 169.2491 516.7499 C
169.2487 516.7493 169.2483 516.7487 169.2478 516.7481 C
169.2486 516.7487 169.2492 516.7493 169.25 516.7499 C
f1 Ap
0.0863 0.1216 0.1216 Xa
156.0662 524.1148 m
154.4455 524.1148 153.1317 522.8009 153.1317 521.1803 c
153.1317 519.5596 154.4455 518.2458 156.0662 518.2458 c
157.6869 518.2458 159.0007 519.5596 159.0007 521.1803 c
159.0007 522.8009 157.6869 524.1148 156.0662 524.1148 c
fu0 Ap
0.1098 0.1529 0.1529 Xa
156.0717 524.0028 m
154.5103 524.0028 153.2444 522.7369 153.2444 521.1755 c
153.2444 519.614 154.5103 518.3482 156.0717 518.3482 c
157.6332 518.3482 158.899 519.614 158.899 521.1755 c
158.899 522.7369 157.6332 524.0028 156.0717 524.0028 c
f0.1294 0.1804 0.1804 Xa
156.0773 523.8907 m
154.575 523.8907 153.3572 522.6729 153.3572 521.1706 c
153.3572 519.6684 154.575 518.4506 156.0773 518.4506 c
157.5795 518.4506 158.7973 519.6684 158.7973 521.1706 c
158.7973 522.6729 157.5795 523.8907 156.0773 523.8907 c
f0.1529 0.2118 0.2118 Xa
156.0828 523.7787 m
154.6398 523.7787 153.47 522.6089 153.47 521.1658 c
153.47 519.7228 154.6398 518.553 156.0828 518.553 c
157.5258 518.553 158.6956 519.7228 158.6956 521.1658 c
158.6956 522.6089 157.5258 523.7787 156.0828 523.7787 c
f0.1725 0.2392 0.2392 Xa
156.0883 523.6666 m
154.7045 523.6666 153.5827 522.5448 153.5827 521.161 c
153.5827 519.7772 154.7045 518.6554 156.0883 518.6554 c
157.4721 518.6554 158.5939 519.7772 158.5939 521.161 c
158.5939 522.5448 157.4721 523.6666 156.0883 523.6666 c
f0.1961 0.2706 0.2706 Xa
156.0938 523.5546 m
154.7693 523.5546 153.6954 522.4808 153.6954 521.1562 c
153.6954 519.8316 154.7693 518.7578 156.0938 518.7578 c
157.4185 518.7578 158.4923 519.8316 158.4923 521.1562 c
158.4923 522.4808 157.4185 523.5546 156.0938 523.5546 c
f0.2157 0.298 0.298 Xa
156.0994 523.4426 m
154.834 523.4426 153.8082 522.4168 153.8082 521.1514 c
153.8082 519.8861 154.834 518.8603 156.0994 518.8603 c
157.3647 518.8603 158.3905 519.8861 158.3905 521.1514 c
158.3905 522.4168 157.3647 523.4426 156.0994 523.4426 c
f0.2392 0.3294 0.3294 Xa
156.1049 523.3306 m
154.8988 523.3306 153.9209 522.3528 153.9209 521.1466 c
153.9209 519.9404 154.8988 518.9626 156.1049 518.9626 c
157.3111 518.9626 158.2889 519.9404 158.2889 521.1466 c
158.2889 522.3528 157.3111 523.3306 156.1049 523.3306 c
f0.2588 0.3569 0.3569 Xa
156.1104 523.2185 m
154.9635 523.2185 154.0337 522.2888 154.0337 521.1418 c
154.0337 519.9949 154.9635 519.0651 156.1104 519.0651 c
157.2574 519.0651 158.1872 519.9949 158.1872 521.1418 c
158.1872 522.2888 157.2574 523.2185 156.1104 523.2185 c
f0.2823 0.3882 0.3882 Xa
156.116 523.1065 m
155.0283 523.1065 154.1465 522.2247 154.1465 521.137 c
154.1465 520.0493 155.0283 519.1675 156.116 519.1675 c
157.2037 519.1675 158.0855 520.0493 158.0855 521.137 c
158.0855 522.2247 157.2037 523.1065 156.116 523.1065 c
f0.302 0.4157 0.4157 Xa
156.1215 522.9945 m
155.093 522.9945 154.2592 522.1607 154.2592 521.1322 c
154.2592 520.1037 155.093 519.2699 156.1215 519.2699 c
157.15 519.2699 157.9838 520.1037 157.9838 521.1322 c
157.9838 522.1607 157.15 522.9945 156.1215 522.9945 c
f0.3255 0.447 0.447 Xa
156.127 522.8825 m
155.1577 522.8825 154.3719 522.0967 154.3719 521.1274 c
154.3719 520.1581 155.1577 519.3723 156.127 519.3723 c
157.0963 519.3723 157.8821 520.1581 157.8821 521.1274 c
157.8821 522.0967 157.0963 522.8825 156.127 522.8825 c
f0.3451 0.4745 0.4745 Xa
156.1325 522.7704 m
155.2225 522.7704 154.4847 522.0327 154.4847 521.1226 c
154.4847 520.2125 155.2225 519.4747 156.1325 519.4747 c
157.0426 519.4747 157.7804 520.2125 157.7804 521.1226 c
157.7804 522.0327 157.0426 522.7704 156.1325 522.7704 c
f0.3686 0.5059 0.5059 Xa
156.1381 522.6584 m
155.2872 522.6584 154.5975 521.9686 154.5975 521.1178 c
154.5975 520.2669 155.2872 519.5771 156.1381 519.5771 c
156.9889 519.5771 157.6787 520.2669 157.6787 521.1178 c
157.6787 521.9686 156.9889 522.6584 156.1381 522.6584 c
f0.3882 0.5373 0.5373 Xa
156.1436 522.5464 m
155.352 522.5464 154.7102 521.9046 154.7102 521.1129 c
154.7102 520.3213 155.352 519.6796 156.1436 519.6796 c
156.9352 519.6796 157.577 520.3213 157.577 521.1129 c
157.577 521.9046 156.9352 522.5464 156.1436 522.5464 c
f0.4118 0.5647 0.5647 Xa
156.1491 522.4343 m
155.4167 522.4343 154.8229 521.8406 154.8229 521.1082 c
154.8229 520.3757 155.4167 519.7819 156.1491 519.7819 c
156.8816 519.7819 157.4753 520.3757 157.4753 521.1082 c
157.4753 521.8406 156.8816 522.4343 156.1491 522.4343 c
f0.4314 0.5961 0.5961 Xa
156.1547 522.3223 m
155.4815 522.3223 154.9357 521.7766 154.9357 521.1033 c
154.9357 520.4301 155.4815 519.8844 156.1547 519.8844 c
156.8279 519.8844 157.3736 520.4301 157.3736 521.1033 c
157.3736 521.7766 156.8279 522.3223 156.1547 522.3223 c
f0.4549 0.6235 0.6235 Xa
156.1602 522.2103 m
155.5462 522.2103 155.0484 521.7125 155.0484 521.0986 c
155.0484 520.4845 155.5462 519.9868 156.1602 519.9868 c
156.7742 519.9868 157.272 520.4845 157.272 521.0986 c
157.272 521.7125 156.7742 522.2103 156.1602 522.2103 c
f0.4745 0.6549 0.6549 Xa
156.1657 522.0982 m
155.611 522.0982 155.1612 521.6485 155.1612 521.0937 c
155.1612 520.539 155.611 520.0892 156.1657 520.0892 c
156.7205 520.0892 157.1703 520.539 157.1703 521.0937 c
157.1703 521.6485 156.7205 522.0982 156.1657 522.0982 c
f0.498 0.6824 0.6824 Xa
156.1713 521.9863 m
155.6757 521.9863 155.2739 521.5845 155.2739 521.0889 c
155.2739 520.5933 155.6757 520.1916 156.1713 520.1916 c
156.6668 520.1916 157.0686 520.5933 157.0686 521.0889 c
157.0686 521.5845 156.6668 521.9863 156.1713 521.9863 c
f0.5177 0.7137 0.7137 Xa
156.1768 521.8742 m
155.7404 521.8742 155.3867 521.5205 155.3867 521.0841 c
155.3867 520.6478 155.7404 520.294 156.1768 520.294 c
156.6131 520.294 156.9669 520.6478 156.9669 521.0841 c
156.9669 521.5205 156.6131 521.8742 156.1768 521.8742 c
f0.5373 0.7412 0.7412 Xa
156.1823 521.7622 m
155.8052 521.7622 155.4995 521.4564 155.4995 521.0793 c
155.4995 520.7022 155.8052 520.3964 156.1823 520.3964 c
156.5594 520.3964 156.8652 520.7022 156.8652 521.0793 c
156.8652 521.4564 156.5594 521.7622 156.1823 521.7622 c
f0.5608 0.7725 0.7725 Xa
156.1878 521.6502 m
155.8699 521.6502 155.6122 521.3924 155.6122 521.0745 c
155.6122 520.7566 155.8699 520.4988 156.1878 520.4988 c
156.5058 520.4988 156.7635 520.7566 156.7635 521.0745 c
156.7635 521.3924 156.5058 521.6502 156.1878 521.6502 c
f0.5804 0.8 0.8 Xa
156.1934 521.5381 m
155.9347 521.5381 155.725 521.3284 155.725 521.0697 c
155.725 520.811 155.9347 520.6013 156.1934 520.6013 c
156.4521 520.6013 156.6618 520.811 156.6618 521.0697 c
156.6618 521.3284 156.4521 521.5381 156.1934 521.5381 c
f0.6039 0.8314 0.8314 Xa
156.1989 521.4261 m
155.9994 521.4261 155.8377 521.2644 155.8377 521.0649 c
155.8377 520.8654 155.9994 520.7037 156.1989 520.7037 c
156.3984 520.7037 156.5601 520.8654 156.5601 521.0649 c
156.5601 521.2644 156.3984 521.4261 156.1989 521.4261 c
f0.6235 0.8588 0.8588 Xa
156.2044 521.314 m
156.0642 521.314 155.9504 521.2003 155.9504 521.0601 c
155.9504 520.9198 156.0642 520.8061 156.2044 520.8061 c
156.3447 520.8061 156.4584 520.9198 156.4584 521.0601 c
156.4584 521.2003 156.3447 521.314 156.2044 521.314 c
fU1 Ap
0.6471 0.8902 0.8902 Xa
156.21 521.202 m
156.1289 521.202 156.0632 521.1363 156.0632 521.0553 c
156.0632 520.9742 156.1289 520.9085 156.21 520.9085 c
156.291 520.9085 156.3567 520.9742 156.3567 521.0553 c
156.3567 521.1363 156.291 521.202 156.21 521.202 c
f0 Ap
0 0 0 1 k
156.6749 526.5819 m
158.2674 525.4215 158.9667 525.3169 159.4073 523.864 c
159.8479 522.4111 156.7553 515.881 156.6345 504.9813 C
170.1487 507.0936 177.0441 514.049 178.3058 515.8408 C
168.2744 511.0559 168.1182 510.1069 159.3559 508.2638 C
160.1037 515.5427 161.5725 519.4427 162.5159 525.3188 C
160.3956 525.993 158.8662 526.2803 156.6749 526.5819 C
fUU0 R
0 0 0 1 K
167.9999 534.75 m
167.9999 550.5 l
Su0 O
0.1 0 0.1 0 (Light Green) 0 x
119.9999 623.9998 m
119.9999 585.25 l
B0 0 0 1 k
121.0248 582.888 m
121.524 584.5413 121.984 585.6159 122.5164 586.9424 c
117.4721 586.9424 l
117.6973 586.4676 118.4646 584.5413 118.9635 582.888 c
119.4982 581.1186 119.8638 579.5141 119.9943 578.4734 c
120.1248 579.5141 120.4903 581.1186 121.0248 582.888 c
fUu0 R
0 0 0 1 K
135 596.25 m
119.9999 623.9998 l
137.75 637.25 153 644.75 184.25 638.5 c
S0 O
0 0 0 1 k
186.7671 639.0418 m
185.2439 639.8555 184.2803 640.5173 183.084 641.2995 c
182.0947 636.3532 l
182.6045 636.4809 184.6438 636.8555 186.3629 637.0205 c
188.2028 637.1978 189.8478 637.2416 190.8939 637.1655 c
189.899 637.4976 188.3973 638.1706 186.7671 639.0418 c
fU0 R
0 0 0 1 K
1 J131.9996 597.25 m
136.75 594.75 l
S133.25 594.5 m
136 598.25 l
SLB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
