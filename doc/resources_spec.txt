  -------------
 | THE PROBLEM |
  -------------

To be able describe the problem in most general terms, I am going to start
with a simple picture and will gradually make it more complex.

MODEL 1.

We have a collection of "modules" each being a list with "directives" of one
of the following kinds:
- "add <data>" (corresponds to "improve_resource" or a resource annotation)
- "include <theory-name>"
- "bookmark <name>"

Goal: we want to have a _preprocessor_ that would create some code for each of
the theories such that when the code is executes (in some order that agrees
with "include" directives) it would produce a data structure that would allow
us to have a function of the type "string -> data list" that would take a
bookmark name and return all the data that was added "above" that bookmark in
an "appropriate order".

Note that this model describes the situation with
- resources, where data would be a resource improvement (or annotation) and we
  want to "bookmark" right before each interactive rules (and rewrites).
- refiner sentinels that keep track of the rules that can be allowed in a
  proof (so that we disallow using the rules that go "after" the current one).
- display forms, but with "bookmarking" only at the end of each module
- opnames, but there we need the answer at parse-time, not at run-time, so
  it's a separate (but very similar) problem.

PROBLEM 1.1:

If we have
A: add a
B: include A; add b
C: include A; add c
D: include B; include C; add d; bookmark "d"

we want "d" to point to ``a; b; c; d''. A naive code would return ``a; b; a;
c; d'' which is not only inefficient, but is also incorrect since it allows a
to shadow b which is clearly wrong. If fact, with opnames we used to have the
problem that Nuprl_font could shadow some of Itt modules in some cases which
lead to incorrect parsing. This particular problem was fixed last summer (by
Jason and me)  - see
http://cvs.cs.cornell.edu:12000/commitlogs/meta-prl/2000-07.html#00/07/25.13:24:20
and
http://cvs.cs.cornell.edu:12000/commitlogs/meta-prl/2000-07.html#00/07/25.19:10:51

There are currently 4 separate pieces of code that solve this problem for
resources, sentinel, display forms and opnames. It may be reasonable for the
opname code to stay separate (especially since it seems to work correctly),
but I hope to unify the other 3. I am not sure if dform and sentinel code
suffer from "Problem 1" (I suspect they do), but I know the the resources code
suffers from it, also it seems that resources code is currently capable of
losing data as well.

PROBLEM 1.2:
We want our function to to some caching and in case we keep requesting the
same bookmark repeatedly.

PROBLEM 1.3
When a theory has several bookmarks, we want caching to be able to reuse the
data collected for a previous bookmark when computing data for future
bookmarks.

PROBLEM 1.4
We want to be able to provide function "data list -> result_type" and have the
bookmark function cache not just "data list", but the "result_type" object.

PROBLEM 1.5
If two bookmarks have no "add" directives between them, we want the caching
bookmarking function to return the same result_type object for both of them.

PROBLEM 1.6
Some resources process their data imperaively, but some process it
functionally. For the functional ones it would be nice if for

bookmark a
add d
bookmark b

we could have the bookmark code build the result_type for b using whatever was
already done for a.

MODEL 2:
Same as Model 1, but now instead of "add <data>" imagine we have "add
<resource-name> <data>", but the bookmarking is supposed to bookmark _all_
resources.

PROBLEM 2.1:
Currently preprocessor creates a piece of bookmarking code for each resource
for each bookmark. It makes preprocessed theories huge, it also makes
compilation slow and it also affects start-up time. We want to have some
"global resource" that would take care of all bookmarking of all the resources
(and sentinel) data. We do not want any (#bookmarks * #resources) complexity
in parsing/compiling/start-up (although it's OK if the time to retrieve the
bookmark is proportional to #data + #resources).

PROBLEM 2.2:
Bookmarks shoud be processed lazily. Currently, before starting working on a
rule we first retrieve all the data bookmarked for that rule. It could be
better if bookmarks would only be retrieved as needed.

MODEL 3:
Same as Model 2, but now each theory can also declare a new resource and then
it (and others that include it) can use it.

PROBLEM 3.1
We do not know the complete list of resources in advance. More importantly,
each resource can have it's own type of data and it's own type of result.
Therefore, it's not clear how to give an appropriate type to object that the
global resource is going to manipulate. We may restrict the result type to a
list of a few predefined one (current code only allows tactic and (int ->
tactic) results), but we can not restrict the type of data.

PROBLEM 3.2
For a functional resource, the intermediate object that it constcucts
functionally  would normally have a typoe different from the result_type. The
types of these intermediate objects range wildly and we want the code that
does not need to know these types.

MODEL 4:
Same as model 3, but now we have a notion of resource annotations. Resource
annotation function is a function that takes an object of a "rule description
type" (predefined elsewhere), an object of "resource annotation type" (defined
in a theory that defined this resource) and returns a data object of the type
appropriate for the particular resource.

PROBLEM 4.1
Allow user to provide a resource annotation function and resource annotation
type when resource is defined.

PROBLEM 4.2
Allow user to provide a new resource annotation function for any resource in
any theory. That resource annotation function will be used for all annotations
"below" that change. Note, that we still require the resource annotation type
to be provided upfront and stay the same.

  -----------------------
 | THE PROPOSED SOLUTION |
  -----------------------

We assume that all theories and all bookmarks have distinct names.

Module 1: Collecting data of type 'data for a single resource.

(* Solves (at least partially) Problem 1.6 *)
(* Note that in this module each theory is processed separately, only the
   global_data is global *)

type 'data data_cell =
   DatInclude of string
 | DatData of 'data list (* last added first *)
 | DatBookmark of string list (* each string in the list is a "local part" of
a bookmark name *)

type 'data data =
   'data data_cell list (* last added first *)

type 'data global_data = (string, 'data data) Hashtbl.t (* Here the
string is a theory name, we'll have a single entry for each theory *)

val create: unit -> 'data global_data
val improve: 'data data -> 'data -> 'data data (* same as "add_data" *)
val bookmark: 'data data -> string -> 'data data
val include_theory: 'data data -> string -> 'data data

(* Since theories are processed one-by-one, we can do it imperatively for a
particular resource. See also Modules 4&5 for an expected value of x_data *)
val x_theory_data : x_data data ref (* initially empty *)
val x_improve : x_data -> unit (* adds to x_theory_data *)
val x_bookmark: string -> unit
val x_include_theory: string -> unit
val x_global_data = x_data global_data
val x_close_theory: string -> unit (* adds x_theory_data to x_global_data and
   flushes it *)

Module 2: Avoiding repeatedly including theories.

(* Solves Problems 1.1 & 1.2, partially solves Problems 1.3, 1.4 & 1.5*)

type bookmark = string * string (* theory name + local name *)

(* We assume that x_close_theory bookmarks the theory end by using an empty
local name *)

type 'data increment = {
   (* base will be empty_bookmark (see below) for leaf bookmarks *)
   inc_base_bookmark: bookmark;
   (* we should try to keep the increment non-empty, when possible *)
   inc_increment: 'data list; (* last added first *)
   (* non-empty inc_bookmarks list all bookmarks of this increment *)
   mutable inc_bookmarks: bookmark list (* for caching, not really necessary *)
}

type 'data global_bookmarker = (bookmark, 'data increment) Hashtbl.t

(* Default bookmark for an empty resource with nothing added *)
val empty_bookmark : bookmark

(* creates a hash table and puts an entry for an empty_bookmark in there *)
val create_global_bookmarker: unit -> 'data global_bookmarker

(* Gets theory data from global_data, computes all bookmark increments for
   the specified theory and stores them in the increments hashtable *)
val compute_bookmarks:
   'data global_data -> 'data global_bookmarker -> string -> unit

(* compute_bookmarks needs some complicated processing to make sure that no
theory is included twice, but that can be done relatively easy *)

val x_global_bookmarker: x_data global_bookmarker
val x_compute_bookmarks: string -> unit

Module 3: Creating results.

(* Solves Problem 3.2 and the rest of Problem 1.3, 1.4 & 1.5 *)

type ('data, 'result) processor = {
   proc_add: 'data -> unit;
   proc_retrieve: unit -> 'result;
   proc_clone: unit -> ('data, 'result) processor
}

type ('data, 'intermediate, 'result) funct_processor = {
   fp_empty: 'intermediate;
   fp_add: 'intermediate -> 'data -> 'intermediate;
   fp_retr: 'intermediate -> 'result
}

type ('data, 'intermediate, 'result) imper_processor = {
   imp_create: unit -> 'intermediate;
   imp_add: 'intermediate -> 'data -> unit;
   imp_retr: 'intermediate -> 'result
}

type ('data, 'result) proc_result = {
   (* res_proc contains the result of feeding all data to a functional
      processor *)
   res_proc: ('data, 'result) processor;
   (* lazy result container *)
   mutable res_result: 'result option
}

type ('data, 'result) global_procesed_data =
   (bookmark, ('data, 'result) proc_result) Hashtbl.t

(* The following two functions help solving Problem 3.2 by hiding the
   'intermediate type *)

(* Creates a 'intermediate ref (with fp_empty initially) to keep the
   'intermediate in it. proc_clone will copy the ref. *)
val make_fun_proc:
   ('data, 'intermediate, 'result) funct_processor -> ('data, 'result) processor

(* "functionalize an imperative processor *)
val make_proc_functional:
   ('data, 'intermediate, 'result) imper_processor ->
   ('data, 'data list   , 'result) funct_processor
(* Creates a record where fp_empty is an empty list, fp_add is just an append
   and fp_retr does all the work *)

(* Combines make_fun_proc with make_proc_functional *)
val make_imp_proc:
   ('data, 'intermediate, 'result) imper_processor -> ('data, 'result) processor

(* Creates a hashtable and adds the specified processor as a proc_result for
   empty_bookmark (and all equivalent to it *)
val create_global_processed_data:
   ('data, 'result) processor ->
   ('data, 'result) global_processed_data

(* Get the actual result *)
val get_result: ('data, 'result) proc_result -> 'result
(* Will try using res_result field, else will call res_proc.proc_retrieve,
   save the result in res_result and return it *)

(* Adds a bookmark to the global_procesed_data hashtable.
   May raise Not_found exception *)
val extract_bookmark:
    bookmark ->
    'data global_data ->
    ('data, 'result) global_processed_data ->
    ('data, 'result) proc_result

(* extract_bookmark would be implemented as follows:
   1) Try looking up global_processed_data to see if we already know the
   result.
   2) Retrieve the increment, run extract_bookmark for its base.
   3) If increment is non-empty, then
      a) Clone the proc_result (from 2).
      b) Feed all increment data to (cloned proc_result).proc_add (in reverse order)
   4) Return {res_proc=proc_result; res_result=None}
*)

(* extract_bookmark, then get_result *)
val find_bookmark:
    bookmark ->
    'data global_data ->
    ('data, 'result) global_processed_data ->
    'result

Module 4: Dealing with multiple resources with the same 'data and 'result
types.

type ('data, 'intermediate, 'result) resource_info =
   Imperative of ('data, 'intermediate, 'result) imper_processor
 | Functional of ('data, 'intermediate, 'result) funct_processor

(* combines make_imp_proc with make_fun_proc *)
val make_processor:
   ('data, 'intermediate, 'result) resource_info -> ('data, 'result) processor

In order to better accomodate multimple modules and solve problems 2.1 and
2.2, we should:
 - In Module1, take x_data = (string * 'data) where string is the resource name.
 - In Module2, change the type of inc_increment to be
      (string, 'data list) Splay_table.t
This way we first put everything in a single pile, we do bookmark processing
and duplicate includes elimination in one pass for all the resources and then
separate the increment (while keeping bookmarks together)

Next we need
type ('data, 'result) really_global_procesed_data =
   (string, ('data, 'result) global_procesed_data) Hashtbl.t

to have a separate processed data table for each resource.

We'll also have:

val x_processed_data: (x_data, x_result) really_global_procesed_data

Module 5: Dealing with multiple resources with different 'data and 'resource
types.

I propose to handle the multitude of 'data and 'resource types by using the
Obj.t as x_data and x_resource and using Obj.repr and Obj.obj to convert
between the Obj.t and the real type. The parser would create the code with
appropriate type constraints (we know the types from the resource
declaration), so we can ensure the resource code is still type-checked
properly.

(* use Obj to hide the types *)
val untyped_processor:
   ('data, 'result) processor -> Obj.t, Obj.t processor

So, in the above Modules (except for Module1 - see comments for Module2) we
will have x_data = x_result = Obj.t

Module 6: the actual exposed interface:

(* From Module1 *)
val improve : string -> Obj.t -> unit (* takes a resource name and a data *)
val bookmark: string -> unit (* takes local name *)
val include_theory: string -> unit (* takes theory name *)
val close_theory: string -> unit

(* From Module2 *)
type bookmark = string * string (* theory name + local name *)

type ('data, 'intermediate, 'result) funct_processor = {
   fp_empty: 'intermediate;
   fp_add: 'itermediate -> 'data -> 'intermediate;
   fp_retr: 'intermediate -> 'result
}

type ('data, 'intermediate, 'result) imper_processor = {
   imp_create: unit -> 'intermediate;
   imp_add: 'intermediate -> 'data -> unit;
   imp_retr: 'intermediate -> 'result
}

(* From Module3 *)
type ('data, 'intermediate, 'result) resource_info =
   Imperative of ('data, 'intermediate, 'result) imper_processor
 | Functional of ('data, 'intermediate, 'result) funct_processor

(* other functions *)

(* combines make_processor with untyped_processor and creates an entry for the
   named resource in x_processed_data (see Module4) *)
val create_resource:
   string -> ('data, 'intermediate, 'result) resource_info -> unit

type global_resource (* = bookmark *)
val find : bookmark -> global_resource (* = identity, but checks existence *)
val get_resource : global_resource -> string -> Obj.t
(* get_resource would take the global_procesed_data from x_processed_data
   using the resource name supplied, and run find_bookmark *)

-------------------------------------------------------------------------------

Parsing (using the syntax I presented in the newsgroup - see
news://news.metaprl.org/3B2773C6.3000403@CS.Cornell.EDU ):

0. Resource declaration in an interface:

resource (<data>, <result>) <name>

will expand to

<name>_resource: global_resource -> <result>

1. Resource declaration in implementation.

let resource <name> = expr

Will expand to

let _ = Mp_resource.create_resource "<name>"
   (expr : (<info>, <result>, <data>) Mp_resource.resource_info);;
let <name>_resource r =
   Obj.obj (Mp_resource.get_resource r "<name>")

2. Resource improvement:

let resource <name> += <exp>

Will expand to
let _ = Mp_resource.improve "<name>" (Obj.repr (<expr>: <data>))

Additionally, one can write

let resource <name> += [ <exp1>; <exp2>; ...; <expn> ]

to add several data object in one step (the order is undefined).

3. Bookmarking at a rule:

rule xx will (among other things)

Mp_resource.bookmark "xx"

4. At the end of each theory:

let _ =
   Mp_resource.close_theory "theory_name"

5. Resource annotation functions.

a. Interface:

resource annotation <name> : <type>

will produce the following declaration:

val $<name>_resource_arg : <type> -> <data>
(where <data> is taken from the resource declaration for <name>)

Question: do you think it would be better to have it return <data> list, not
just <data>?

b. I propose to add support for the following implementation declaration:

let resource annotation <name> = <expr>

which will expand to the following:

let $<name>_resource_arg = <expr>

c. After that all the resource annotations would use the last declared
resource_arg to convert the annotation to <data> (or <data> list) that would
then be used to improve the named resource.

In other words,
rule xx {| <name> expr |}

will expand (among other things) to

let resource <name> +=
   (Appropriate_theory.$<name>_resource_arg (xx, expr))
