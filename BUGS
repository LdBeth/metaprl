DOCUMENTATION:

*) Documentation suggests to use mp and x.mp
while mpopt and mptop should be used instead

*) Make system is not documented

EDITOR

*) Shell.cd function tries to expand proofs, it should not

*) Currently there is no way to change the statement of a theorem once
you started proving it. We need to be able to do it without 
erasing the proof. 

*) Loading two theories that both include the same theory produces unexpected results.
For example,

        MetaPRL 0.5.2:
                build [Sun May 16 16:50:01 EDT 1999]
                on tulare.cs.cornell.edu

        Camlp4 Parsing version 2.02

# #use "x.ml";;
# load "itt_dfun";;
- : unit = ()
# cd "itt_dfun";;
- : string = "/itt_dfun"
# <<'a->'b>>;;
- : Refiner.Refiner.Term.term = a но b
# load "itt_list";;
- : unit = ()
# cd "/itt_list";;
- : string = "/itt_list"
# <<'a->'b>>;;
# While expanding quotation "term":
Failure: undeclared name: fun

(Running this example in mpopt produces similar result).

This error also raised when we cd <theory>, and then load <theory>:
> # cd "dec_eq";;
> /dec_eq : string
> # load "dec_eq";;
> () : unit
> # <<it>>;;
> chars 32-34: Pcaml.Qerror("", 0, _)
> # chars 36-38: Stream.Error("illegal begin of toplevel phrase")
> #
> # MetaPRL exiting
>
> [kopylov@tulare ml]$ ./mpopt
> MetaPRL 0.5.2:
>   build [Fri May 21 19:06:08 EDT 1999]
>   on tulare.cs.cornell.edu
>   Uses VERBOSE Refiner_ds
> # load "dec_eq";;
> () : unit
> # cd "dec_eq";;
> /dec_eq : string
> # <<it>>;;

*) Display forms do not work (they raise Invalid_argument ("List.combine") ) if they 
are specified using SO variables. This may be a rewriter bug.

REWRITER

*) If a variable is bound in a context, rewriter may handle it incorrectly.

*) If the same variable is bound several times in redex or contractum specification, rewriter
may handle it incorrectly. We can not prohibit repeated bound variable in redeces
specification because of two-way rewrites.

*) If the same variabe is bound several times in the matched term, rewriter may handle
it incorrectly.

Example:
test{x.test{y.'C['x; 'y]}} <--> 'C[1; 2] 
rewrites <<test{x.test{x.'x}}>> to 1 instead of 2.

*) Rewriter should support "strict" matching - in a redex, when a abound variable
is not explicity mentioned as an argument of a SO variable, the matching term should
not have free occurences of the correspondent variable. 

The "strict" mode would also eliminate the problem rhw bug mentioned below in the REFINER
section.

*) Rewriter does not prevent capturing. It should, at least in the "strict" mode.

*) Currently rewriter does not enforce building contractum to be against the same redex
the contractum was compiled against. Hopefully we never do this wrong, but we still
should enforce it.

REFINER

*) There is no clear semantics for the hidden hypothesis. As a result,
many rules deal with hidden hypothesis incorrectly. Currently, one
can prove 0=1 using those unsound rules.

*) Repeated bound variables (when the same variable is bound more than once) is
handled incorrectly. For example, thinning rule does not check if the variable
is bound only once (which may be used to prove incorrect results).

*) rwh does not do matching correctly - for example, it allows to use reduceEta
on <<lambda{x.('x 'x)}>>. This may be fixed by using rewriter in "strict" mode, when
implemented (see REWRITER section above).

*) "Understanding" extracts seems broken. When refiner passes extracts to rewriter,
it "forgets to mention" that they are in the scope of hypothesis variables.

One of the side-effects of this problem is that we have to pass unnecessary arguments
to some of the rules (such as srecElimination).

PARSER & FILTER

*) Rules and rewrites should be added to toploop. 

*) When rule is added, the appropriate tactic should be added automatically
(assuming sequent calculus).

*) Some times parser requires too many brackets.

*) The rules without parameters should not require : :, a single colon
should be sufficient (it means that we should remove an alternative rule
syntax of
interactive name: A1 A2 ... : An)
