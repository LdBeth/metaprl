#
# Don't need any libraries.
#
OCAMLINCLUDES += ../display
OCAMLDEPFLAGS += -notopval
OCAMLFLAGS += -rectypes

# .mlz files
MLZFILES[] =
    session_sig
    shell_sig
    shell_internal_sig
    shell_syscall_sig
    shell_p4_sig
    browser_sig
    shell_theory

# MetaPRL Files
MPFILES[] =
    proof_edit
    proof_initialize
    mptop
    shell_command
    shell_package
    shell_root
    shell_fs
    shell_current
    shell_syscall
    shell
    browser_resource
    shell_theory

InstallCmizFiles($(MPFILES))

# Preprocessing files
PPFILES[] =
    shell_state

# All library files
include Files

FILES = $(SHELL_FILES)

shell_state.mlh: :value: $(DEFAULT_UI) $(BROWSER_COMMAND)
    section eval
        TEXT[] =
        if $(equal $(DEFAULT_UI), browser)
            TEXT[] +=
                DEFINE BROWSER_DEFAULT
            export
        TEXT[] +=
            DEFINE DEFAULT_BROWSER_COMMAND = $(if $(BROWSER_COMMAND), $""Some "$(ocaml-escaped $(BROWSER_COMMAND))" "", None)
        fprintln($@, $(concat $(nl), $(TEXT)))

.SCANNER: scan-ocaml-shell_state.ml: shell_state.mlh

#
# Some of these files should use the normal OCaml compiler
#
section
    export($(STANDARD_BUILD_ENV))

    # shell_state requires preprocessing
    section
        OCAMLPPFLAGS = -pp $(quote-argv $(MACROPP) $(LOC))
        $(addsuffixes .cmi .cmo .cmx $(EXT_OBJ), $(PPFILES)):

    files = $(filter-out $(MPFILES) $(PPFILES), $(FILES))
    files = $(addsuffixes .cmi .cmo .cmx $(EXT_OBJ), $(files))
    $(files):

$(THEORIES_PATH): $(CWD)

OCamlLibrary(theory, $(FILES))

OCamlGeneratedFiles(browser_copy.ml browser_session_io.ml session_io.ml)

#
# Clean up
#
clean:
    $(CLEAN) browser_copy.ml browser_session_io.ml session_io.ml shell_state.mlh

all: theory$(LIB_SUFFIX)

#
# Input installation
#
.SUBDIRS: inputs
