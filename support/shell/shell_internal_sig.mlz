(*
 * This data structure is used internally by the shell.
 *
 * ----------------------------------------------------------------
 *
 * @begin[license]
 * Copyright (C) 2004 Mojave Group, Caltech
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 *
 * Author: Jason Hickey @email{jyh@cs.caltech.edu}
 * Modified by: Aleksey Nogin @email{nogin@cs.caltech.edu}
 * @end[license]
 *)
open Dform
open Refiner.Refiner
open Refiner.Refiner.TermType
open Tactic_type.Tactic
open Shell_sig
open Shell_util

(*
 * Mount descriptions.
 *)
type shell_fs =
   DirRoot
 | DirFS
 | DirModule of string * string
 | DirProof of string * string * string

type shell_dir = shell_fs * string list (* mount point + relative path *)

(*
 * This is the info we need for each subshell.
 * The subshells can be threaded; we must make this shell
 * thread-safe.
 *)
type shell =
   { (* Name of this shell for debugging *)
     shell_debug                 : string;

     (* Set if the shell directory is out of date *)
     mutable shell_needs_refresh : bool;

     (* Display *)
     mutable shell_df_method     : display_method;

     (* Current module and path and proof *)
     mutable shell_fs            : shell_fs;
     mutable shell_subdir        : string list;
     mutable shell_package       : Package_info.package option;
     mutable shell_proof         : edit_object
   }

(*
 * Functions on items.
 *)
type item_fun = edit_object -> dform_base -> was_modified
type clean_item_fun = string -> string -> unit
type clean_module_fun = Package_info.package -> unit

(*
 * Shell commands for callbacks.
 * This is imperative because these are recursive calls
 * that are not available until the shell is initialized.
 *)
type shell_commands =
   { mutable initialized : bool;
     mutable init : unit -> unit;
     mutable cd : string -> string;
     mutable root : unit -> string;
     mutable refresh : unit -> unit;
     mutable pwd : unit -> string;
     mutable relative_pwd : unit -> string;
     mutable fs_pwd : unit -> string;
     mutable set_dfmode : string -> unit;
     mutable set_dftype : display_type -> unit;
     mutable create_pkg : string -> unit;
     mutable backup : unit -> unit;
     mutable backup_all : unit -> unit;
     mutable save : unit -> unit;
     mutable save_all : unit -> unit;
     mutable export : unit -> unit;
     mutable export_all : unit -> unit;
     mutable revert : unit -> unit;
     mutable revert_all : unit -> unit;
     mutable abandon : unit -> unit;
     mutable abandon_all : unit -> unit;
     mutable view : LsOptionSet.t -> unit;
     mutable expand : unit -> unit;
     mutable expand_all : unit -> unit;
     mutable apply_all : item_fun -> bool -> clean_item_fun -> clean_module_fun -> unit;
     mutable interpret : proof_command -> unit;
     mutable undo : unit -> unit;
     mutable redo : unit -> unit;
     mutable create_ax_statement : term -> string -> unit;
     mutable refine : tactic -> unit;
     mutable check : unit -> unit;
     mutable extract : string list -> unit -> Refine.extract;
     mutable term_of_extract : term list -> term; (* XXX HACK: temporary interface *)
     mutable print_theory : string -> unit;
     mutable get_view_options : unit -> string;
     mutable set_view_options : string -> unit;
     mutable clear_view_options : string -> unit;
     mutable find_subgoal : int -> string;
     mutable is_enabled : method_name -> bool;
     mutable edit : string -> int
   }

(*!
 * @docoff
 *
 * -*-
 * Local Variables:
 * Caml-master: "compile"
 * End:
 * -*-
 *)
