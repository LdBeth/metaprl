(*
 * The shell_p4 module configures camlp4 for MetaPRL.
 *
 * ----------------------------------------------------------------
 *
 * This file is part of MetaPRL, a modular, higher order
 * logical framework that provides a logical programming
 * environment for OCaml and other languages.
 *
 * See the file doc/index.html for information on Nuprl,
 * OCaml, and more information about this system.
 *
 * Copyright (C) 1998 Jason Hickey, Cornell University
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 *
 * Author: Jason Hickey <jyh@cs.cornell.edu>
 * Modified By: Aleksey Nogin <nogin@cs.caltech.edu>
 *)

open Tactic_type.Tactic

(*
 * These are the functions provided by the shell.
 *)
module type ShellP4Sig =
sig
   (*
    * Current toploop state.
    *)
   val set_current_state : Shell_state.t -> unit
   val get_current_state : unit -> Shell_state.t

   (*
    * Expression evaluation.
    *)
   val parse_string : Shell_state.t -> string -> MLast.expr
   val eval_tactic : Shell_state.t -> MLast.expr -> tactic
   val eval_expr : Shell_state.t -> string -> unit
   val eval_top : Shell_state.t -> string -> unit

   (*
    * Open all the obvious modules.
    *)
   val eval_opens : Shell_state.t -> string list list -> unit

   (*
    * Main loop.
    * If the standard toploop is used, this function
    * will exit.  Otherwise, it will only exit when the toploop
    * is finished.
    *)
   val main : Shell_state.t -> unit
end

(*
 * -*-
 * Local Variables:
 * Caml-master: "refiner"
 * End:
 * -*-
 *)
