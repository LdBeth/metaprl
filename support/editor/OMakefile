#
# MetaPRL editor.
#
OCAMLFLAGS += -rectypes

OCAMLINCLUDES[] +=
   $(dir $(ROOT)/$(ENSEMBLE_DIR))
   ../shell
   ../tactics

# Name of main libraries
MP = libmp

########################################################################
# LOCAL FILES
########################################################################

# Common files
MLZFILES[] =
    proof_sig
    display_sig
    nuprl_sig

RUNFILES[] =
    mp_version
    shell_mp
    # shell_p4
    nuprl_sig
    nuprl_eval
    nuprl_jprover
    nuprl_run
    mp

TOPFILES[] =
    mp_version
    shell_mp
    nuprl_sig
    nuprl_eval
    nuprl_jprover
    nuprl_run
    mp_top

########################################################################
# Generate the mp_version.ml file
#
make_mp_version$(EXE): make_mp_version.ml
    $(OCAMLC) $(OCAMLCFLAGS) -o $@ unix.cma $<

.STATIC:
    GIT_AVAILABLE = $(and $(CheckProg git), $(file-exists $(ROOT)/.git/))

if $(GIT_AVAILABLE)

    GIT_TAGS = $(filter-exists $(ls $(ROOT)/.git/refs/tags))
    if $(GIT_TAGS.is-nonempty)
        gitversion.txt: $(GIT_TAGS) $(ROOT)/.git/logs/HEAD
            git describe --tags > $@

    else
        gitversion.txt: $(ROOT)/.git/HEAD
            git describe --all > $@

else
    gitversion.txt:
        fprintln($@, unknown)

mp_version.ml: make_mp_version$(EXE) gitversion.txt
    ./make_mp_version -version $(MP_VERSION) -refiner $(REFINER) -terms $(TERMS) > $@

LocalOCamlGeneratedFiles(mp_version.ml)

########################################################################
# Libraries
#
OCamlLibrary($(MP)run, $(RUNFILES))
OCamlLibrary($(MP)top, $(TOPFILES))
OCamlLibraryCopy($(MPINSTALL), $(LIB), $(MP)run, $(set $(RUNFILES) $(TOPFILES)))
OCamlLibraryCopy($(MPINSTALL), $(LIB), $(MP)top, $(EMPTY))
LibInstall(svnversion.txt $(basename $(MP_DIRECT_SCRIPTS)))

#
# Clean up
#
clean:
    $(CLEAN) mp_version.ml make_mp_version$(EXE) gitversion.txt
