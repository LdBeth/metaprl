#
# MetaPRL editor.
#
OCAMLINCLUDES[] +=
   $(dir $(ROOT)/$(ENSEMBLE_DIR))
   ../shell
   ../tactics

# Name of main libraries
MP = libmp

########################################################################
# LOCAL FILES
########################################################################

# Common files
MLZFILES[] =
    proof_sig
    display_sig
    nuprl_sig

RUNFILES[] =
    mp_version
    shell_mp
    shell_p4
    nuprl_sig
    nuprl_eval
    nuprl_jprover
    nuprl_run
    mp

TOPFILES[] =
    mp_version
    shell_mp
    nuprl_sig
    nuprl_eval
    nuprl_jprover
    nuprl_run
    mp_top

########################################################################
# Generate the mp_version.ml file
#
make_mp_version$(EXE): make_mp_version.ml
    $(OCAMLC) $(OCAMLCFLAGS) -o $@ unix.cma $<

static. =
    SVNVERSION_AVAILABLE = $(CheckProg svnversion)

if $(file-exists $(ROOT)/.svn/entries)
    #
    # XXX: BUG: nogin: for some reason, extracting dependencies gives an empty set here :-(
    #
    get-entries() =
        # dirs = $(dependencies $(MLDEBUG_PATH))
        FS=$'"'
        awk($(MLDEBUG_PATH))
        case $'^DEBUGINCLUDES='
            dirs = $(filter-out -I, $(array $2))
            export
        case $'^-I'
            dirs = $(filter-out -I, $(array $0))
            export
        return $(addsuffix /.svn/entries, $(dirs))

    digest-deps() =
        return $(digest-optional $(get-entries))

    if $(SVNVERSION_AVAILABLE)
        svnversion.txt: $(MLDEBUG_PATH) :value: $(digest-deps)
            svnversion $(ROOT) > $@

    else
        svnrevision(args) =
            hi = false
            lo =
            FS=$'"'
            foreach(ent, $(args))
                if $(file-exists $(ent))
                    awk($(ent))
                    case $'[ \t]*revision="[0-9]*"/>$'
                        if $(hi)
                            hi = $(if $(gt $(hi), $2), $(hi), $2)
                            lo = $(if $(gt $(lo), $2), $2, $(lo))
                            export
                        else
                            hi = $2
                            lo = $2
                            export
                        export
                    export
                export
            if $(hi)
                if $(eq $(hi), $(lo))
                    value $(hi)
                else
                    value $"$(lo):$(hi)"
            else
                value unknown

        write_svnversion(file) =
            fprintln($(file), $(svnrevision $(get-entries)))

        svnversion.txt: $(MLDEBUG_PATH) :value: $(digest-deps)
            write_svnversion($@)

else
    svnversion.txt:
        fprintln($@, unknown)

mp_version.ml: make_mp_version$(EXE) svnversion.txt
    ./make_mp_version -version $(MP_VERSION) -refiner $(REFINER) -terms $(TERMS) > $@

LocalOCamlGeneratedFiles(mp_version.ml)

########################################################################
# Libraries
#
OCamlLibrary($(MP)run, $(RUNFILES))
OCamlLibrary($(MP)top, $(TOPFILES))
OCamlLibraryCopy($(MPINSTALL), $(LIB), $(MP)run, $(set $(RUNFILES) $(TOPFILES)))
OCamlLibraryCopy($(MPINSTALL), $(LIB), $(MP)top, $(EMPTY))
LibInstall(svnversion.txt $(basename $(MP_DIRECT_SCRIPTS)))

#
# Clean up
#
clean:
    $(CLEAN) mp_version.ml make_mp_version$(EXE) svnversion.txt
