(*
 * Redefine the resource types more specifically.
 *
 * ----------------------------------------------------------------
 *
 * @begin[license]
 * Copyright (C) 2005 Mojave Group, Caltech
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 *
 * Author: Jason Hickey
 * @email{jyh@cs.caltech.edu}
 * @end[license]
 *)
open Refiner.Refiner.TermType
open Tactic_type.Tactic
open Rewrite_sig
open Mp_resource

(*
 * Resource types.
 *
 * Split the annotation processor types into named versions
 * so that we can force choice of optional arguments.
 *)
type 'input named_annotation_processor =
   rewrite_args_spec ->         (* Names of the context vars parameters *)
   term list ->                 (* Term parameters *)
   meta_term ->                 (* Rule statement *)
   MLast.loc ->                 (* Location of the rule *)
   pre_tactic ->
   'input list

type 'input annotation_processor =
   ?select: term list ->        (* Allow the rule only if the labels are allowed *)
   ?labels: term list ->        (* Prevent the rule if the label is excluded *)
   string ->                    (* Name of the new rule *)
   'input named_annotation_processor

type 'input named_rw_annotation_processor =
   term ->                      (* Redex *)
   term ->                      (* Contractum *)
   term list ->                 (* Assumptions *)
   rewrite_args_spec ->         (* Names of the context vars parameters *)
   term list ->                 (* Term arguments *)
   MLast.loc ->                 (* Location of the rewrite *)
   prim_rewrite ->
   'input list

type 'input rw_annotation_processor =
   ?select: term list ->        (* Allow the rule only if the labels are allowed *)
   ?labels: term list ->        (* Prevent the rule if the label is excluded *)
   string ->                    (* Name of the new rewrite *)
   'input named_rw_annotation_processor

(*!
 * @docoff
 *
 * -*-
 * Local Variables:
 * Caml-master: "compile"
 * End:
 * -*-
 *)
