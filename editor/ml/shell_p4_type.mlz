(*
 * The shell_p4 module configures camlp4 for MetaPRL.
 *
 * ----------------------------------------------------------------
 *
 * This file is part of MetaPRL, a modular, higher order
 * logical framework that provides a logical programming
 * environment for OCaml and other languages.
 *
 * See the file doc/index.html for information on Nuprl,
 * OCaml, and more information about this system.
 *
 * Copyright (C) 1998 Jason Hickey, Cornell University
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 *
 * Author: Jason Hickey
 * jyh@cs.cornell.edu
 *)

open Opname
open Refiner.Refiner.TermType
open Dform

open Tacticals

module type ShellP4Sig =
sig
   (*
    * Flag for whether currently in interactive mode.
    *)
   val is_interactive : unit -> bool

   (*
    * Set the current display form base.
    *)
   val set_df : dform_base option -> unit

   (*
    * This is the opname function used when terms are built.
    *)
   val set_mk_opname : (string list -> opname) option -> unit

   (*
    * Set the current module.
    *)
   val set_module : string -> (string * Mptop.expr) list -> unit

   (*
    * Printers.
    *)
   val print_term : term -> unit

   (*
    * Get the tactic for the last refinement.
    *)
   val get_tactic : unit -> string * MLast.expr

   (*
    * Compile a tactic.
    *)
   val parse_string : string -> MLast.expr
   val eval_str_item : MLast.loc -> MLast.str_item -> unit
   val eval_expr : MLast.loc -> MLast.expr -> unit
   val eval_tactic : MLast.expr -> tactic

   val eval_opens : string list list -> unit

   (*
    * Include directory list.
    *)
   val get_includes : unit -> string list

   (*
    * Main loop.
    * If the toploop is used, this function will exit.
    *)
   val main : unit -> unit
end

(*
 * -*-
 * Local Variables:
 * Caml-master: "refiner"
 * End:
 * -*-
 *)
