(*
 * The editor collects information about each theory and
 * summarizes it in a "package".  At start-up, the pre-loaded packages
 * are collected and presented as read-only theories.
 *
 * We can also create interactive packages, which are writable,
 * and may contain interactivly generated proofs.
 *)

open Refine
open Dform_print

open Filter_summary
open Filter_cache

(*
 * Save status of a module.
 *)
type status =
   Unmodified
 | Modified
 | ReadOnly

(*
 * A package is a lot like a FilterCache, but
 * we remove some of the extra options.
 *)
module type PackageSig =
sig
   (*
    * This is the database type.
    *)
   type t
   
   (*
    * This is the type of a package.
    *)
   type package
   
   (*
    * Create a database.  The argument is the search path.
    *)
   val create : string list -> t
   
   (*
    * Filesystem interface.
    * Loaded packages are initially read-only.
    *)
   val create_package : t -> string -> package
   val load : t -> string -> MLast.str_item
   val get : t -> string -> package
   val save : t -> package -> unit

   (*
    * Access.
    *)
   val refiner  : package -> Refiner.refiner
   val dforms   : package -> dform_mode_base
   val name     : package -> string
   val filename : t -> package -> string
   
   (*
    * Navigation.
    *)
   val parents : t -> package -> package list
   val children : t -> package -> package list
   
   (*
    * Access to the status.
    *)
   val status  : package -> status
   val set_status : package -> status -> unit
   
   (*
    * Collection of objects in the module.
    *)
   val info : package -> (proof_type, MLast.ctyp, MLast.expr, MLast.str_item) summary_item_loc list
end
   
(*
 * $Log$
 * Revision 1.2  1998/04/15 22:28:50  jyh
 * Converting packages from summaries.
 *
 * Revision 1.1  1998/04/15 12:39:38  jyh
 * Updating editor packages to Filter_summarys.
 *
 *
 * -*-
 * Local Variables:
 * Caml-master: "editor.top"
 * End:
 * -*-
 *)
