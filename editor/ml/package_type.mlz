(*
 * The editor collects information about each theory and
 * summarizes it in a "package".  At start-up, the pre-loaded packages
 * are collected and presented as read-only theories.
 *
 * We can also create interactive packages, which are writable,
 * and may contain interactivly generated proofs.
 *)

include Tactic_type
include Summary
include Proof_edit
include Proof_type

open Opname
open Refiner.Refiner
open Refiner.Refiner.Term
open Dform_print

open Filter_summary
open Filter_cache

open Tactic_type
open Proof_type

(*
 * Save status of a module.
 *)
type status =
   Unmodified
 | Modified
 | ReadOnly
 | Incomplete

(*
 * This exception is raised when a package is requested,
 * and it has not been loaded.
 *)
exception NotLoaded of string

(*
 * A package is a lot like a FilterCache, but
 * we remove some of the extra options.
 *)
module type PackageSig =
sig
   (*
    * This is the database type.
    *)
   type t

   (*
    * This is the type of a package.
    *)
   type package

   (*
    * Proofs are abstract.
    *)
   type proof

   (*
    * Create a database.  The argument is the search path.
    *)
   val create : string list -> t

   (*
    * Filesystem interface.
    * Loaded packages are initially read-only.
    *)
   val create_package : t -> string -> package
   val load : t -> string -> package
   val get : t -> string -> package
   val save : t -> package -> unit

   (*
    * Access.
    *)
   val refiner  : package -> Refine.refiner
   val dforms   : package -> dform_mode_base
   val name     : package -> string
   val filename : t -> package -> string

   (*
    * Navigation.
    *)
   val packages : t -> package list
   val roots : t -> package list
   val parents : t -> package -> package list
   val children : t -> package -> package list

   (*
    * Access to the status.
    *)
   val status  : package -> status
   val set_status : package -> status -> unit
   val touch : package -> unit

   (*
    * Access to the cache.
    *)
   val mk_opname : package -> string list -> opname

   (*
    * Collection of objects in the module.
    *)
   val info : package -> (proof proof_type, MLast.ctyp, MLast.expr, MLast.str_item) module_info
   val sig_info : package -> (unit, MLast.ctyp, MLast.expr, MLast.sig_item) module_info
   val find : package -> string -> (proof proof_type, MLast.ctyp, MLast.expr, MLast.str_item) summary_item
   val set : package -> (proof proof_type, MLast.ctyp, MLast.expr, MLast.str_item) summary_item -> unit

   (*
    * This is the starting info for new proofs.
    *)
   val argument : package -> tactic_argument
   val new_proof : package -> term list -> term -> proof
   val ped_of_proof : package -> proof -> Proof_edit.t
end

(*
 * $Log$
 * Revision 1.11  1998/06/15 22:31:43  jyh
 * Added CZF.
 *
 * Revision 1.10  1998/06/09 20:51:14  jyh
 * Propagated refinement changes.
 * New tacticals module.
 *
 * Revision 1.9  1998/06/01 13:52:18  jyh
 * Proving twice one is two.
 *
 * Revision 1.8  1998/05/29 14:52:49  jyh
 * Better Makefiles.
 *
 * Revision 1.7  1998/05/28 13:45:45  jyh
 * Updated the editor to use new Refiner structure.
 * ITT needs dform names.
 *
 * Revision 1.6  1998/05/04 13:01:00  jyh
 * Ocaml display without let rec.
 *
 * Revision 1.5  1998/04/28 18:29:42  jyh
 * ls() works, adding display.
 *
 * Revision 1.4  1998/04/17 02:25:31  jyh
 * Implementing shell.
 *
 * Revision 1.3  1998/04/17 01:30:43  jyh
 * Editor is almost constructed.
 *
 * Revision 1.2  1998/04/15 22:28:50  jyh
 * Converting packages from summaries.
 *
 * Revision 1.1  1998/04/15 12:39:38  jyh
 * Updating editor packages to Filter_summarys.
 *
 *
 * -*-
 * Local Variables:
 * Caml-master: "editor.top"
 * End:
 * -*-
 *)
