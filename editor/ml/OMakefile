#
# MetaPRL editor.
#
OCAMLINCLUDES =\
        -I .\
        -I $(LIB)\
        -I $(LIB)rary\
        -I $(CAMLP4LIB)\
        -I $(ROOT)/$(ENSEMBLE_DIR)\
        $'(addprefix -I , $(MP_DIRS))

# Name of main librariws
MAIN = metaprl
MP = mp

########################################################################
# LOCAL FILES
########################################################################

# Common files
MLZFILES =\
        proof_sig\
        display_sig\
        nuprl_sig

# Library files
MPFILES =\
        shell_http

MP2FILES =\
        shell_mp\
        shell_p4\
        nuprl_sig\
        nuprl_eval\
        nuprl_jprover\
        nuprl_run\
        mp\
        mp_top

RUNFILES =\
        mp_version\
        shell_mp\
        shell_p4\
        nuprl_sig\
        nuprl_eval\
        nuprl_jprover\
        nuprl_run\
        mp

TOPFILES =\
        mp_version\
        shell_mp\
        nuprl_sig\
        nuprl_eval\
        nuprl_jprover\
        nuprl_run\
        mp_top

OCAML_LINK_FLAGS += -linkall

OCamlLibrary($(MAIN), $(MPFILES))

TESTFILES =

if $(TESTS)
   .SUBDIRS: tests
   TESTFILES =\
      tests/test\
      tests/prop-pigeon
   export

MP2FILES = $(TESTFILES) $(MP2FILES)
RUNFILES = $(TESTFILES) $(RUNFILES)
TOPFILES = $(TESTFILES) $(TOPFILES)

RCMOFILES = $(addsuffix .cmo, $(RUNFILES))
TCMOFILES = $(addsuffix .cmo, $(TOPFILES))
TCMXFILES = $(addsuffix .cmx, $(TOPFILES))

BASE_LIBS = \
   $(LIB)/lm\
   $(LIB)/util\
   $(LIB)/refiner\
   $(LIB)/library\
   $(LIB)/trefiner\
   $(LIB)/prooflib\

BASE_ARS   = $(addsuffix $(EXT_LIB), $(BASE_LIBS))
BASE_CMAS  = $(addsuffix .cma      , $(BASE_LIBS))
BASE_CMXAS = $(addsuffix .cmxa     , $(BASE_LIBS))

# JYH: have to update these to match $(ROOT)/OMakefile
if $(THREADS_ENABLED)
    THREADS = -thread
    THREADSLIB = $(CAMLLIB)/threads/threads.cma
    OPTTHREADSLIB = $(CAMLLIB)/threads/threads.cmxa
    LIBTHREADS = -cclib -lthreadsnat -cclib -lunix -cclib -lpthread
    OPTTHREADS = -cclib -lthreadsnat -cclib -lunix -cclib -lpthread
    export

else
    THREADS =
    THREADSLIB =
    OPTTHREADSLIB =
    LIBTHREADS =
    OPTTHREADS =
    export

########################################################################
# LIBRARIES
########################################################################

LMARDEPS = $(LIB)/lm$(EXT_LIB)
LMXADEPS = $(LIB)/lm.cmxa
LMADEPS  = $(LIB)/lm.cma
TLMADEPS = $(LIB)/lm.cma
LIBS     = $(LIB)/liblmcutil$(EXT_LIB)

#
# If MCC is enabled, add the libraries
#
if $(defined MCC)
    LMARDEPS += $(MCC)/lib/firtype$(EXT_LIB)
    LMXADEPS += $(MCC)/lib/firtype.cmxa
    LMADEPS  += $(MCC)/lib/firtype.cma
    TLMADEPS += $(MCC)/lib/firtype.cma
    export

CMXADEPS =\
        $(CAMLLIB)/unix.cmxa\
        $(CAMLLIB)/str.cmxa\
        $(OPTTHREADSLIB)\
        $(CAMLP4LIB)/odyl.cmxa\
        $(CAMLP4LIB)/camlp4.cmxa\
        $(BASE_CMXAS)\
        $(CAMLP4LIB)/pa_o.cmx\
        $(CAMLP4LIB)/pa_op.cmx\
        $(LIB)/prlc.cmxa\
        $(addsuffix /theory.cmxa, $(MP_DIRS))\
        $(MAIN).cmxa

ARDEPS =\
        $(BASE_ARS)\
        $(LIB)/prlc.a\
        $(addsuffix /theory.a, $(MP_DIRS))\
        $(MAIN).a

CMXALIBS =\
        $(CMXADEPS)

CMADEPS =\
        $(CAMLP4LIB)/odyl.cma\
        $(CAMLLIB)/unix.cma\
        $(CAMLLIB)/str.cma\
        $(THREADSLIB)\
        $(CAMLP4LIB)/camlp4.cma\
        $(CAMLP4LIB)/camlp4_top.cma\
        $(BASE_CMAS)\
        $(CAMLP4LIB)/pa_o.cmo\
        $(CAMLP4LIB)/pa_op.cmo\
        $(LIB)/prlc.cma\
        $(addsuffix /theory.cma, $(MP_DIRS))\
        $(MAIN).cma

TCMADEPS =\
        $(CAMLP4LIB)/odyl.cma\
        $(CAMLLIB)/unix.cma\
        $(CAMLLIB)/str.cma\
        $(THREADSLIB)\
        $(CAMLP4LIB)/camlp4.cma\
        $(BASE_CMAS)\
        $(CAMLP4LIB)/pa_o.cmo\
        $(CAMLP4LIB)/pa_op.cmo\
        $(LIB)/prlc.cma\
        $(addsuffix /theory.cma, $(MP_DIRS))\
        $(MAIN).cma


CMALIBS =\
        $(CMADEPS)

TCMALIBS =\
        $(TCMADEPS)

CMOBJS =\
        $(CMALIBS)

TCMOBJS =\
        $(TCMALIBS)

CMXOBJS =\
        $(CMXALIBS)

CLIBS = $(LIB)/clib
BYTE_CLIBS = $(addsuffix $(EXT_LIB), $(CLIBS))
NATIVE_CLIBS = $(addsuffix $(EXT_LIB), $(CLIBS))

BYTE_CCLIBS =\
        $(addprefix -cclib , $(BYTE_CLIBS))\
        $(OTHER_CCLIBS)

NATIVE_CCLIBS =\
        $(addprefix -cclib , $(NATIVE_CLIBS))\
        $(OTHER_CCLIBS)

$(MP).run: $(CMOBJS) $(RCMOFILES) $(CMADEPS) $(THREADSLIB) $(BYTE_CLIBS) $(LIBS)
        $(RM) $@
        $(OCAMLMKTOP) $(OCAMLCFLAGS) -o $@ -custom -linkall $(THREADS) $(CMOBJS) $(RCMOFILES) $(BYTE_CCLIBS) $(LIBTHREADS) $(LIBS) $(OCAML_LINK_FLAGS)

$(MP).top: $(TCMOBJS) $(TCMOFILES) $(TCMADEPS) $(THREADSLIB) $(BYTE_CLIBS) $(LIBS)
        $(RM) $@
        $(OCAMLLINK) $(OCAMLCFLAGS) -o $@ -custom -linkall $(THREADS) $(TCMOBJS) $(TCMOFILES) $(BYTE_CCLIBS) $(LIBTHREADS) $(LIBS) $(OCAML_LINK_FLAGS)

$(MP).opt: $(CMXOBJS) $(TCMXFILES) $(OPTTHREADSLIB) $(NATIVE_CLIBS) $(ARDEPS) $(LIBS)
        $(RM) $@
        $(OCAMLOPTLINK) $(OCAMLOPTFLAGS) -o $@ -linkall $(THREADS) $(CMXOBJS) $(TCMXFILES) $(NATIVE_CCLIBS) $(OPTTHREADS) $(LIBS) $(OCAML_LINK_FLAGS)

#
# Generate the mp_version.ml file
#
if true
	LIBS =
	OCAMLC = ocamlc
	OCAMLOPT = ocamlopt
	OCAML_OTHER_LIBS = unix

	make_mp_version.cmo:
	make_mp_version.cmi:
	make_mp_version.cmx:

	OCamlProgram(make_mp_version, make_mp_version)

mp_version.ml: make_mp_version$(EXE) $(CMOBJS) $(filter-out mp_version.%, $(RCMOFILES)) $(CMADEPS) $(TCMOBJS) $(filter-out mp_version.%, $(TCMOFILES)) $(TCMADEPS) mp_version.cmi $(ROOT)/mk/defaults $(OCAMLMACROS)
	make_mp_version -version $(MP_VERSION) -refiner $(REFINER) -terms $(TERMS) > $@

#
# Phony targets
#
if $(NATIVE_ENABLED)
        .DEFAULT: $(MAIN).cmxa $(MP).opt
else
        .DEFAULT: $(MAIN).cma $(MP).top $(MP).run

clean::
        $(RM) -f *.p4* *.pp*
        cd tests && $(RM) -f *.p4* *.pp* *.cmx *.cmi* *.cmo* *.o

#
# TeX
# JYH: disabled until I figure out how all of this works
#
TEXBIN =
THELIB =
TEXTHEORIES =

TEXDIR=$(ROOT)/doc/latex/theories

TEXFILES=$(addprefix $(TEXDIR)/, $(addsuffix /theory.tex, $(TEXTHEORIES)))

.PHONY: tex texbyte texopt do_tex

do_tex: $(TEXFILES)

$(TEXDIR)/%/theory.tex: $(TEXBIN) $(TEXDIR)/%/print.ml $(ROOT)/theories/%/$(THELIB)
        $(TEXPROG) $(TEXDIR)/$*/print.ml

#
# Clean up
#
clean:
    $(CLEAN)

#
# All defaults
#
all: $(MP)$(OBJ_SUFFIX)
