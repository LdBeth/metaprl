#
# MetaPRL editor.
#
OCAMLINCLUDES[] +=
   $(MP_DIRS)

# Name of main libraries
MP = mp

RCMAMPLIBS  = $(LIB)/libmprun.cma
TCMAMPLIBS  = $(LIB)/libmptop.cma
TCMXAMPLIBS = $(LIB)/libmptop.cmxa
TCMXAMPDEPS = $(LIB)/libmptop.cmxa $(LIB)/libmptop$(EXT_LIB)

BASE_LIBS[] =
   lm
   util
   refiner
   library
   trefiner
   prooflib

PRLC_LIBS[] =
   prlc
   support

BASE_LIBS = $(file $(addprefix $(LIB)/, $(BASE_LIBS)))
PRLC_LIBS = $(file $(addprefix $(LIB)/, $(PRLC_LIBS)))

BASE_ARS   = $(addsuffix $(EXT_LIB), $(BASE_LIBS))
BASE_CMAS  = $(addsuffix .cma, $(BASE_LIBS))
BASE_CMXAS = $(addsuffix .cmxa, $(BASE_LIBS))

PRLC_ARS   = $(addsuffix $(EXT_LIB), $(PRLC_LIBS))
PRLC_CMAS  = $(addsuffix .cma, $(PRLC_LIBS))
PRLC_CMXAS = $(addsuffix .cmxa, $(PRLC_LIBS))

BOOT_ARS   = $(addsuffix $(EXT_LIB), $(BOOT))
BOOT_CMAS  = $(addsuffix .cma, $(BOOT))
BOOT_CMXAS = $(addsuffix .cmxa, $(BOOT))

########################################################################
# LIBRARIES
########################################################################

LMARDEPS = $(LIB)/liblmcutil$(EXT_LIB)
LMXADEPS = $(LIB)/lm.cmxa
LMADEPS  = $(LIB)/lm.cma
TLMADEPS = $(LIB)/lm.cma
LIBS     = $(LIB)/liblmcutil$(EXT_LIB)

#
# If MCC is enabled, add the libraries
#
if $(defined Options.MCC)
    LMARDEPS += $(Options.MCC)/lib/firtype$(EXT_LIB)
    LMXADEPS += $(Options.MCC)/lib/firtype.cmxa
    LMADEPS  += $(Options.MCC)/lib/firtype.cma
    TLMADEPS += $(Options.MCC)/lib/firtype.cma
    export

#
# Profiling
#
if $(NATIVE_PROFILING_ENABLED)
   gmon.out: mp.opt mpopt mpconfig $(LIB)/svnversion.txt
      echo 'restart_gmon();; status_all();;' | ./mpopt >& /dev/null

   native_profile.txt: mp.opt gmon.out
      gprof $< > $@

   PROF_EXT = .p
   export

else
   PROF_EXT =
   export

CMXADEPS[] =
    $(CAMLLIB)/unix.cmxa
    $(CAMLLIB)/str.cmxa
    $(OPTTHREADSLIB)
    $(CAMLP4LIB)/odyl$(PROF_EXT).cmxa
    $(CAMLP4LIB)/camlp4$(PROF_EXT).cmxa
    $(BASE_CMXAS)
    $(CAMLP4LIB)/pa_o$(PROF_EXT).cmx
    $(CAMLP4LIB)/pa_op$(PROF_EXT).cmx
    $(PRLC_CMXAS)
    $(BOOT_CMXAS)
    $(addsuffix /theory.cmxa, $(MP_DIRS))

ARDEPS[] =
    $(BASE_ARS)
    $(PRLC_ARS)
    $(BOOT_ARS)
    $(addsuffix /theory$(EXT_LIB), $(MP_DIRS))

CMADEPS[] =
    $(CAMLP4LIB)/odyl.cma
    $(CAMLLIB)/unix.cma
    $(CAMLLIB)/str.cma
    $(THREADSLIB)
    $(CAMLP4LIB)/camlp4.cma
    $(CAMLP4LIB)/camlp4_top.cma
    $(BASE_CMAS)
    $(CAMLP4LIB)/pa_o.cmo
    $(CAMLP4LIB)/pa_op.cmo
    $(PRLC_CMAS)
    $(BOOT_CMAS)
    $(addsuffix /theory.cma, $(MP_DIRS))

TCMADEPS[] =
    $(CAMLP4LIB)/odyl.cma
    $(CAMLLIB)/unix.cma
    $(CAMLLIB)/str.cma
    $(THREADSLIB)
    $(CAMLP4LIB)/camlp4.cma
    $(BASE_CMAS)
    $(CAMLP4LIB)/pa_o.cmo
    $(CAMLP4LIB)/pa_op.cmo
    $(PRLC_CMAS)
    $(BOOT_CMAS)
    $(addsuffix /theory.cma, $(MP_DIRS))

CMALIBS  = $(CMADEPS)
TCMALIBS = $(TCMADEPS)
CMOBJS   = $(CMALIBS)
TCMOBJS  = $(TCMALIBS)
CMXOBJS  = $(CMXADEPS)

CLIBS = $(file $(LIB)/clib)
BYTE_CLIBS = $(addsuffix $(EXT_LIB), $(CLIBS))
NATIVE_CLIBS = $(addsuffix $(EXT_LIB), $(CLIBS))

BYTE_CCLIBS = $(mapprefix -cclib, $(BYTE_CLIBS))
NATIVE_CCLIBS = $(mapprefix -cclib, $(NATIVE_CLIBS))

#
# Dependencies for the 3 versions of MetaPRL
#
BYTE_DEPS = $(CMOBJS) $(CMADEPS) $(THREADSLIB) $(BYTE_CLIBS) $(LIBS)
TOP_DEPS  = $(TCMOBJS) $(TCMADEPS) $(THREADSLIB) $(BYTE_CLIBS) $(LIBS)
OPT_DEPS  = $(CMXOBJS) $(OPTTHREADSLIB) $(NATIVE_CLIBS) $(ARDEPS) $(LIBS)

ALL_DEPS =
if $(BYTE_ENABLED)
    ALL_DEPS += $(BYTE_DEPS) $(TOP_DEPS)
    export

if $(NATIVE_ENABLED)
    ALL_DEPS += $(OPT_DEPS)
    export

if $(MPRUN_ENABLED)
    $(MP).run: $(BYTE_DEPS) $(OCAMLMKTOP_VERSION) $(RCMAMPLIBS)
        $(RM) $@
        $(OCAMLMKTOP) $(OCAMLFLAGS) $(OCAMLCFLAGS) -o $@ -custom \
            $(CMOBJS) $(RCMAMPLIBS) $(LIBS) $(OCAML_LINK_FLAGS)

$(MP).top: $(TOP_DEPS) $(TCMAMPLIBS)
    $(RM) $@
    $(OCAMLLINK) $(OCAMLFLAGS) $(OCAMLCFLAGS) -o $@ -custom \
        $(TCMOBJS) $(TCMAMPLIBS) $(BYTE_CCLIBS) $(LIBS) $(OCAML_LINK_FLAGS)

$(MP).opt: $(OPT_DEPS) $(TCMXAMPDEPS)
    $(RM) $@
    $(OCAMLOPTLINK) $(OCAMLFLAGS) $(OCAMLOPTFLAGS) -o $@ \
        $(CMXOBJS) $(TCMXAMPLIBS) $(NATIVE_CCLIBS) $(LIBS) $(OCAML_LINK_FLAGS)

#
# Defaults
#
.PHONY: done run run-cli
.DEFAULT: done

if $(NATIVE_ENABLED)
    .test-metaprl-startup: $(MP).opt

if $(BYTE_ENABLED)
    .test-metaprl-startup: $(MP).top

    if $(MPRUN_ENABLED)
        .test-metaprl-startup: $(MP).run

$(MP_SCRIPT): $(MP)$(if $(NATIVE_ENABLED), opt, top)$(if $(equal $(OSTYPE), Win32), .bat)
    $(symlink $<, $@)

run: $(MP_PREREQS)
    ./$(MP_SCRIPT)

run-cli: $(MP_PREREQS)
    ./$(MP_SCRIPT) -cli

.test-metaprl-startup: $(MP_PREREQS)
    echo | ./$(MP_SCRIPT) -batch
    echo > $@

done: .test-metaprl-startup
    if $(not $(NATIVE_ENABLED))
        rm -f mp.opt
    if $(not $(BYTE_ENABLED))
        rm -f mp.run mp.top
    elseif $(not $(MPRUN_ENABLED))
        rm -f mp.run
    println($"
******
****** MetaPRL ($(if $(NATIVE_ENABLED), $"native code"$(if $(BYTE_ENABLED), $" and "))$(if $(BYTE_ENABLED), bytecode)) compiled successfully!
****** Run $(in $(ROOT), $(MP_SCRIPT)) to start the interactive prover.
******
")

#
# Clean up
#
clean:
    $(CLEAN) $(MP_SCRIPT) $(MP).top native_profile.txt .test-metaprl-startup

#
# All defaults
#
all: .DEFAULT
