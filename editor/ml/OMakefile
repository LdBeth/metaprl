#
# MetaPRL editor.
#
OCAMLINCLUDES[] +=
   $(ROOT)/$(ENSEMBLE_DIR)
   $(MP_DIRS)


# Name of main librariws
MP = mp

########################################################################
# LOCAL FILES
########################################################################

# Common files
MLZFILES =\
        proof_sig\
        display_sig\
        nuprl_sig

MP2FILES =\
        shell_mp\
        shell_p4\
        nuprl_sig\
        nuprl_eval\
        nuprl_jprover\
        nuprl_run\
        mp\
        mp_top

RUNFILES =\
        mp_version\
        shell_mp\
        shell_p4\
        nuprl_sig\
        nuprl_eval\
        nuprl_jprover\
        nuprl_run\
        mp

TOPFILES =\
        mp_version\
        shell_mp\
        nuprl_sig\
        nuprl_eval\
        nuprl_jprover\
        nuprl_run\
        mp_top

OCAML_LINK_FLAGS += -linkall

TESTFILES =

if $(TESTS_ENABLED)
   .SUBDIRS: tests
   TESTFILES =\
      tests/test\
      tests/prop-pigeon
   export

MP2FILES = $(TESTFILES) $(MP2FILES)
RUNFILES = $(TESTFILES) $(RUNFILES)
TOPFILES = $(TESTFILES) $(TOPFILES)

RCMOFILES = $(addsuffix .cmo, $(RUNFILES))
TCMOFILES = $(addsuffix .cmo, $(TOPFILES))
TCMXFILES = $(addsuffix .cmx, $(TOPFILES))
TOBJFILES = $(addsuffix $(EXT_OBJ), $(TOPFILES))

BASE_LIBS = \
   $(LIB)/lm\
   $(LIB)/util\
   $(LIB)/refiner\
   $(LIB)/library\
   $(LIB)/trefiner\
   $(LIB)/prooflib\

BASE_ARS   = $(addsuffix $(EXT_LIB), $(BASE_LIBS))
BASE_CMAS  = $(addsuffix .cma      , $(BASE_LIBS))
BASE_CMXAS = $(addsuffix .cmxa     , $(BASE_LIBS))

########################################################################
# LIBRARIES
########################################################################

LMARDEPS = $(LIB)/lm$(EXT_LIB)
LMXADEPS = $(LIB)/lm.cmxa
LMADEPS  = $(LIB)/lm.cma
TLMADEPS = $(LIB)/lm.cma
LIBS     = $(LIB)/liblmcutil$(EXT_LIB)

#
# If MCC is enabled, add the libraries
#
if $(defined MCC)
    LMARDEPS += $(MCC)/lib/firtype$(EXT_LIB)
    LMXADEPS += $(MCC)/lib/firtype.cmxa
    LMADEPS  += $(MCC)/lib/firtype.cma
    TLMADEPS += $(MCC)/lib/firtype.cma
    export

#
# Profiling
#
if $(NATIVE_PROFILING_ENABLED)
   gmon.out: mp.opt mpopt mpconfig
      echo 'restart_gmon();; status_all();;' | ./mpopt >& /dev/null

   native_profile.txt: mp.opt gmon.out
      gprof $< > $@

   PROF_EXT = .p
   export

else
   PROF_EXT=
   export

CMXADEPS =\
        $(CAMLLIB)/unix.cmxa\
        $(CAMLLIB)/str.cmxa\
        $(OPTTHREADSLIB)\
        $(CAMLP4LIB)/odyl$(PROF_EXT).cmxa\
        $(CAMLP4LIB)/camlp4$(PROF_EXT).cmxa\
        $(BASE_CMXAS)\
        $(CAMLP4LIB)/pa_o$(PROF_EXT).cmx\
        $(CAMLP4LIB)/pa_op$(PROF_EXT).cmx\
        $(LIB)/prlc.cmxa\
        $(addsuffix /theory.cmxa, $(MP_DIRS))\

ARDEPS =\
        $(BASE_ARS)\
        $(LIB)/prlc$(EXT_LIB)\
        $(addsuffix /theory$(EXT_LIB), $(MP_DIRS))\

CMXALIBS =\
        $(CMXADEPS)

CMADEPS =\
        $(CAMLP4LIB)/odyl.cma\
        $(CAMLLIB)/unix.cma\
        $(CAMLLIB)/str.cma\
        $(THREADSLIB)\
        $(CAMLP4LIB)/camlp4.cma\
        $(CAMLP4LIB)/camlp4_top.cma\
        $(BASE_CMAS)\
        $(CAMLP4LIB)/pa_o.cmo\
        $(CAMLP4LIB)/pa_op.cmo\
        $(LIB)/prlc.cma\
        $(addsuffix /theory.cma, $(MP_DIRS))\

TCMADEPS =\
        $(CAMLP4LIB)/odyl.cma\
        $(CAMLLIB)/unix.cma\
        $(CAMLLIB)/str.cma\
        $(THREADSLIB)\
        $(CAMLP4LIB)/camlp4.cma\
        $(BASE_CMAS)\
        $(CAMLP4LIB)/pa_o.cmo\
        $(CAMLP4LIB)/pa_op.cmo\
        $(LIB)/prlc.cma\
        $(addsuffix /theory.cma, $(MP_DIRS))\


CMALIBS =\
        $(CMADEPS)

TCMALIBS =\
        $(TCMADEPS)

CMOBJS =\
        $(CMALIBS)

TCMOBJS =\
        $(TCMALIBS)

CMXOBJS =\
        $(CMXALIBS)

CLIBS = $(LIB)/clib
BYTE_CLIBS = $(addsuffix $(EXT_LIB), $(CLIBS))
NATIVE_CLIBS = $(addsuffix $(EXT_LIB), $(CLIBS))

BYTE_CCLIBS =\
        $(addprefix -cclib , $(BYTE_CLIBS))\

NATIVE_CCLIBS =\
        $(addprefix -cclib , $(NATIVE_CLIBS))\

#
# Dependencies for the 3 versions of MetaPRL
#
BYTE_DEPS = $(CMOBJS) $(CMADEPS) $(THREADSLIB) $(BYTE_CLIBS) $(LIBS)
TOP_DEPS  = $(TCMOBJS) $(TCMADEPS) $(THREADSLIB) $(BYTE_CLIBS) $(LIBS)
OPT_DEPS  = $(CMXOBJS) $(OPTTHREADSLIB) $(NATIVE_CLIBS) $(ARDEPS) $(LIBS)

ALL_DEPS =
if $(BYTE_ENABLED)
    ALL_DEPS += $(BYTE_DEPS) $(TOP_DEPS)
    export

if $(NATIVE_ENABLED)
    ALL_DEPS += $(OPT_DEPS)
    export

$(MP).run: $(BYTE_DEPS) $(RCMOFILES) $(OCAMLMKTOP_VERSION)
        $(RM) $@
        $(OCAMLMKTOP) $(OCAMLCFLAGS) -o $@ -custom -linkall $(THREADS) $(CMOBJS) $(RCMOFILES) $(BYTE_CCLIBS) $(LIBS) $(OCAML_LINK_FLAGS)

$(MP).top: $(TOP_DEPS) $(TCMOFILES)
        $(RM) $@
        $(OCAMLLINK) $(OCAMLCFLAGS) -o $@ -custom -linkall $(THREADS) $(TCMOBJS) $(TCMOFILES) $(BYTE_CCLIBS) $(LIBS) $(OCAML_LINK_FLAGS)

$(MP).opt: $(OPT_DEPS) $(TCMXFILES) $(TOBJFILES)
        $(RM) $@
        $(OCAMLOPTLINK) $(OCAMLOPTFLAGS) -o $@ -linkall $(THREADS) $(CMXOBJS) $(TCMXFILES) $(NATIVE_CCLIBS) $(LIBS) $(OCAML_LINK_FLAGS)

#
# Generate the mp_version.ml file
#
make_mp_version$(EXE): make_mp_version.ml
	$(OCAMLC) $(OCAMLCFLAGS) -o $@ unix.cma $<

mp_version.ml: make_mp_version$(EXE) $(ALL_DEPS)
	$(CURRENT_EXEC_DIR)make_mp_version -version $(MP_VERSION) -refiner $(REFINER) -terms $(TERMS) > $@

OCamlGeneratedFiles(mp_version.ml)

#
# Defaults
#
if $(NATIVE_ENABLED)
        .DEFAULT: $(MP).opt

if $(BYTE_ENABLED)
        .DEFAULT: $(MP).top $(MP).run

#
# Clean up
#
clean:
    $(CLEAN) $(MP).top mp_version.ml make_mp_version$(EXE) native_profile.txt

#
# All defaults
#
all: .DEFAULT
