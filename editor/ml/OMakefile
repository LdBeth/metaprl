#
# MetaPRL editor.
#
OCAMLINCLUDES[] +=
   $(MP_DIRS)

# Name of main libraries
MP = mp

RCMAMPLIBS  = $(LIB)/libmprun.cma
TCMAMPLIBS  = $(LIB)/libmptop.cma
TCMXAMPLIBS = $(LIB)/libmptop.cmxa
TCMXAMPDEPS = $(LIB)/libmptop.cmxa $(LIB)/libmptop$(EXT_LIB)

BASE_LIBS[] =
   lm
   util
   refiner
   library
   trefiner
   prooflib

PRLC_LIBS[] =
   prlc
   support

BASE_LIBS = $(file $(addprefix $(LIB)/, $(BASE_LIBS)))
PRLC_LIBS = $(file $(addprefix $(LIB)/, $(PRLC_LIBS)))

BASE_ARS   = $(addsuffix $(EXT_LIB), $(BASE_LIBS))
BASE_CMAS  = $(addsuffix .cma, $(BASE_LIBS))
BASE_CMXAS = $(addsuffix .cmxa, $(BASE_LIBS))

PRLC_ARS   = $(addsuffix $(EXT_LIB), $(PRLC_LIBS))
PRLC_CMAS  = $(addsuffix .cma, $(PRLC_LIBS))
PRLC_CMXAS = $(addsuffix .cmxa, $(PRLC_LIBS))

########################################################################
# LIBRARIES
########################################################################

LMARDEPS = $(LIB)/liblmcutil$(EXT_LIB)
LMXADEPS = $(LIB)/lm.cmxa
LMADEPS  = $(LIB)/lm.cma
TLMADEPS = $(LIB)/lm.cma
LIBS     = $(LIB)/liblmcutil$(EXT_LIB)

#
# If MCC is enabled, add the libraries
#
if $(defined MCC)
    LMARDEPS += $(Options.MCC)/lib/firtype$(EXT_LIB)
    LMXADEPS += $(Options.MCC)/lib/firtype.cmxa
    LMADEPS  += $(Options.MCC)/lib/firtype.cma
    TLMADEPS += $(Options.MCC)/lib/firtype.cma
    export

#
# Profiling
#
if $(NATIVE_PROFILING_ENABLED)
   gmon.out: $(MP_PREREQS) $(LIB)/svnversion.txt
      echo 'restart_gmon();; status_all();;' | ../../support/editor/mpopt >& /dev/null

   native_profile.txt: mp.opt gmon.out
      gprof $< > $@

   PROF_EXT = .p
   export

else
   PROF_EXT =
   export

CMXADEPS[] =
    $(CAMLLIB)/unix.cmxa
    $(CAMLLIB)/str.cmxa
    $(CAMLLIB)/zarith/zarith.cmxa
    $(OPTTHREADSLIB)
    $(CAMLP5LIB)/odyl$(PROF_EXT).cmxa
    $(CAMLP5LIB)/camlp5$(PROF_EXT).cmxa
    $(BASE_CMXAS)
    $(CAMLP5LIB)/pa_o$(PROF_EXT).cmx
    $(CAMLP5LIB)/pa_op$(PROF_EXT).cmx
    $(PRLC_CMXAS)
    $(addsuffix /theory.cmxa, $(MP_DIRS))

ARDEPS[] =
    $(BASE_ARS)
    $(PRLC_ARS)
    $(addsuffix /theory$(EXT_LIB), $(MP_DIRS))

CMADEPS[] =
    $(CAMLP5LIB)/odyl.cma
    $(CAMLLIB)/unix.cma
    $(CAMLLIB)/str.cma
    $(CAMLLIB)/zarith/zarith.cma
    $(THREADSLIB)
    $(CAMLP5LIB)/camlp5.cma
    # $(CAMLP5LIB)/camlp5_top.cma
    $(BASE_CMAS)
    $(CAMLP5LIB)/pa_o.cmo
    $(CAMLP5LIB)/pa_op.cmo
    $(PRLC_CMAS)
    $(addsuffix /theory.cma, $(MP_DIRS))

TCMADEPS[] =
    $(CAMLP5LIB)/odyl.cma
    $(CAMLLIB)/unix.cma
    $(CAMLLIB)/str.cma
    $(CAMLLIB)/zarith/zarith.cma
    $(THREADSLIB)
    $(CAMLP5LIB)/camlp5.cma
    $(BASE_CMAS)
    $(CAMLP5LIB)/pa_o.cmo
    $(CAMLP5LIB)/pa_op.cmo
    $(PRLC_CMAS)
    $(addsuffix /theory.cma, $(MP_DIRS))

CMALIBS  = $(CMADEPS)
TCMALIBS = $(TCMADEPS)
CMOBJS   = $(CMALIBS)
TCMOBJS  = $(TCMALIBS)
CMXOBJS  = $(CMXADEPS)

CLIBS = $(file $(LIB)/clib)
BYTE_CLIBS = $(addsuffix $(EXT_LIB), $(CLIBS))
NATIVE_CLIBS = $(addsuffix $(EXT_LIB), $(CLIBS))

BYTE_CCLIBS = $(mapprefix -cclib, $(BYTE_CLIBS))
NATIVE_CCLIBS = $(mapprefix -cclib, $(NATIVE_CLIBS))

#
# Dependencies for the 3 versions of MetaPRL
#
BYTE_DEPS = $(CMOBJS) $(CMADEPS) $(THREADSLIB) $(BYTE_CLIBS) $(LIBS)
TOP_DEPS  = $(TCMOBJS) $(TCMADEPS) $(THREADSLIB) $(BYTE_CLIBS) $(LIBS)
OPT_DEPS  = $(CMXOBJS) $(OPTTHREADSLIB) $(NATIVE_CLIBS) $(ARDEPS) $(LIBS)

ALL_DEPS =
if $(BYTE_ENABLED)
    ALL_DEPS += $(BYTE_DEPS) $(TOP_DEPS)
    export

if $(NATIVE_ENABLED)
    ALL_DEPS += $(OPT_DEPS)
    export

if $(MPRUN_ENABLED)
    $(MP).run: $(BYTE_DEPS) $(OCAMLMKTOP_VERSION) $(RCMAMPLIBS)
        $(RM) $@
        $(OCAMLMKTOP) $(OCAMLFLAGS) $(OCAMLCFLAGS) $(PREFIXED_OCAMLINCLUDES) -o $@ -custom \
            $(CMOBJS) $(RCMAMPLIBS) $(BYTE_CCLIBS) $(LIBS) $(OCAML_LINK_FLAGS)

$(MP).top: $(TOP_DEPS) $(TCMAMPLIBS)
    $(RM) $@
    $(OCAMLLINK) $(OCAMLFLAGS) $(OCAMLCFLAGS) $(PREFIXED_OCAMLINCLUDES) -o $@ -custom \
        $(TCMOBJS) $(TCMAMPLIBS) $(BYTE_CCLIBS) $(LIBS) $(OCAML_LINK_FLAGS)

$(MP).opt: $(OPT_DEPS) $(TCMXAMPDEPS)
    $(RM) $@
    $(OCAMLOPTLINK) $(OCAMLFLAGS) $(OCAMLOPTFLAGS) $(PREFIXED_OCAMLINCLUDES) -o $@ \
        $(CMXOBJS) $(TCMXAMPLIBS) $(NATIVE_CCLIBS) $(LIBS) $(OCAML_LINK_FLAGS)

#
# Defaults
#
.PHONY: done run run-cli
.DEFAULT: done

if $(NATIVE_ENABLED)
    .test-metaprl-startup: $(MP).opt

if $(BYTE_ENABLED)
    .test-metaprl-startup: $(MP).top

    if $(MPRUN_ENABLED)
        .test-metaprl-startup: $(MP).run

$(MP_SCRIPT): $(LIB)/$(MP)$(if $(NATIVE_ENABLED), opt, top)$(if $(equal $(OSTYPE), Win32), .bat)
    ln-or-cp $< $@

run: $(MP_PREREQS)
    ./$(MP_SCRIPT)

run-cli: $(MP_PREREQS)
    ./$(MP_SCRIPT) -cli

.test-metaprl-startup: $(MP_PREREQS)
    echo | ./$(MP_SCRIPT) -batch
    echo > $@

done: .test-metaprl-startup
    if $(not $(NATIVE_ENABLED))
        rm -f mp.opt
    if $(not $(BYTE_ENABLED))
        rm -f mp.run mp.top
    elseif $(not $(MPRUN_ENABLED))
        rm -f mp.run
    @echo $"
******
****** MetaPRL ($(if $(NATIVE_ENABLED), $"native code"$(if $(BYTE_ENABLED), $" and "))$(if $(BYTE_ENABLED), bytecode)) compiled successfully!
****** Run .$(DIRSEP)$(in $(ROOT), $(MP_SCRIPT)) to start the interactive prover.
******
"

#
# Check the startup even during installs
#
$(MPINSTALL): .test-metaprl-startup

########################################################################
# Generate the mpconfig if it does not exist
#
#
# Configure Ensemble
#
mpconfig = $"""\
ENS_PORT=7474
ENS_MODES="DEERING:UDP"
ENS_DEERING_PORT=7472
ENS_GOSSIP_PORT=7470
ENS_GOSSIP_HOSTS=tulare
ENS_ID=$$USER
ENS_DOMAIN_PORT=7473

export ENS_PORT ENS_MODES ENS_DEERING_PORT ENS_GOSSIP_PORT ENS_GOSSIP_HOSTS ENS_ID ENS_DOMAIN_PORT

#
# Root directory is two directories up
#
export MP_ROOT=$(MP_ROOT)

#
# TPTP libraries
#
TPTP=$$MP_ROOT/../TPTP
if [ -d $$TPTP ]; then
   MP_TPTP=`echo . $$TPTP $$TPTP/Problems/* | sed -e 's, ,:,g'`
   export MP_TPTP
fi
export TPTP

#
# Use the local copy of the library
#
MPLIB=$$MP_ROOT/lib
export MPLIB

#
# Work in Unicode locale.
#
LC_ALL=en_US.UTF-8
export LC_ALL

#
# Camlp5 directory
#
if [ -z "$$CAMLP5LIB" ]; then
   CAMLP5LIB=`ocamlc -where`/camlp5
fi

. ./mldebug.dir
. ./theories.dir

export INCLUDES DEBUGINCLUDES
"""

mpconfig:
    fprint(mpconfig, $(mpconfig))

foreach(script => ..., $(MP_DIRECT_SCRIPTS))
    $(script): $(LIB)/$(script)
        ln-or-cp $< $@

.DEFAULT: mpconfig

#
# Clean up
#
clean:
    $(CLEAN) $(MP_SCRIPT) $(MP).top native_profile.txt .test-metaprl-startup $(MP_DIRECT_SCRIPTS) $(THEORIES_PATH) $(MLDEBUG_PATH) mpconfig

#
# All defaults
#
all: .DEFAULT
