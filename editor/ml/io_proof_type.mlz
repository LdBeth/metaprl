(*
 * This defines raw proof that is saved in a file.
 * The main difference between this proof and Proof.t
 * is that these proofs do not contains tactics, so
 * they can be marshaled.
 *
 * A real proof can be obtained by combining
 * a list of tactics and an io_proof that uses the list
 * to look up the tactics.
 *
 * ----------------------------------------------------------------
 *
 * This file is part of Nuprl-Light, a modular, higher order
 * logical framework that provides a logical programming
 * environment for OCaml and other languages.
 *
 * See the file doc/index.html for information on Nuprl,
 * OCaml, and more information about this system.
 *
 * Copyright (C) 1998 Jason Hickey, Cornell University
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 * 
 * Author: Jason Hickey
 * jyh@cs.cornell.edu
 *)

include Tactic_type

(*
 * An IO step does not save the tactic,
 * and saves only part of the goal.
 *)
type 'term aterm =
   { aterm_goal  : 'term;                       (* Goal of this step *)
     aterm_hyps  : 'term list;                  (* Assumptions in this proof *)
     aterm_label : string;                      (* Label describes the step in the proof *)
     aterm_args  : 'term Tactic_type.attributes (* Proof annotations *)
   }

type 'term proof_step =
   { step_goal : 'term aterm;
     step_subgoals : 'term aterm list;
     step_ast : MLast.expr;             (* Parsed expression *)
     step_text : string                 (* String representation of text *)
   }

(*
 * A proof is a recursive tree of steps.
 * The status is redundant, except for "asserted" proofs.
 * Asserted proofs are incomplete, but they are marked as complete.
 *)
type 'term proof =
   { proof_status : proof_status;
     proof_step : 'term proof_node;
     proof_children : 'term proof_child list;
     proof_extras : 'term proof list
   }

and proof_status =
   StatusBad
 | StatusPartial
 | StatusAsserted
 | StatusComplete

and 'term proof_node =
   ProofStep of 'term proof_step
 | ProofNode of 'term proof

and 'term proof_child =
   ChildGoal of 'term aterm
 | ChildProof of 'term proof

(*
 * -*-
 * Local Variables:
 * Caml-master: "refiner"
 * End:
 * -*-
 *)
