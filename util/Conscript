### Default environment

$native = 0;    # 0 for bytecodes, 1 for native

## Cons environments come from the cons module.
## Apparently, we need byte code output instead of native,
## so we have to go through all these definitions again.
$env = new cons(

    ## Overrides
    OCAMLC      => $native ? "ocamlopt.opt" : "ocamlc", # The OCaml compiler
    OCAMLLINK   => $native ? "ocamlopt.opt" : "ocamlc", # The OCaml compiler
    SUFOBJ      => $native ? ".cmx"  : ".cmo",          # Object suffix
    SUFLIB      => $native ? ".cmxa" : ".cma",          # Library suffix

    SUFSRC      => ".ml",       # The suffix for source files
    SUFSIG      => ".mli",      # The suffix for signature files
    SUFCSIG     => ".cmi",      # The suffix for compiled signature files

    #OCAMLCFLAGS => "-thread",                             # Basic options
    OCAMLCFLAGS => "-pp 'camlp4o pa_extend.cmo q_MLast.cmo' -I `camlp4 -where`",
    OCAMLCOM    => "%OCAMLC %OCAMLCFLAGS %_IFLAGS -c %1", # How to compile files
    SIGCOM      => "%OCAMLC %OCAMLCFLAGS %_IFLAGS -c %1", # How to compile signatures
    LINKCOM     => "%OCAMLLINK %OCAMLCFLAGS -o %> %MLLIBS %< %CCLIBS", # How to link objects
    ARCOM       => "%OCAMLLINK %OCAMLCFLAGS -a -o %> %<", # How to archive objects
    LEXCOM      => "ocamllex %1",                         # How to lex a file
    YACCCOM     => "ocamlyacc %1",                        # How to yacc a file

    PPFLAGS     => "",
    CAMLP4MACRO => "camlp4o %PPFLAGS",
    CAMLP4MACROPRINT => "camlp4o pr_o.cmo %PPFLAGS",

    ENV  => {
      PATH      => $ENV{'PATH'} # Use user's path instead of the cons default
    },

);

OCamlSources $env
   'ocamldep.mll',
   'misc.ml',
   'macro.ml';

OCamlLibrary $env 'util',
   'macro';

OCamlProgram $env 'ocamldep', 'ocamldep';

## Add the program to the default target list
Default qw( util.cma ocamldep );
