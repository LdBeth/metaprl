# -*- Mode: makefile -*-
#
# Assumes variables:
#    MFILES: root names of files
#    LMFILES: root names of library files
#    PFILES: root names of program files
#    MLLIBS: root name of libraries
#    MAIN: root name of generated program
#

include $(ROOT)/mk/preface

#
# Use this when compiling with threads.
# This is tested only on Linux i386.
#
ifndef OCAMLCPOPT
	THREADS = -thread
	THREADSLIB = $(CAMLLIB)/threads/threads.cma
else
	THREADS = -I $(CAMLLIB)/threads
	THREADSLIB = $(CAMLLIB)/profiling.cmo $(CAMLLIB)/threads/threads.cma
endif
OPTTHREADSLIB = $(CAMLLIB)/threads/threads.cmxa
LIBTHREADS = -ccopt -L$(ROOT)/lib -cclib -lthreads -cclib -lunix -cclib -lpthread
OPTTHREADS = -ccopt -L$(ROOT)/lib -cclib -lthreadsnat$(EXT_PROF) -cclib -lunix$(EXT_PROF) -cclib -lpthread

#
# Configuration
#
OCAMLDEP = $(ROOT)/bin/ocamldep
OCAMLCFLAGS = -ccopt -g $(INCLUDE) -I $(ROOT)/lib $(OCAMLFLAGS) $(NOASSERT) $(THREADS)
OCAMLDEPFLAGS := $(OCAMLDEPFLAGS) $(INCLUDE) -I $(ROOT)/lib 
OCAMLOPTFLAGS = -ccopt -g $(INCLUDE) -I $(ROOT)/lib $(OCAMLFLAGS) $(PROFILE) -inline $(INLINE) -noassert $(THREADS)
CAMLP4NFLAGS = $(INCLUDE) $(OCAMLFLAGS)
CAMLP4OFLAGS = $(INCLUDE)
ifdef PROFILE
   CFLAGS = -g $(CINCLUDE) -I$(CAMLLIB) -D_REENTRANT -p -DPROF
else
   CFLAGS = -g $(CINCLUDE) -I$(CAMLLIB) -D_REENTRANT
endif
NATIVE_CFLAGS = -DNATIVE_CODE
BYTE_CFLAGS =
CC = gcc
RM = rm -f
INSTALL = /bin/cp -pf
CP = /bin/cp -pf
CPP = /lib/cpp -traditional -nostdinc -nostdinc++
LN = ln -sf
ifndef CAMLP4N
	CAMLP4N = $(ROOT)/lib/camlp4n$(EXE)
endif

# For cleaning the directory
ifdef MAIN
   CLEAN_MAIN = $(MAIN)
endif

# Library file names
MLFILES      = $(sort $(addsuffix .ml,   $(MPFILES) $(MP2FILES) $(LMFILES) $(MFILES) $(PFILES)))
MLIFILES     = $(sort $(addsuffix .mli,  $(MPFILES) $(MP2FILES) $(LMFILES) $(MFILES) $(PFILES)))

MP_CMIFILES  = $(addsuffix .cmi,  $(MPFILES))
MP_CMOFILES  = $(addsuffix .cmo,  $(MPFILES))
MP_CMIZFILES = $(addsuffix .cmiz, $(MPFILES))
MP_CMOZFILES = $(addsuffix .cmoz, $(MPFILES))
MP_CMXFILES  = $(addsuffix .cmx,  $(MPFILES))
MP_PPOFILES  = $(addsuffix .ppo,  $(MPFILES))

MP2_CMIFILES  = $(addsuffix .cmi,  $(MP2FILES))
MP2_CMOFILES  = $(addsuffix .cmo,  $(MP2FILES))
MP2_CMIZFILES = $(addsuffix .cmiz, $(MP2FILES))
MP2_CMOZFILES = $(addsuffix .cmoz, $(MP2FILES))
MP2_CMXFILES  = $(addsuffix .cmx,  $(MP2FILES))
MP2_PPOFILES  = $(addsuffix .ppo,  $(MP2FILES))

LCMOFILES    = $(addsuffix .cmo,  $(LMFILES))
LCMIFILES    = $(addsuffix .cmi,  $(LMFILES))
LCMXFILES    = $(addsuffix .cmx,  $(LMFILES))
MCMIFILES    = $(addsuffix .cmi,  $(MFILES))
MCMOFILES    = $(addsuffix .cmo,  $(MFILES))
MCMXFILES    = $(addsuffix .cmx,  $(MFILES))
PCMIFILES    = $(addsuffix .cmi,  $(PFILES))
PCMOFILES    = $(addsuffix .cmo,  $(PFILES))
PCMXFILES    = $(addsuffix .cmx,  $(PFILES))

LMLIFILES    = $(addsuffix .mli,  $(LMFILES))
LMLFILES     = $(addsuffix .ml,   $(LMFILES))
MMLFILES     = $(addsuffix .mli,  $(MFILES))
MMLIFILES    = $(addsuffix .ml,   $(MFILES))
PMLIFILES    = $(addsuffix .mli,  $(PFILES))
PMLFILES     = $(addsuffix .ml,   $(PFILES))

REG_CMIFILES = $(sort $(LCMIFILES) $(MCMIFILES) $(PCMIFILES))
REG_CMOFILES = $(sort $(LCMOFILES) $(MCMOFILES) $(PCMOFILES))
REG_CMXFILES = $(sort $(LCMXFILES) $(MCMXFILES) $(PCMXFILES))

CMIFILES     = $(sort $(MP_CMIFILES) $(MP2_CMIFILES) $(LCMIFILES) $(MCMIFILES))
CMOFILES     = $(sort $(MP_CMOFILES) $(MP2_CMOFILES) $(LCMOFILES) $(MCMOFILES))
CMXFILES     = $(sort $(MP_CMXFILES) $(MP2_CMXFILES) $(LCMXFILES) $(MCMXFILES))

CMAFILES     = $(addsuffix .cma,  $(MLLIBS))
CMXAFILES    = $(addsuffix .cmxa, $(MLLIBS))

BOFILES      = $(addsuffix -byte$(EXT_OBJ), $(LCFILES))
NOFILES      = $(addsuffix -native$(EXT_OBJ), $(LCFILES))
CFILES       = $(addsuffix .c, $(LCFILES))

RMLIFILES    = $(addprefix $(ROOT)/lib/, $(LMLIFILES))
RCMIFILES    = $(addprefix $(ROOT)/lib/, $(CMIFILES))
RCMAFILES    = $(addprefix $(ROOT)/lib/, $(addsuffix .cma, $(INSTALL_LIBS)))
RCMXAFILES   = $(addprefix $(ROOT)/lib/, $(addsuffix .cmxa, $(INSTALL_LIBS)))
RAFILES      = $(addprefix $(ROOT)/lib/, $(addsuffix $(EXT_LIB), $(INSTALL_LIBS)))

ZMLFILES     = $(addsuffix .ml, $(MLZFILES))
ZMLIFILES    = $(addsuffix .mli, $(MLZFILES))
PMLFILES     = $(addsuffix _verb.ml, $(MLPFILES)) $(addsuffix _simp.ml, $(MLPFILES))
PMLIFILES    = $(addsuffix _verb.mli, $(MLPFILES)) $(addsuffix _simp.mli, $(MLPFILES))

# Instructions to make
.PHONY: all lib opt clean depend install
.PRECIOUS: %.cmo %.cmi %.cmx %.ml %.mli

.SUFFIXES: .cma .cmx .cmo .cmi .ml .mli .mll .mly

$(MAIN)-byte$(EXT_LIB): $(BOFILES)
	ar r $@ $?
	ranlib $@

$(MAIN)-native$(EXT_LIB): $(NOFILES)
	ar r $@ $?
	ranlib $@

$(MAIN).cma: $(LCMOFILES) $(MP_CMOFILES)
	$(OCAMLC) $(OCAMLCFLAGS) -a -o $@ $(LCMOFILES) $(MP_CMOFILES)

$(MAIN).cmxa: $(LCMXFILES) $(MP_CMXFILES)
	$(OCAMLOPT) $(OCAMLOPTFLAGS) -a -o $@ $(LCMXFILES) $(MP_CMXFILES)

$(MAIN).run: $(CMAFILES) $(CMADEPS) $(PCMOFILES)
	$(OCAMLCP) -custom $(OCAMLCFLAGS) -o $@ $(OCAMLCPOPT) $(CMALIBS) $(CMAFILES) $(PCMOFILES) $(BYTE_CCLIBS) $(LIBTHREADS)
	if [ -f $(MAIN).run.exe ]; then\
		mv $(MAIN).run.exe $(MAIN).run.bak;\
		mv $(MAIN).run.bak $(MAIN).run;\
	fi

$(MAIN).opt: $(CMXAFILES) $(CMXDEPS) $(PCMXFILES)
	$(OCAMLOPT) $(OCAMLOPTFLAGS) -o $@ $(CMXAFILES) $(CMXLIBS) $(PCMXFILES) $(NATIVE_CCLIBS) $(OPTTHREADS)
	if [ -f $(MAIN).exe ]; then\
		mv $(MAIN).exe $(MAIN).bak;\
		mv $(MAIN).bak $(MAIN);\
	fi

#
# No default action for install
#
install::

$(RMLIFILES): $(ROOT)/lib/%.mli: %.mli
	$(LN) ../$(DIR)/$*.mli $(ROOT)/lib

$(RCMIFILES): $(ROOT)/lib/%.cmi: %.cmi
	$(LN) ../$(DIR)/$*.cmi $(ROOT)/lib

$(RCMAFILES): $(ROOT)/lib/%.cma: %.cma
	$(LN) ../$(DIR)/$*.cma $(ROOT)/lib

$(RCMXAFILES): $(ROOT)/lib/%.cmxa: %.cmxa
	$(LN) ../$(DIR)/$*.cmxa $(ROOT)/lib
	$(LN) ../$(DIR)/$*$(EXT_LIB) $(ROOT)/lib

$(RAFILES): $(ROOT)/lib/%$(EXT_LIB): %$(EXT_LIB)
	$(LN) ../$(DIR)/$*$(EXT_LIB) $(ROOT)/lib

$(MP_CMIFILES) $(MP2_CMIFILES): %.cmi: %.mli
	MPLIB=$(MPLIB) $(PRLC) $(OCAMLCFLAGS) -c $*.mli

$(MP_PPOFILES) $(MP2_PPOFILES): %.ppo: %.cmi %.ml
	$(CAMLP4N) $(CAMLP4NFLAGS) $*.ml -o $*.ppo

$(MP_CMOFILES) $(MP2_CMOFILES): %.cmo: %.ppo %.cmi
	$(OCAMLC) $(OCAMLCFLAGS) -c -impl $*.ppo

$(MP_CMXFILES) $(MP2_CMXFILES): %.cmx: %.ppo %.cmi
	$(OCAMLOPT) $(OCAMLOPTFLAGS) -c -impl $*.ppo

$(REG_CMOFILES): %.cmo: %.ml %.cmi
	$(OCAMLCP) $(OCAMLCFLAGS) -c $(OCAMLCPOPT) $*.ml

$(REG_CMIFILES): %.cmi: %.mli
	$(OCAMLC) $(OCAMLCFLAGS) -c $*.mli

$(REG_CMXFILES): %.cmx: %.ml %.cmi
	$(OCAMLOPT) $(OCAMLOPTFLAGS) -c $*.ml

%.p4i: %.mli
	MPLIB=$(MPLIB) $(PRLC) $(INCLUDE) -E $*.mli > $*.p4i

%.p4: %.ml
	MPLIB=$(MPLIB) $(PRLC) $(INCLUDE) -E $*.ml > $*.p4

%.ml: %.mll
	$(RM) $@
	$(OCAMLLEX) $*.mll

%.ml %.mli: %.mly
	$(RM) $*.ml $*.mli
	$(OCAMLYACC) $*.mly

%.ml: %.mlz
	$(RM) $@
	$(LN) $*.mlz $@

%.mli: %.mlz
	$(RM) $@
	$(LN) $*.mlz $@

%_verb.ml: %.mlp $(ROOT)/refiner/refsig/refine_error.h
	$(RM) $@
	$(CPP) $(INCLUDE) -DVERBOSE_EXN $*.mlp > $@
	chmod 444 $@

%_verb.mli: %.mlip
	$(RM) $@
	$(CPP) $(INCLUDE) -DVERBOSE_EXN $*.mlip > $@
	chmod 444 $@

%_simp.ml: %.mlp $(ROOT)/refiner/refsig/refine_error.h
	$(RM) $@
	$(CPP) $(INCLUDE) $*.mlp > $@
	chmod 444 $@

%_simp.mli: %.mlip
	$(RM) $@
	$(CPP) $(INCLUDE) $*.mlip > $@
	chmod 444 $@

%-byte.o: %.c
	$(CC) $(BYTE_CFLAGS) $(CFLAGS) -c $*.c -o $@

%-native.o: %.c
	$(CC) $(NATIVE_CFLAGS) $(CFLAGS) -c $*.c -o $@

%-byte.p.o: %.c
	$(CC) -p $(BYTE_CFLAGS) $(CFLAGS) -c $*.c -o $@

%-native.p.o: %.c
	$(CC) -p $(NATIVE_CFLAGS) $(CFLAGS) -c $*.c -o $@

#
clean::
	$(RM) *.run *.top *.opt *.cma *.cmxa *.cmx *.cmi* *.cmo* *.z* *.o *.a *~ *.bak *.output $(CLEAN_MAIN)
	$(RM) gmon.out $(ZMLFILES) $(ZMLIFILES) $(PMLFILES) $(PMLIFILES) Makefile.dep

Makefile.dep:
	@if [ -f $(OCAMLDEP) ]; then touch Makefile.dep; make depend; fi

depend:: $(MLFILES) $(MLIFILES)
	$(RM) Makefile.tmp
	touch Makefile.tmp
ifneq ($(MLFILES),)
	$(OCAMLDEP) $(OCAMLDEPFLAGS) $(INCLUDE) $(MLFILES) $(MLIFILES) >> Makefile.tmp
endif
ifneq ($(CFILES),)
	$(CC) $(CFLAGS) -MM $(CFILES) >> Makefile.tmp
endif
	mv Makefile.tmp Makefile.dep
