#
# If you add a new variable to this file (mk/make_config),
# make sure to also add a default value to mk/defaults
#

#
# Function to generate the config file
#
MakeConfig(name) =
    public.fullname = $(in $(ROOT), $(file $(name)))
    CONFIG1 = $"""
# Main MetaPRL configuration file.

# This file (mk/config) is generated by omake using mk/make_config
# If you want to change anything except for the variable values,
# put it into mk/config.local or edit mk/make_config.

# This is the list of theory directories theory/* that you want to compile. 
#
# Include itt/core if you want to use the Core of Constructive Type Theory, 
# include itt if you want to use the complete Constructive Type Theory (core,
# applications, extensions, etc).
#
# Alternatively, use THEORIES = all to get all the theories,
# or THEORIES = default, to include the usual set of theories.
# To include your special theory, you would use the following
# if you want the usual directories and your own, use the following.
#    THEORIES = all mytheory
# Or, if you just want your own, use the following.
#    THEORIES = mytheory
#
# If the OMakefile in the theory directory defines the THEORY_DEPS variable,
# the named dependencies will be picked up automatically and do not need to be listed
# here explicitly.
#
THEORIES = $(THEORIES)

#####################################################################################
# It is normally safe to leave the remaining variables set to their default values.
#

#
# Do you want native and/or byte code?
# Set COMPILATION_MODE to one of the following vaues:
#    byte - compile everything bytecode
#    native - compile everything to native code
#    both - compile both native and bytecode
#    mixed - compile the MetaPRL preprocessor to native code,
#            and compile the MetaPRL theories and the interactive
#            proof editor to bytecode.
#
# The default value is "mixed" since it is the most efficient mode
# for the theory development.
#
COMPILATION_MODE = $(COMPILATION_MODE)

#
# Which user interface do you want to use by default?
#    browser - MetaPRL will act as an HTTP server and you will be able to access it
#              via a browser.
#    cli     - MetaPRL will be running in a terminal and you will be able to access it
#              via a command-line interface.
# Note - you will be able to override this compile-time default with a command-line flag
# given to MetaPRL on startup.
#
DEFAULT_UI = $(DEFAULT_UI)

#
# The OpenSSL package (available in Linux at least) (true/false)
# Note: the browser interface currently does not work without SSL.
#
SSL_ENABLED = $(SSL_ENABLED)

#
# Do you want to use threads (true/false)?
# Highly recommended for the browser interface.
#
THREADS_ENABLED = $(THREADS_ENABLED)
"""

    NONWIN_CONFIG = $"""
#
# Use GNU readline package (available on Linux at least) (true/false).
# Requires "NCURSES_ENABLED" (below) in order to work.
# Highly recommended for the command-line interface.
#
$(if $(READLINE_AVAILABLE), $"READLINE_ENABLED = $(READLINE_ENABLED)", $"# READLINE_ENABLED: readline not found on your system")

#
# The GNU ncurses package (available in Linux at least) (true/false)
# Should be enabled for readline support (above) to be enabled.
# Highly recommended for the command-line interface.
#
$(if $(NCURSES_AVAILABLE), $"NCURSES_ENABLED = $(NCURSES_ENABLED)", $"# NCURSES_ENABLED: ncurses not found on your system")

#
# C compiler
#
CC = $(CC)
CFLAGS = $(CFLAGS)
"""

    CONFIG3 = $"""
#
# You may want to use a custom LaTeX command
#
LATEX = $(LATEX)

#
# Whether to compile in various test theories and files (true/false)
#
TESTS_ENABLED = $(TESTS_ENABLED)

#
# Refiner verbosity: VERBOSE or SIMPLE
# See doc/htmlman/developer-guide/refiner_verb_and_simp.html or
# http://metaprl.org/developer-guide/refiner_verb_and_simp.html
# for more information.
# If not sure, use VERBOSE
#
REFINER = $(REFINER)

#
# Term module to use: ds or std
# See doc/htmlman/developer-guide/term_modules.html or
# http://metaprl.org/developer-guide/term_modules.html
# for more information.
# If not sure, use ds
#
TERMS = $(TERMS)

#
# What representation to use for hypothesis and conclusion lists
# Possible values: Lm_array, Lm_splay (for splay trees)
# If not sure, use Lm_array
#
SEQ_SET = $(SEQ_SET)

#
# Whether to build MetaPRL native code with profiling enabled
# (see man gprof).
#
# When enabled, overrides NATIVE_ENABLED and BYTE_ENABLED.
# When set to "compact", passes the "-compact" option to ocamlopt
# which makes all memory allocations more obvious in profiling graphs.
#
NATIVE_PROFILING_ENABLED = $(NATIVE_PROFILING_ENABLED)

#
# Whether to build a version of MetaPRL with an OCaml toploop ("mp.run").
# Since the OCaml toploop does not always "play nicely" with MetaPRL, this
# can only be used for certain kinds of debugging.
#
# The value is ignored when COMPILATION_MODE=native.
#
MPRUN_ENABLED = $(MPRUN_ENABLED)

#
# If ENSROOT is defined, it should point
# to the root of the Ensemble source tree
# In this case Ensemble support would be compiled into MetaPRL
#
ENSROOT = $(ENSROOT)

#
# If OCAMLSRC is defined, it should point
# to the root of the OCaml source tree
# In this case Jason's marshaller debugging code
# would be compiled into MetaPRL
# Do not enable this unless you know what you are doing!
#
OCAMLSRC = $(OCAMLSRC)

#
# Do you want to use sloppy dependencies?  If enabled, then updating
# the refiner will not force theory files to be recompiled.  If
# in doubt, you should use "false".
#
SLOPPY_DEPENDENCIES = $(SLOPPY_DEPENDENCIES)

#
# If you plan on installing MetaPRL binaries, you must specify the
# location of the installation directory.  Normally on Unix systems
# this will be /usr/lib/metaprl or /usr/local/lib/metaprl.
# This is currently unimplemented for Win32.
#
# If you are not planning to install MetaPRL binaries, you
# can ignore this option.
#
INSTALL_DIR = $(INSTALL_DIR)

# This file (mk/config) is generated by omake using mk/make_config
# If you want to change anything except for the variable values,
# put it into mk/config.local or edit mk/make_config.
"""

    CONFIG2 = $(if $(equal $(OSTYPE), Win32), $(EMPTY), $(NONWIN_CONFIG))
    CONFIG = $(CONFIG1)$(CONFIG2)$(CONFIG3)

    # Save the text in the output file
    exists = $(file-exists $(name))
    if $(exists)
        eprintln(Updating the $(fullname) file.)
    fp = $(fopen $(name), w)
    fprint($(fp), $(CONFIG))
    close($(fp))
    return($(fullname))
