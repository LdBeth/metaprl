#
# If you add a new variable to this file (mk/make_config),
# make sure to also add a default value to mk/defaults
#

#
# Function to generate the config file
#
MakeConfig(name) =
    CONFIG1 = $"""
# Main MetaPRL configuration file.

# This file (mk/config) is generated by omake using mk/make_config
# If you want to change anything except for the variable values,
# put it into mk/config.local or edit mk/make_config.

#
# Do you want native and/or byte code?
# By default, we make native code.  If you want
# byte code, set it to true.
#
NATIVE_ENABLED = $(NATIVE_ENABLED)
BYTE_ENABLED = $(BYTE_ENABLED)

#
# Term module to use: ds or std
# See doc/htmlman/developer-guide/term_modules.html or
# http://cvs.metaprl.org:12000/metaprl/developer-guide/term_modules.html
# for more information.
# If not sure, use ds
#
TERMS = $(TERMS)

#
# What representation to use for hypothesis and conclusion lists
# Possible values: Lm_array, Lm_splay (for splay trees)
# If not sure, use Lm_array
#
SEQ_SET = $(SEQ_SET)

#
# Refiner verbosity: VERBOSE or SIMPLE
# See doc/htmlman/developer-guide/refiner_verb_and_simp.html or
# http://cvs.metaprl.org:12000/metaprl/developer-guide/refiner_verb_and_simp.html
# for more information.
# If not sure, use VERBOSE
#
REFINER = $(REFINER)

#
# This is the list of theory directories theory/*
# that you want to compile.  You want to include at least
#    THEORIES = base
# Include itt if you want to use the Constructive Type Theory,
# and add any additional theory directories after that.
#
# Alternatively, include THEORIES = all, or THEORIES = default,
# to include the usual set of theories.  For example, you can
# use THEORIES=all to get all theories.  To include your special
# theory, you would use the following if you want the usual
# directories and your own, use the following.
#    THEORIES=all mytheory
# Or, if you just want your own, use the following.
#    THEORIES=base mytheory
#
THEORIES = $(THEORIES)

#
# The OpenSSL package (available in Linux at least) (true/false)
# Note: the browser interface currently does not work without SSL.
#
SSL_ENABLED = $(SSL_ENABLED)

#
# Do you want to use threads (true/false)?
# Highly recommended for the browser interface.
#
THREADS_ENABLED = $(THREADS_ENABLED)
"""

    NONWIN_CONFIG = $"""
#
# Use GNU readline package (available on Linux at least) (true/false).
# Requires "NCURSES_ENABLED" (below) in order to work.
# Highly recommended for the command-line interface.
#
READLINE_ENABLED = $(READLINE_ENABLED)

#
# The GNU ncurses package (available in Linux at least) (true/false)
# Should be enabled for readline support (above) to be enabled.
# Highly recommended for the command-line interface.
#
NCURSES_ENABLED = $(NCURSES_ENABLED)

#
# C compiler
#
CCC = $(CCC)

#
# Whether to build MetaPRL native code with profiling enabled
# (see man gprof).
#
# When enabled, overrides NATIVE_ENABLED and BYTE_ENABLED.
# When set to "compact", passes the "-compact" option to ocamlopt
# which makes all memory allocations more obvious in profiling graphs.
#
NATIVE_PROFILING_ENABLED = $(NATIVE_PROFILING_ENABLED)
"""

    CONFIG3 = $"""
#
# You may want to use a custom LaTeX command
#
LATEX = $(LATEX)

#
# Whether to compile in various test theories and files (true/false)
#
TESTS_ENABLED = $(TESTS_ENABLED)

#
# If ENSROOT is defined, it should point
# to the root of the Ensemble source tree
# In this case Ensemble support would be compiled into MetaPRL
#
ENSROOT = $(ENSROOT)

#
# If OCAMLSRC is defined, it should point
# to the root of the OCaml source tree
# In this case Jason's marshaller debugging code
# would be compiled into MetaPRL
# Do not enable this unless you know what you are doing!
#
OCAMLSRC = $(OCAMLSRC)

#
# Do you want to use sloppy dependencies?  If enabled, then updating
# the refiner will not force theory files to be recompiled.  If
# in doubt, you should use "false".
#
SLOPPY_DEPENDENCIES = $(SLOPPY_DEPENDENCIES)

# This file (mk/config) is generated by omake using mk/make_config
# If you want to change anything except for the variable values,
# put it into mk/config.local or edit mk/make_config.
"""

    CONFIG2 = $(if $(equal $(OSTYPE), Win32), $(EMPTY), $(NONWIN_CONFIG))
    CONFIG = $(CONFIG1)$(CONFIG2)$(CONFIG3)

    # Save the text in the output file
    exists = $(file-exists $(name))
    if $(exists)
        eprintln(Updating the $(name) file.)
    fp = $(fopen $(name), w)
    fprint($(fp), $(CONFIG))
    close($(fp))

    # If it was just created, ask the user to edit it
    if $(not $(exists))
        eprintln(A new config file $(name) was created for you.)
        eprintln(You should edit it before continuing.)
        exit(1)
