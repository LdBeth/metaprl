
########################################################################
# Configuration section
#

#
# Configuration defaults
#
include mk/defaults

FindBrowser() =
   foreach(browser => ..., $(DEFAULT_BROWSER_COMMANDS))
      if $(CheckProg $(browser))
         return $(which $(browser))
   return $(EMPTY)

static.=
   println($"--> Looking for a browser command to use...")
   DEFAULT_BROWSER_COMMAND = $(FindBrowser)
   if $(DEFAULT_BROWSER_COMMAND)
      println($"<-- Default browser command: $(DEFAULT_BROWSER_COMMAND)")
   else
      println($"<-- No browser found")

BROWSER_COMMAND = $(DEFAULT_BROWSER_COMMAND)

#
# Configuration file
#
include mk/make_config

#
# Include config if it exist
#
if $(file-exists mk/config)
    include mk/config
    export
else
    protected.fullname = $(MakeConfig mk/config)
    eprintln($"!!! A new config file $(fullname) was created for you.
!!! In that file, we filled in a number of default values for you.
!!! In particular, by default only the following theories will be compiled in:
!!!     $(THEORIES)
!!! You may want to edit the $(fullname) file before continuing.
!!!
!!! After you are done, run omake again to continue the build process.")
    exit(0)

INSTALL_DIR = $(dir $(INSTALL_DIR))
THEORYPATH[] = $(dir $(THEORYPATH))

#
# Things that can not be enabled on Win32.
#
if $(equal $(OSTYPE), Win32)
    READLINE_ENABLED = false
    NCURSES_ENABLED = false
    NATIVE_PROFILING_ENABLED = false
    export

#
# Canonize boolean flags
# This helps in keeping mk/config nice, but can be omitted.
#
Bool(arg) =
    return $(not $(not $(arg)))

SSL_ENABLED = $(Bool $(SSL_ENABLED))
THREADS_ENABLED = $(Bool $(THREADS_ENABLED))
READLINE_ENABLED = $(and $(READLINE_ENABLED), $(NCURSES_ENABLED))
NCURSES_ENABLED = $(Bool $(NCURSES_ENABLED))
NATIVE_PROFILING_ENABLED = $(Bool $(NATIVE_PROFILING_ENABLED))
SPELLING_ENABLED = $(Bool $(SPELLING_ENABLED))
TESTS_ENABLED = $(Bool $(TESTS_ENABLED))
SLOPPY_DEPENDENCIES = $(Bool $(SLOPPY_DEPENDENCIES))
MPRUN_ENABLED = $(Bool $(MPRUN_ENABLED))

if $(equal $(COMPILATION_MODE), bytecode)
    COMPILATION_MODE = byte
    export

#
# Create a fresh copy if it is out-of-date
#
.INCLUDE: mk/config: mk/make_config
    section eval
       MakeConfig(mk/config)

#
# Local config
#
.INCLUDE: mk/config.local
    if $(not $(file-exists mk/config.local))
        eprintln(Creating the mk/config.local file.)
        $(CP) $(file mk/config.local.empty) $(file mk/config.local)

########################################################################
# Update the OCaml lib location.
#
if $(not $(defined CAMLLIB))
    CAMLLIB = $(dir $(getenv CAMLLIB, $(getenv OCAMLLIB, $(CAMLLIB_DEFAULT))))
    export

if $(not $(defined CAMLP5LIB))
    CAMLP5LIB = $(dir $(getenv CAMLP5LIB, $"$(CAMLLIB)/camlp5"))
    export

if $(not $(defined CAMLP5))
    CAMLP5 = camlp5
    export
