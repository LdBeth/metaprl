(*
 * Shared types for printing ML terms.
 *
 * ----------------------------------------------------------------
 *
 * This file is part of MetaPRL, a modular, higher order
 * logical framework that provides a logical programming
 * environment for OCaml and other languages.
 *
 * See the file doc/index.html for information on Nuprl,
 * OCaml, and more information about this system.
 *
 * Copyright (C) 1998 Jason Hickey, Cornell University
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 * 
 * Author: Jason Hickey
 * jyh@cs.cornell.edu
 *)

open Refiner.Refiner.TermMeta

(*
 * Generic file.
 *)
module type FileSig =
sig
   (* File type *)
   type t

   (* Input type *)
   type name

   (* Output type *)
   type out

   (* Creation *)
   val create : name -> t
   val close : t -> unit

   (* Output operations *)
   val puti : t -> string -> unit
   val put : t -> string -> unit
   val get : t -> out
end

(*
 * Generic printer.
 *)
module type PrinterSig =
sig
   (* File type *)
   type t

   (* Printers *)
   val print_term : t -> term -> unit
   val print_named_term : t -> string -> term -> unit
   val print_mterm : t -> meta_term -> unit
   val print_term_list : t -> term list -> unit
end

(*
 * -*-
 * Local Variables:
 * Caml-master: "refiner"
 * End:
 * -*-
 *)
