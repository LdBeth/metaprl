(*
 * Define terms.  This is the abstract term interface.
 * There may be several implementations of terms.
 *)

open Opname
open Refine_error_sig

module type TermSimpleSig =
sig
   (************************************************************************
    * Types                                                                *
    ************************************************************************)

   (*
    * Operators have a name and parameters.
    *
    * When this file is copied to term_std.mli, the
    * following for type definitions become abstract.
    *)
   type level_exp_var = level_exp_var'
   and level_exp = level_exp'
   and param = param'
   and operator = operator'

   (*
    * A term has an operator, and a finite number of subterms
    * that may be bound.
    *)
   and term
   and bound_term

   (************************************************************************
    * Interface types                                                      *
    ************************************************************************)

   (*
    * Level expression have offsets from level expression
    * vars, plus a constant offset.
    *)
   and level_exp_var' = { le_var : string; le_offset : int }

   and level_exp' = { le_const : int; le_vars : level_exp_var list }

   (*
    * Parameters have a number of simple types.
    *)
   and object_id = param list

   and param' =
      Number of Num.num
    | String of string
    | Token of string
    | Level of level_exp
    | Var of string
    | MNumber of string
    | MString of string
    | MToken of string
    | MLevel of string
    | MVar of string

      (* Special Nuprl5 values *)
    | ObId of object_id
    | ParamList of param list

      (* Num operations *)
    | MSum of param * param
    | MDiff of param * param
    | MProduct of param * param
    | MQuotient of param * param
    | MRem of param * param
    | MLessThan of param * param

      (* Comparisons *)
    | MEqual of param * param
    | MNotEqual of param * param

   (*
    * An operator combines a name with a list of parameters.
    * The order of params is significant.
    *)
   and operator' = { op_name : opname; op_params : param list }

   (*
    * A term has an operator, and a finite number of subterms
    * that may be bound.
    *)
   and term' = { term_op : operator; term_terms : bound_term list }
   and bound_term' = { bvars : string list; bterm : term }

   (*
    * The terms in the framework include
    * a meta-implication and met-iff.
    *)
   type meta_term =
      MetaTheorem of term
    | MetaImplies of meta_term * meta_term
    | MetaFunction of term * meta_term * meta_term
    | MetaIff of meta_term * meta_term

   (************************************************************************
    * Sequents                                                             *
    ************************************************************************)

    type hypothesis =
       Hypothesis of string * term
     | Context of string * term list

    type seq_hyps
    type seq_goals

    type esequent =
       { sequent_args : term;
         sequent_hyps : seq_hyps;
         sequent_goals : seq_goals
       }

end

(*
 * -*-
 * Local Variables:
 * Caml-master: "refiner.run"
 * End:
 * -*-
 *)
