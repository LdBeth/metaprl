########################################################################
# A few useful variables
#
ROOT  = $(dir .)
LIB   = $(dir lib)
BIN   = $(dir bin)
EMPTY =

########################################################################
# Generic Unix section
#
LN = ln -sf
AR = ar
CP = /bin/cp
RM = /bin/rm
MKDIR = mkdir
CHMOD = chmod
RANLIB = ranlib

########################################################################
# C section
#
CC = cc
CPP = /lib/cpp
CFLAGS =
LD = ld
AS = as
INCLUDES = -I.
YACC = yacc
LEX = lex
EXE_WIN = .exe
EXE_UNIX =
EXE = $(if $(equal $(OS), win32), $(EXE_WIN), $(EXE_UNIX))
EXT_LIB = $(if $(equal $(OS), win32), .dll, .a)
LIBS =

#
# Special flags for compiling C files for use in OCaml
#
BYTE_CFLAGS =
NATIVE_CFLAGS =

#
# Generic build rules
#
%.o: %.c
	$(CC) $(CFLAGS) $(INCLUDES) -c -o $@ $*.c

%.c: %.y
	$(YACC) $*.y

%.c: %.l
	$(LEX) $*.l

#
# Default C scanner uses gcc to collect dependencies
#
.SCANNER: %.c
	$(CC) $(CFLAGS) $(INCLUDES) -MM $^

#
# Define a function to build a C-library
#
StaticCLibrary(name, files) =
    #
    # Generic library that can be used on byte and native-code
    #
    OFILES = $(addsuffix .o, $(files))

    #
    # Names of libs
    #
    NORMALLIB = $(file $(name)$(EXT_LIB))
    BYTELIB   = $(file $(name)-byte$(EXT_LIB))
    NATIVELIB = $(file $(name)-native$(EXT_LIB))

    $(NORMALLIB): $(OFILES)
	$(AR) cq $@ $,(OFILES)
	$(RANLIB) $@

    #
    # MetaPRL likes to have separate byte and native-code libraries
    #
    BYTE_OFILES = $(addsuffix -byte.o, $(files))
    NATIVE_OFILES = $(addsuffix -native.o, $(files))

    $(BYTE_OFILES): %-byte.o: %.c
	$(CC) $(BYTE_CFLAGS) $(CFLAGS) $(INCLUDES) -c -o $@ $<

    $(NATIVE_OFILES): %-native.o: %.c
	$(CC) $(NATIVE_CFLAGS) $(CFLAGS) $(INCLUDES) -c -o $@ $<

    $(name)-byte$(EXT_LIB): $(BYTE_OFILES)
	$(AR) cq $@ $,(BYTE_OFILES)
	$(RANLIB) $@

    $(name)-native$(EXT_LIB): $(NATIVE_OFILES)
	$(AR) cq $@ $,(NATIVE_OFILES)
	$(RANLIB) $@

#
# Copy to an install directory
#
StaticCLibraryCopy(tag, lib, name) =
    #
    # Names of libs
    #
    NORMALLIB = $(file $(name)$(EXT_LIB))
    BYTELIB   = $(file $(name)-byte$(EXT_LIB))
    NATIVELIB = $(file $(name)-native$(EXT_LIB))

    #
    # Linking the library into the root lib dir
    #
    $(lib)/$(name)$(EXT_LIB): $(NORMALLIB)
	$(LN) $(in $(lib), $(NORMALLIB)) $@

    $(lib)/$(name)-byte$(EXT_LIB): $(BYTELIB)
	$(LN) $(in $(lib), $(BYTELIB)) $@

    $(lib)/$(name)-native$(EXT_LIB): $(NATIVELIB)
	$(LN) $(in $(lib), $(NATIVELIB)) $@

#
# We often use them together
#
StaticCLibraryInstall(tag, lib, name, files) =
    StaticCLibrary($(name), $(files))
    StaticCLibraryCopy($(tag), $(lib), $(name))

#
# Define a function to build a C-program
#
CProgram(name, files) =
   #
   # Generic program
   #
   OFILES = $(addsuffix .o, $(files))
   NAME   = $(file $(name))

   $(NAME): $(OFILES)
	$(CC) $(CFLAGS) -o $@ $,(OFILES) $(LIBS)

#
# Copy to a bin directory
#
CProgramCopy(tag, bin, name) =
   #
   # Name of the program
   #
   NAME   = $(file $(name))

   #
   # Linking the program into the root bin dir
   #
   $(BIN)/$(name): $(NAME)
	$(LN) $(in $(BIN), $(NAME)) $@

#
# We often use them together
#
CProgramInstall(tag, bin, name, files) =
   CProgram($(name), $(files))
   CProgramCopy($(tag), $(bin), $(name))

########################################################################
# OCaml section
#
OCAMLC = ocamlc.opt
OCAMLOPT = ocamlopt.opt
OCAMLLEX = ocamllex
OCAMLYACC = ocamlyacc
OCAMLDEP = ocamldep
OCAMLMKTOP = ocamlmktop
OCAMLLINK = $(OCAMLC)
OCAMLOPTLINK = $(OCAMLOPT)

#
# Include path
#
OCAMLINCLUDES = -I .

#
# Compile native or byte code?
#
BYTE_ENABLED = false
NATIVE_ENABLED = true

#
# Various options
#
OCAMLDEPFLAGS =
OCAMLPPFLAGS  =
OCAMLFLAGS    = -warn-error A
OCAMLCFLAGS   = -g $'(OCAMLFLAGS)
OCAMLOPTFLAGS = $'(OCAMLFLAGS)

#
# OCAMLLIBS contains libraries that are used as dependencies
# OCAMLOTHERLIBS contains other libraries (like unix.cma)
# The lists do not include suffixes.
#
# OCAMLLINKFLAGS contains extra linking information
#
OCAML_LIBS =
OCAML_CLIBS =
OCAML_OTHER_LIBS =
OCAML_LIB_FLAGS =
OCAML_LINK_FLAGS =
OCAML_BYTE_LINK_FLAGS =
OCAML_NATIVE_LINK_FLAGS =

#
# Should the interface files be installed along with
# the libraries?
#
INSTALL_INTERFACES = true

#
# The moogle config.
# The moogle parameters _must_ be set in subdirectories that
# use them.
#
MOOGLEIZE   = $(file bin/moogleize)
MOOGLEFLAGS = -no-such-options-
ARCH_FILE   = -no-such-file-

#
# Generic build rules
#
%.cmi: %.mli
	$(OCAMLC) $(OCAMLCFLAGS) $(OCAMLPPFLAGS) $(OCAMLINCLUDES) -c $*.mli

%.cmo: %.ml
	$(OCAMLC) $(OCAMLCFLAGS) $(OCAMLPPFLAGS) $(OCAMLINCLUDES) -c $*.ml

%.cmx: %.ml
	$(OCAMLOPT) $(OCAMLOPTFLAGS) $(OCAMLPPFLAGS) $(OCAMLINCLUDES) -c $*.ml

%.ml: %.mll
	$(OCAMLLEX) $*.mll

%.ml %.mli: %.mly
	$(OCAMLYACC) -v $*.mly

%.ml %.mli: %.mlz
	$(LN) $*.mlz $@

%.ml: %.kupo $(MOOGLEIZE)
	$(RM) -f $*.ml
	$(MOOGLEIZE) $(MOOGLEFLAGS) -o $*.ml $*.kupo

%.ml: %.mlp %.h
	$(RM) -f $@
	echo "(* CAUTION: this is a generated file.  If you edit it, all changes will be lost! *)" > $@
	$(CPP) -imacros $*.h $*.mlp >> $@
	$(CHMOD) 444 $@

#
# Generic scanners
#
.SCANNER: %.cmi %.cmo %.cmx
	$(OCAMLDEP) $(OCAMLDEPFLAGS) $(OCAMLINCLUDES) $(set $(replacesuffixes .cmi .cmo .cmx, .mli .ml .ml, $^))

#
# Generic rule to build an ML library
#
OCamlLibrary(name, files) =
   CMOFILES = $(addsuffix .cmo, $(files))
   CMXFILES = $(addsuffix .cmx, $(files))

   CLIB      = $(file $(name)$(EXT_LIB))
   BYTELIB   = $(file $(name).cma)
   NATIVELIB = $(file $(name).cmxa)

   $(BYTELIB): $(CMOFILES)
	$(OCAMLLINK) $(OCAMLCFLAGS) $(OCAML_LIB_FLAGS)  -a -o $@ $,(CMOFILES)

   $(NATIVELIB): $(CMXFILES)
	$(OCAMLOPTLINK) $(OCAMLOPTFLAGS) $(OCAML_LIB_FLAGS) -a -o $@ $,(CMXFILES)

#
# A MetaPRL theory is always named "theory"
#
Theory(files) =
    OCamlLibrary(theory, $(files))

#
# Install the library
#
.PHONY: copy\

OCamlLibraryCopy(tag, lib, name, ifiles) =
   #
   # Copy interface files
   #
   MLIFILES  = $(addprefix $(lib)/, $(addsuffix .mli, $(ifiles)))
   CMIFILES  = $(addprefix $(lib)/, $(addsuffix .cmi, $(ifiles)))

   $(MLIFILES) $(CMIFILES): $(lib)/%: %
	$(LN) $(in $(lib), $(file $(CWD)/$^)) $@

   #
   # Also install libraries
   #
   CLIB      = $(file $(name)$(EXT_LIB))
   BYTELIB   = $(file $(name).cma)
   NATIVELIB = $(file $(name).cmxa)

   #
   # Link into lib directory
   #
   $(lib)/$(name).cma: $(BYTELIB)
	$(LN) $(in $(lib), $(BYTELIB)) $@

   $(lib)/$(name).cmxa: $(NATIVELIB)
	$(LN) $(in $(lib), $(NATIVELIB)) $@
	$(LN) $(in $(lib), $(CLIB)) $*.a

   #
   # Add dependencies to the target
   #
   if $(INSTALL_INTERFACES)
      $(tag): $(MLIFILES) $(CMIFILES)
   if $(BYTE_ENABLED)
      $(tag): $(lib)/$(name).cma
   else
      $(tag): $(lib)/$(name).cmxa

#
# We often use them together
#
OCamlLibraryInstall(tag, lib, name, files) =
    OCamlLibrary($(name), $(files))
    OCamlLibraryCopy($(tag), $(lib), $(name), $(files))

#
# Generic rule to build an OCaml program
#    name: the name of the target, without a suffix
#    files: names of the object files, without suffixes
#
# Other variables:
#    OCAML_LIBS: OCaml libraries target depends on, without suffix
#    OCAML_CLIBS: C libraries we depend on, without suffix
#    OCAML_OTHER_LIBS: OCaml libraries, without dependencies, without suffix
#    OCAML_BYTE_LINK_FLAGS: additional flags for byte compiler
#    OCAML_NATIVE_LINK_FLAGS: additional flags for native-code compiler
#    OCAML_LINK_FLAGS: general additional options (usually the -cclib options)
#
OCamlProgram(name, files) =
   CMOFILES  = $(addsuffix .cmo, $(files))
   CMXFILES  = $(addsuffix .cmx, $(files))

   CMAFILES  = $(addsuffix .cma, $(OCAML_LIBS))
   CMXAFILES = $(addsuffix .cmxa, $(OCAML_LIBS))
   CMA_OTHER_FILES = $(addsuffix .cma, $(OCAML_OTHER_LIBS))
   CMXA_OTHER_FILES = $(addsuffix .cmxa, $(OCAML_OTHER_LIBS))

   BYTE_CLIBS = $(addsuffix -byte$(EXT_LIB), $(OCAML_CLIBS))
   NATIVE_CLIBS = $(addsuffix -native$(EXT_LIB), $(OCAML_CLIBS))
   CLIBS = $(addsuffix $(EXT_LIB), $(LIBS))

   PROG     = $(file $(name))
   BYTEPROG = $(file $(name).run)
   OPTPROG  = $(file $(name).opt)

   #
   # Rules to build byte-code and native targets
   #
   $(BYTEPROG): $(CMAFILES) $(CMOFILES) $(BYTE_CLIBS) $(CLIBS)
	$(OCAMLLINK) $(OCAMLCFLAGS) $(OCAMLINCLUDES) -custom $(OCAML_BYTE_LINK_FLAGS) -o $@\
		$(CMA_OTHER_FILES) $(CMAFILES) $(CMOFILES)\
		$(BYTE_CLIBS) $(CLIBS) $(OCAML_LINK_FLAGS)

   $(OPTPROG): $(CMXAFILES) $(CMXFILES) $(NATIVE_CLIBS) $(OCAML_NATIVE_LINK_FLAGS) $(CLIBS)
	$(OCAMLOPTLINK) $(OCAMLOPTFLAGS) $(OCAMLINCLUDES) -o $@\
		$(CMXA_OTHER_FILES) $(CMXAFILES) $(CMXFILES)\
		$(NATIVE_CLIBS) $(CLIBS) $(OCAML_LINK_FLAGS)

#
# Copy to $(BIN) directory
#
OCamlProgramCopy(tag, bin, name) =
   PROG     = $(file $(name))
   BYTEPROG = $(file $(name).run)
   OPTPROG  = $(file $(name).opt)

   #
   # Link the actual executables.
   # Always prefer native executables
   #
   if $(NATIVE_ENABLED)
	$(PROG): $(OPTPROG)
	    $(LN) $< $@

	$(bin)/$(name): $(OPTPROG)
	    $(LN) $(in $(bin), $(OPTPROG)) $@
   else
	$(PROG): $(BYTEPROG)
	    $(LN) $< $@

	$(bin)/$(name): $(BYTEPROG)
	    $(LN) $(in $(bin), $(BYTEPROG)) $@

   # Add to phony tag
   $(tag): $(bin)/$(name)

#
# We often use them together
#
OCamlProgramInstall(tag, bin, name, files) =
    OCamlProgram($(name), $(files))
    OCamlProgramCopy($(tag), $(bin), $(name))

#
# Kupo files have en extra dependency on ARCH_FILE
#
KupoFiles(files) =
   MLFILES = $(addsuffix .ml, $(files))
   MLIFILES = $(addsuffix .mli, $(files))

   $(MLFILES) $(MLIFILES): $(ARCH_FILE)

#########################################################################
# Default targets
#

#
# This is the root directory
#
.SUBDIRS: .