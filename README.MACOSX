The directions below outline the process for compiling MetaPRL under Mac OS
X.  They were developed by Brian Emre Aydemir (emre@cs.caltech.edu) when he
had temporary access to a machine running Mac OS X.  Issues that Brian could
not resolve are listed at the end of this file.

Note: All the commands below need to be run from a command line, such as
the Terminal program in /Applications/Utilities.

---------------------------------------------------------------------------

0. If you have not already installed the Apple Developer Tools, you will
   need to download them.  If you have an Apple Developer Connection (ADC)
   membership, this should be a free download.  Otherwise, you will need to
   become a member first.  The 'Online' membership level is free and gives
   you access to the developer tools.  See

      http://developer.apple.com/membership/descriptions.html

   for more information.

   Once you have downloaded the tools, install them.

1. MetaPRL requires a customized version of the OCaml programming language
   tools.  Follow the directions at

      http://caml.inria.fr/caml-macosx-howto/index.html

   for downloading the OCaml sources and Mac OS X patch.  Go ahead and
   unpack the source tarball and apply the patch as directed.  Follow the
   directions in the INSTALL file for increasing the limit on the stack
   size.  After you have done this, copy the MetaPRL patch from the

      metaprl/patches

   directory into the directory with the OCaml sources.  Apply the patch,
   e.g.,

      patch -p0 < camlp4-3.06-opt.patch

   Now run ./configure with the -with-pthreads option.  You may also want to
   specify other options, such as -prefix.  You can safely ignore an error
   about "labltk" if it appears; follow the directions on the OCaml website
   for compiling with Tcl/tk support.

   Finally, compile the OCaml tools using

      make world.opt

   The tools can be installed using

      make install

   Make sure that location that you chose to put the binaries is in your
   path.

2. The OCaml install in the previous step should look like it completed
   without any significant errors.  Unfortunately, this isn't the case.
   (I'm unsure whose fault this is.)  If the OCaml libraries were installed
   into lib/ocaml, you'll need to run the following two commands:

      ranlib lib/ocaml/camlp4/camlp4.a
      ranlib lib/ocaml/camlp4/odyl.a

3. Change into the MetaPRL source directory (the directory with this file)
   and run mk/config.  A new 'config' file should be created in the mk/
   directory.  Go ahead and edit it (directions are provided in the file
   itself).  If OCaml was not installed into /usr, you will need to create
   a file mk/config.local and define CAMLLIB and CAMLP4LIB to point to where
   the ocaml and ocaml/camlp4 library directories are located.  For example,
   config.local may contain the following lines:

      CAMLLIB=/Users/emre/Documents/ocaml/install-3.06/lib/ocaml
      CAMLP4LIB=/Users/emre/Documents/ocaml/install-3.06/lib/ocaml/camlp4

4. From the MetaPRl source directory (the directory with this file), run

      make

   to build the bytecode version of MetaPRL, or run

      make opt

   to build the native-code version of MetaPRL.

5. To run the bytecode MetaPRL toploop, use

      editor/ml/mptop

   To run the native-code MetaPRL toploop, use

      editor/ml/mpopt

---------------------------------------------------------------------------

Known issues that Brian (emre@cs.caltech.edu) could not resolve:

1. Fonts:  The MetaPRL toploop looks pretty bad unless you use a font that
   has all the necessary Unicode characters.  Unfortunately, I do not know
   of any that come with Mac OS X or MetaPRL.  The fonts in

      editor/fonts/ttf

   seem to work pretty well, although some characters are missing and others
   appear to be incorrect (such as the 'element of' symbol).  These fonts
   can be installed by copying to a

      Libarary/Fonts

   folder and unpacking them using the 'gunzip' program.

   The default Monaco font also works fairly well, although 'subscript'
   characters look quite odd.

   In either case, you may want to fiddle with the font size and character
   spacing in the Font dialog (under the 'Font' menu, choose 'Show Fonts').
   Enabling anti-aliasing may also help (in the 'Terminal menu', chose
   'Window Settings...', and then look under 'Display').

2. status_all ():  This issue is a bit more worrisome.  Attempting to run

      status_all ();;

   from the '/' directory of the toploop causes the following uncaught
   exception to be raised:

      # status_all ();;
      ... [lots of output ommitted] ...
      Module: /itt_grouplikeobj
      Failure("Failed to find the specified format of itt_grouplikeobj")
      Uncaught exception: Failure("Failed to find the specified format of
                                   itt_grouplikeobj")
      #

   This happens in both the bytecode and native-code toploops.  The
   status_all logs for MetaPRL, as of this writing, did not display this
   error.  [The behavior above happens with THEORIES=all in mk/config.]
