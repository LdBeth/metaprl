#
# Make sure omake is up-to-date
#
OMakeVersion(0.8.7)

########################################################################
# Begin real makefile.
#
# Override the root directory
#
OLDROOT = $(ROOT)
ROOT    = $(dir .)
LIB     = $(dir lib)
BIN     = $(dir bin)

#
# Simplify the machine name
#
ARCH = $(MACHINE)

if $(equal $(ARCH), Power Macintosh)
    ARCH = ppc
    export

if $(mem $(ARCH), x86 i386 i486 i586 i686)
    ARCH = x86
    export

#
# Default compile options are to be quiet
# and print a progress bar.
#
if $(not $(defined VERBOSE))
   OMakeFlags(-S --progress)
   export

#
# omake options
#
ABORT_ON_DEPENDENCY_ERRORS = true
OCAMLDEPFLAGS =

#
# Configuration defaults
#
.INCLUDE: mk/defaults

#
# Configuration file
#
.INCLUDE: mk/make_config

# Create it if it doesn't exist
.INCLUDE: mk/config
    section eval
       MakeConfig(mk/config)

#
# Things that can not be enabled on Win32.
#
if $(equal $(OSTYPE), Win32)
   READLINE_ENABLED = false
   NCURSES_ENABLED = false
   NATIVE_PROFILING_ENABLED = false

#
# Canonize boolean flags
# This helps in keeping mk/config nice, but can be omited.
#
Bool(arg) =
    return( $(not $(not $(arg))))

NATIVE_ENABLED = $(Bool $(NATIVE_ENABLED))
BYTE_ENABLED = $(Bool $(BYTE_ENABLED))
SSL_ENABLED = $(Bool $(SSL_ENABLED))
THREADS_ENABLED = $(Bool $(THREADS_ENABLED))
READLINE_ENABLED = $(Bool $(READLINE_ENABLED))
NCURSES_ENABLED = $(Bool $(NCURSES_ENABLED))
NATIVE_PROFILING_ENABLED = $(Bool $(NATIVE_PROFILING_ENABLED))
TESTS_ENABLED = $(Bool $(TESTS_ENABLED))
SLOPPY_DEPENDENCIES = $(Bool $(SLOPPY_DEPENDENCIES))

# Create a fresh copy if it is out-of-date
.INCLUDE: mk/config: mk/make_config
    section eval
       MakeConfig(mk/config)

.INCLUDE: mk/config.local
    $(CP) $(file mk/config.local.empty) $(file mk/config.local)

#
# Other helper files
#
.INCLUDE: mk/prlcomp

#
# Win32-specific config.
#
if $(equal $(OSTYPE), Win32)
   #
   # cmd.exe does not like ./command paths
   #
   CURRENT_EXEC_DIR =

   #
   # Pathname separator
   #
   SLASH = \\

   #
   # Compile C files with threads
   #
   CFLAGS += /MT

   #
   # CAMLLIB should be set in the environment
   #
   CAMLLIB = $(dir $(getenv OCAMLLIB, $(CAMLLIB_DEFAULT)))
   CAMLP4LIB = $(dir $(CAMLLIB)/camlp4)
   export

else
   #
   # Current directory, for executables.
   # That is, the current directory, like ./make_mp_config
   #
   CURRENT_EXEC_DIR = ./

   #
   # Pathname separator
   #
   SLASH = /

   #
   # Location of OCaml root
   #
   if $(not $(defined CAMLLIB))
      CAMLLIB = $(dir $(getenv CAMLLIB, $(getenv OCAMLLIB, $(CAMLLIB_DEFAULT))))
      export

   if $(not $(defined CAMLP4LIB))
      CAMLP4LIB = $(dir $(getenv CAMLP4LIB, $(CAMLLIB)/camlp4))
      export

   #
   # Generic CC options
   #
   CC = $(CCC)
   CFLAGS =
   export

#
# In ocaml >- 3.07, a -q option was added to ocamllex
#
OCAMLLEX += -q

if $(not $(defined CAMLP4R))
   CAMLP4R = camlp4r
   export

if $(not $(defined CAMLP4O))
   CAMLP4O = camlp4o
   export

#
# Inline more aggressively
#
if $(not $(NATIVE_PROFILING_ENABLED))
   OCAMLOPTFLAGS += -inline $(OCAMLOPT_INLINE)
   export

#
# Do not compile MetaPRL with threads.
#
THREADS =
THREADSLIB =
OPTTHREADSLIB =
OCAML_OTHER_LIBS += unix

if $(THREADS_ENABLED)
    THREADS = -thread
    OCAMLFLAGS += $(THREADS)
    OCAML_OTHER_LIBS += threads
    THREADSLIB = $(CAMLLIB)/threads/threads.cma
    OPTTHREADSLIB = $(CAMLLIB)/threads/threads.cmxa
    export

#
# For native code profiling, we need both versions of the filter libraries.
#
if $(NATIVE_PROFILING_ENABLED)
   NATIVE_ENABLED = true
   BYTE_ENABLED = true
   OCAMLOPTFLAGS += -p -inline 0
   CFLAGS += -p -DPROF
   if $(equal $(NATIVE_PROFILING_ENABLED), compact)
      OCAMLOPTFLAGS += -compact
      export
   export

#
# Check the configuration
#

if $(BYTE_ENABLED)
   if $(not $(file-exists $(CAMLLIB)/parsetree.cmi))
      eprintln(!!! The file $(CAMLLIB)/parsetree.cmi does not exist \(or is not readable\))
      eprintln(!!!)
      eprintln(!!! Please consult doc/htmlman/mp-install.html \(http://metaprl.org/install.html\))
      eprintln(!!! for instructions on compiling OCaml and setting the CAMLLIB variable)
      eprintln(!!!)
      exit(1)

   if $(not $(and $(file-exists $(CAMLP4LIB)/camlp4.cma), $(file-exists $(CAMLP4LIB)/pa_op.cmo)))
      eprintln(!!! One of the files)
      eprintln(!!!    $(CAMLP4LIB)/camlp4.cma)
      eprintln(!!!    $(CAMLP4LIB)/pa_op.cmo)
      eprintln(!!! does not exist \(or is not readable\))
      eprintln(!!!)
      eprintln(!!! Please consult doc/htmlman/mp-install.html \(http://metaprl.org/install.html\))
      eprintln(!!! for instructions on compiling OCaml and setting the CAMLP4LIB variable)
      eprintln(!!!)
      exit(1)

if $(NATIVE_ENABLED)
   if $(not $(and $(file-exists $(CAMLP4LIB)/camlp4.cmxa), $(file-exists $(CAMLP4LIB)/pa_op.cmx)))
      eprintln(!!! One of the files)
      eprintln(!!!    $(CAMLP4LIB)/camlp4.cmxa)
      eprintln(!!!    $(CAMLP4LIB)/pa_op.cmx)
      eprintln(!!! does not exist \(or is not readable\))
      eprintln(!!!)
      eprintln(!!! Please consult doc/htmlman/mp-install.html \(http://metaprl.org/install.html\))
      eprintln(!!! for instructions on compiling OCaml and setting the CAMLP4LIB variable)
      eprintln(!!!)
      exit(1)

if $(not $(or $(equal $(TERMS), ds), $(equal $(TERMS), std)))
   eprintln(ERROR: the TERMS variable is currently set to an invalid value "$(TERMS)"\, please fix it in the mk/config file)
   exit(1)

if $(not $(or $(equal $(REFINER), SIMPLE), $(equal $(REFINER), VERBOSE)))
   eprintln(ERROR: the REFINER variable is currently set to an invalid value "$(REFINER)"\, please fix it in the mk/config file)
   exit(1)

if $(not $(or $(equal $(SEQ_SET), Lm_array), $(equal $(SEQ_SET), Lm_splay)))
   eprintln(ERROR: the SEQ_SET variable is currently set to an invalid value "$(SEQ_SET)"\, please fix it in the mk/config file)
   exit(1)

#
# Different version files
#
OCAMLC_VERSION     = $(file .version.ocamlc)
OCAMLOPT_VERSION   = $(file .version.ocamlopt)
CAMLP4_VERSION     = $(file .version.camlp4)
CAMLP4R_VERSION    = $(file .version.camlp4r)
CAMLP4O_VERSION    = $(file .version.camlp4o)
OCAMLMKTOP_VERSION = $(file .version.ocamlmktop)

#
# Generate the rule for version checking.
#
VersionCheck(versionfile, command) =
    fullcommand = $(which $(command))

    $(versionfile): $(fullcommand)
        section eval
            version = $(concat _, $(shell $(command) -version))
            if $(mem $(version), $(CAML_VERSIONS))
                fd = $(fopen $(versionfile), w)
                fprintln($(fd), $(version))
                close($(fd))
            else
                eprintln(!!! Wrong CAML version.)
                eprintln(!!! $(command) -version produced the version string $(version))
                eprintln(!!! You need this version to be compatible with MetaPRL\,)
                eprintln(!!! which is only known to work with versions $(CAML_VERSIONS).)
                eprintln(!!! If you believe that this list of versions is incorrect\, edit)
                eprintln(!!! the CAML_VERSIONS variable in the mk/defaults file.)
                exit(1)

VersionCheck($(OCAMLC_VERSION),     $(OCAMLC))
VersionCheck($(OCAMLOPT_VERSION),   $(OCAMLOPT))
VersionCheck($(OCAMLMKTOP_VERSION), $(OCAMLMKTOP))
VersionCheck($(CAMLP4_VERSION),     $(CAMLP4))
VersionCheck($(CAMLP4R_VERSION),    $(CAMLP4R))
VersionCheck($(CAMLP4O_VERSION),    $(CAMLP4O))

%.cmo %.cmi: $(OCAMLC_VERSION)
%.cmx: $(OCAMLOPT_VERSION)

#
# Library suffix
#
if $(NATIVE_ENABLED)
   LIB_SUFFIX = .cmxa
   OBJ_SUFFIX = .opt
   export
else
   LIB_SUFFIX = .cma
   OBJ_SUFFIX = .top
   export

#
# Whether to compile a distributed version or not
#
if $(equal $(ENSROOT), undefined)
   ENSEMBLE_DIR = tactics/null
   export
else
   ENSEMBLE_DIR = tactics/ensemble
   export

#
# Include the generic caml library
#
INCLUDES += $(CAMLLIB)

#
# Generic phony targets
#
.PHONY: all opt install clean realclean depend tex doc

#
# Default clean line
#
MLZFILES =
MLPFILES =
CLEAN = $'(RM) $'(file *.opt *.run *.o *.obj *.lib *.cm* *.a *~ .*~ .\#* *.ppo *.p4i *.p4o .version.* $'(addsuffix .ml, $(MLZFILES)) $'(addsuffix .mli, $(MLZFILES)) $'(addsuffix .ml, $(MLPFILES)))

clean:
    $(CLEAN) $(file bin/ocamldep$(EXE) lib/camlp4* bin/convert$(EXE) bin/proxyedit$(EXE) lib/*.cm* lib/*.ml* lib/*.txt lib/*.dat lib/*.a lib/macrop* bin/prlc* lib/*.html lib/*.js lib/*.css lib/*.gif lib/*.pem lib/metaprl-ssl.config)

realclean: clean
    -$'(RM) $(file theories/*/*.prlb theories/*/*/*.prlb theories/*/*/*/*.prlb) # XXX: This is a temporary HACK
    cvs_realclean -i .omakedb -i mk/config -i mk/config.local

#
# Phony target for installing libraries
#
INSTALL_INTERFACES = true
MPINSTALL = mp.install
LMINSTALL = $(MPINSTALL)

.PHONY: $(MPINSTALL)

#
# Always use -linkall on libraries
#
OCAML_LIB_FLAGS += -linkall

if $(SSL_ENABLED)
    if $(equal $(OSTYPE), Win32)
        OCAML_LINK_FLAGS += -cclib c:/OpenSSL/lib/VC/ssleay32.lib -cclib c:/OpenSSL/lib/VC/libeay32.lib
        CFLAGS += /DSSL_ENABLED
	INCLUDES += c:/OpenSSL/include
        export
    else
        OCAML_LINK_FLAGS += -cclib -lcrypto -cclib -lssl
        CFLAGS += -DSSL_ENABLED
	INCLUDES += /usr/kerberos/include
        export

    export

if $(READLINE_ENABLED)
    CFLAGS += \
        -DREADLINE\
        -DRL_COMPLETION_MATCHES=rl_completion_matches\
        -DRL_CP_TYPE=rl_compentry_func_t\
        -DRL_CPP_TYPE=rl_completion_func_t
    OCAML_LINK_FLAGS += -cclib -lreadline
    export

if $(NCURSES_ENABLED)
    CFLAGS += -DNCURSES
    OCAML_LINK_FLAGS += -cclib -lncurses
    export

#
# Directories needing only the standard config
#
.SUBDIRS: clib util

########################################################################
# For the rest of MetaPRL, use our custom scanner.

OCAMLDEP = $(file bin/ocamldep$(EXE))

OCAMLDEPFLAGS += -omake

.SCANNER: %.cmi: %.mli $(OCAMLDEP)
.SCANNER: %.cmo %.cmx: %.ml $(OCAMLDEP) :exists: %.mli

#
# Libmojave is using our custom scanner, but otherwise config is normal
#
.SUBDIRS: libmojave

OCAMLINCLUDES[] +=
   $(dir libmojave/stdlib)
   $(dir libmojave/util)
   $(dir libmojave/unix)

########################################################################
# Refiner building
#

# Macro preprocess
MACROPP = $(file lib/macropp$(EXE))
MACROPRINT = $(file lib/macroprint$(EXE))

#
# For the refiner and mllib directories,
# add a dependency on the macro processor.
#
section
    # Add the extra dependency
    %.cmi: $(MACROPP)
    %.cmo: $(MACROPP)
    %.cmx: $(MACROPP)

    # These directories use the macro preprocessor
    .SUBDIRS: mllib

    OCAMLINCLUDES[] +=
        $(dir mllib)

    .SUBDIRS: refiner

OCAMLINCLUDES[] +=
    $(dir mllib)

.SUBDIRS: proxyedit

OCAMLINCLUDES[] +=
    $(dir refiner/refsig)
    $(dir refiner/refbase)
    $(dir refiner/refiner)
    $(dir refiner/reflib)

########################################################################
# Generic directories with no special options
#

.SUBDIRS: library debug $(ENSEMBLE_DIR) tactics/proof

# Add camlp4 library to include path
OCAMLINCLUDES[] +=
    $(CAMLP4LIB)
    $(dir library)
    $(dir tactics/proof)

.SUBDIRS: filter

OCAMLINCLUDES[] +=
    $(dir filter/base)
    $(dir filter/filter)

########################################################################
# Theory building
#

#
# When using native code profiling, no need to build theories to bytecode.
#
if $(NATIVE_PROFILING_ENABLED)
   BYTE_ENABLED=false
   export

#
# Commands to compile theory files
#
CAMLP4N = $(file $(LIB)/camlp4n$(EXE))
CAMLP4O = $(file $(LIB)/camlp4o$(EXE))
CONVERT = $(file $(BIN)/convert$(EXE))
CAMLP4NFLAGS = $'(PREFIXED_OCAMLINCLUDES)
CAMLP4OFLAGS = $'(PREFIXED_OCAMLINCLUDES)
MPTIME =

#
# Add dependency scanning for .ppo files
#
.SCANNER: %.ppo %.cmoz: %.ml $(OCAMLDEP)
    $(OCAMLDEP) $(OCAMLDEPFLAGS) $(PREFIXED_OCAMLINCLUDES) $<

.SCANNER: %.cmi %.cmiz: %.mli $(OCAMLDEP)
    $(OCAMLDEP) $(OCAMLDEPFLAGS) $(PREFIXED_OCAMLINCLUDES) $<

#
# OCamlGeneratedFiles need to be redefined to include .ppo
#
OCamlGeneratedFiles(files) =
   .SCANNER: %.cmi: $(files)
   .SCANNER: %.ppo: $(files)
   .SCANNER: %.cmo %.cmx: $(files)
   export

#
# For theory files, generate intermediate .ppo files
#
%.ppo %.cmoz: %.ml %.cmiz :optional: %.prla :effects: %.prlb
        $(WrapC $(CAMLP4N)) $(CAMLP4NFLAGS) -o $*.ppo $*.ml

%.cmi %.cmiz: %.mli
        $(PrlC $(OCAMLC)) $(OCAMLFLAGS) $(OCAMLCFLAGS) $(OCAMLPPFLAGS) $(PREFIXED_OCAMLINCLUDES) -c $<

%.cmo: %.ppo
        $(OCAMLC) $(OCAMLFLAGS) $(OCAMLCFLAGS) $(PREFIXED_OCAMLINCLUDES) -c -impl $<

%.cmx %$(EXT_OBJ): %.ppo
        $(OCAMLOPT) $(OCAMLFLAGS) $(OCAMLOPTFLAGS) $(PREFIXED_OCAMLINCLUDES) -c -impl $<

%.p4i: %.mli $(CAMLP4O)
        $(WrapC $(CAMLP4O)) $(PREFIXED_OCAMLINCLUDES) $*.mli > $@

%.p4: %.ml $(CAMLP4O)
        $(WrapC $(CAMLP4O)) $(PREFIXED_OCAMLINCLUDES) $*.ml > $@

#
# Support directories
#
SUPPORT = $(dir support)
SUPPORT_DIRS = $(dir $(addprefix $(SUPPORT)/, $(array display, shell, tactics)))

#
# Add the extra dependencies.  If sloppy dependencies
# is set, squash the dependency chain by using an
# intermediate file.
#
if $(SLOPPY_DEPENDENCIES)
   MPFILTER = $(file .sloppy)
   $(MPFILTER): $(CAMLP4N)
      echo "Sloppy filter dependencies" > $@

   %.cmi %.cmiz: $(MPFILTER)
   %.ppo %.cmoz: $(MPFILTER)

   export
else
   %.cmi %.cmiz: $(CAMLP4N)
   %.ppo %.cmoz: $(CAMLP4N)
   export


# Dependency analysis uses -prl flag by default
OCAMLDEPFLAGS += -prl

# These directories use prlc
THEORIES = $(split ' ', $(THEORIES))
THEORIES = $(if $(mem all, $(THEORIES)), $(THEORIES_ALL) $(filter-out all%, $(THEORIES)), $(THEORIES))
THEORY_DIRS = $(dir $(addprefix theories/, $(THEORIES)))

MP_DIRS[] =
   $(SUPPORT_DIRS)
   $(THEORY_DIRS)

Theory(files) =
    .DEFAULT: $(addsuffix .cmoz, $(files))
    OCamlLibrary(theory, $(files))

########################################################################
# LaTeX documentation
#

#
# Add the inputs directory to the search path.
#
INPUTSDIR = $(dir doc/latex/inputs)
TEXINPUTS += $(INPUTSDIR)

#
# Directory that store the .ps and .pdf files
#
DOCDIR = $(dir doc/ps/theories)

#
# Assume these files are always dependencies.
#
TEXDEPS += $(file $(INPUTSDIR)/rc.bib) $(file $(INPUTSDIR)/metaprl.tex)

#
# MetaPRL command
#
MP = $(file $(ROOT)/editor/ml/mp$(OBJ_SUFFIX))

#
# Build a theory document locally.
# The main goal is to get MetaPRL to generate the TeX files.
#
TheoryDocument(docname, theories) =
    CMOZFILES = $(file $(addsuffix .cmoz, $(theories)))
    THEORIES = $(basename $(theories))

    #
    # Contents of the print.ml file
    #
    $(docname)_print.ml:
        $(echo set_tex_file "$(docname).tex";; $(add-quoted-wrapper print_theory , ;;, $(THEORIES))) > $@

    #
    # Get MetaPRL to generate the .tex files
    #
    $(docname).tex $(docname)-body.tex: $(MP) $(CMOZFILES) $(docname)_print.ml
        $(WrapC $(MP)) $(PREFIXED_OCAMLINCLUDES) -batch $(docname)_print.ml

#
# Format the document and copy it to the DOCDIR directory.
#
TheoryDocumentInstall(name, theories) =
    TheoryDocument(theory, $(theories))
    LaTeXDocumentInstall(tex, $(DOCDIR), $(name), theory, theory-body)

#
# Also clean up the TeX files in the subdirectories
#
CLEAN += *.log *.aux *.idx *.ilg *.ind *.pdf *.ps *.dvi *.blg *.bbl *.out *.toc

########################################################################
# Subdirectories to build
#
.SUBDIRS: doc

section
   THEORYNAME = support
   THEORYDESCR = MetaPRL Internal "Helper" Modules
   .SUBDIRS: $(SUPPORT_DIRS) editor/ml

section
   # Default theory for those directories that do not override it
   THEORYNAME = other
   THEORYDESCR = Miscellaneous Theories
   .SUBDIRS: $(THEORY_DIRS)
