#
# Make sure omake is up-to-date
#
OMakeVersion(0.7.2)

#
# Override the root directory
#
OLDROOT = $(ROOT)
ROOT    = $(dir .)
LIB     = $(dir lib)
BIN     = $(dir bin)

#
# Default compile options are to be quiet
# and print a progress bar.
#
if $(not $(defined VERBOSE))
   OMakeFlags(-S --progress)
   export

#
# Configuration defaults
#
.INCLUDE: mk/defaults

OCAMLFLAGS = $(DEFAULT_OCAMLFLAGS)

#
# Win32-specific config.
# Read the config file.
# If the config file does not exist, then create one.
#
if $(equal $(OSTYPE), Win32)
   .INCLUDE: mk/config: mk/config.win32
       copy mk\config.win32 mk\config

   .INCLUDE: mk/config.local
       copy mk\config.local.empty mk\config.local

   #
   # cmd.exe does not like ./command paths
   #
   CURRENT_EXEC_DIR =

   #
   # No native-code version of camlp4 on windows
   #
   NATIVE_ENABLED = false
   BYTE_ENABLED = true
   READLINE_ENABLED = false
   NCURSES_ENABLED = false
   CFLAGS += /MT

   #
   # CAMLLIB should be set in the environment
   #
   CAMLLIB = $(dir $(getenv OCAMLLIB))
   CAMLP4LIB = $(dir $(CAMLLIB)/camlp4)
   export

else
   #
   # Defaults (in case mk/config does not define them)
   #
   TERMS = $(TERMS_DEFAULT)
   REFINER = $(REFINER_DEFAULT)
   MAKE_OPTS =
   SEQ_SET = $(SEQ_SET_DEFAULT)
   CCC = $(CCC_DEFAULT)
   ENSROOT = $(ENSROOT_DEFAULT)
   OCAMLSRC = $(OCAMLSRC_DEFAULT)
   THEORIES = $(THEORIES_DEFAULT)
   TESTS_ENABLED = $(TESTS_ENABLED_DEFAULT)
   READLINE_ENABLED=true
   NCURSES_ENABLED=true
   NATIVE_ENABLED = $(NATIVE_ENABLED_DEFAULT)
   BYTE_ENABLED = $(BYTE_ENABLED_DEFAULT)
   SLOPPY_DEPENDENCIES = false

   .INCLUDE: mk/config
       ROOT="$(ROOT)" TERMS="$(TERMS)" REFINER="$(REFINER)" MAKE_OPTS="$(MAKE_OPTS)" SEQ_SET="$(SEQ_SET)" CCC="$(CCC)" ENSROOT="$(ENSROOT)" OCAMLSRC="$(OCAMLSRC)" THEORIES="$(THEORIES)" TESTS_ENABLED="$(TESTS_ENABLED)" READLINE_ENABLED="$(READLINE_ENABLED)" NCURSES_ENABLED="$(NCURSES_ENABLED)" SLOPPY_DEPENDENCIES="$(SLOPPY_DEPENDENCIES)" NATIVE_ENABLED="$(NATIVE_ENABLED)" BYTE_ENABLED="$(BYTE_ENABLED)" mk/make_config.sh

   .INCLUDE: mk/config: mk/make_config.sh
       ROOT="$(ROOT)" TERMS="$(TERMS)" REFINER="$(REFINER)" MAKE_OPTS="$(MAKE_OPTS)" SEQ_SET="$(SEQ_SET)" CCC="$(CCC)" ENSROOT="$(ENSROOT)" OCAMLSRC="$(OCAMLSRC)" THEORIES="$(THEORIES)" TESTS_ENABLED="$(TESTS_ENABLED)" READLINE_ENABLED="$(READLINE_ENABLED)" NCURSES_ENABLED="$(NCURSES_ENABLED)" SLOPPY_DEPENDENCIES="$(SLOPPY_DEPENDENCIES)" NATIVE_ENABLED="$(NATIVE_ENABLED)" BYTE_ENABLED="$(BYTE_ENABLED)" mk/make_config.sh

   .INCLUDE: mk/config.local
       $(CP) mk/config.local.empty mk/config.local

   #
   # Current directory, for executables.
   # That is, the current directory, like ./make_mp_config
   #
   CURRENT_EXEC_DIR = ./

   #
   # Location of OCaml root
   #
   if $(not $(defined CAMLLIB))
      CAMLLIB = $(dir $(CAMLLIB_DEFAULT))
      export

   if $(not $(defined CAMLP4LIB))
      CAMLP4LIB = $(dir $(CAMLP4LIB_DEFAULT))
      export

   #
   # Generic CC options
   #
   CC = $(CCC)
   CFLAGS =
   export

#
# Check the configuration
#
if $(not $(file-exists $(CAMLLIB)/parsetree.cmi))
   eprint(!!! The file $(CAMLLIB)/parsetree.cmi does not exist \(or is not readable\))
   eprint(!!!)
   eprint(!!! Please consult doc/htmlman/mp-install.html \(http://metaprl.org/install.html\))
   eprint(!!! for instructions on compiling OCaml and setting the CAMLLIB variable)
   eprint(!!!)
   exit(1)

if $(BYTE_ENABLED)
   if $(not $(and $(file-exists $(CAMLP4LIB)/camlp4.cma), $(file-exists $(CAMLP4LIB)/pa_op.cmo)))
      eprint(!!! One of the files)
      eprint(!!!    $(CAMLP4LIB)/camlp4.cma)
      eprint(!!!    $(CAMLP4LIB)/pa_op.cmo)
      eprint(!!! does not exist \(or is not readable\))
      eprint(!!!)
      eprint(!!! Please consult doc/htmlman/mp-install.html \(http://metaprl.org/install.html\))
      eprint(!!! for instructions on compiling OCaml and setting the CAMLP4LIB variable)
      eprint(!!!)
      exit(1)

if $(NATIVE_ENABLED)
   if $(not $(and $(file-exists $(CAMLP4LIB)/camlp4.cmxa), $(file-exists $(CAMLP4LIB)/pa_op.cmx)))
      eprint(!!! One of the files)
      eprint(!!!    $(CAMLP4LIB)/camlp4.cmxa)
      eprint(!!!    $(CAMLP4LIB)/pa_op.cmx)
      eprint(!!! does not exist \(or is not readable\))
      eprint(!!!)
      eprint(!!! Please consult doc/htmlman/mp-install.html \(http://metaprl.org/install.html\))
      eprint(!!! for instructions on compiling OCaml and setting the CAMLP4LIB variable)
      eprint(!!!)
      exit(1)

if $(not $(or $(equal $(TERMS), ds), $(equal $(TERMS), std)))
   eprint(ERROR: the TERMS variable is currently set to an invalid value "$(TERMS)"\, please fix it in the mk/config file)
   exit(1)

if $(not $(or $(equal $(REFINER), SIMPLE), $(equal $(REFINER), VERBOSE)))
   eprint(ERROR: the REFINER variable is currently set to an invalid value "$(REFINER)"\, please fix it in the mk/config file)
   exit(1)

if $(not $(or $(equal $(SEQ_SET), Lm_array), $(equal $(SEQ_SET), Lm_splay)))
   eprint(ERROR: the SEQ_SET variable is currently set to an invalid value "$(SEQ_SET)"\, please fix it in the mk/config file)
   exit(1)

#
# Library suffix
#
if $(NATIVE_ENABLED)
   LIB_SUFFIX = .cmxa
   OBJ_SUFFIX = .opt
   export
else
   LIB_SUFFIX = .cma
   OBJ_SUFFIX = .top
   export

#
# Whether to compile a distributed version or not
#
if $(equal $(ENSROOT), undefined)
   ENSEMBLE_DIR = tactics/null
   export
else
   ENSEMBLE_DIR = tactics/ensemble
   export

#
# Include the generic caml library
#
INCLUDES += -I$(CAMLLIB)

#
# Generic phony targets
#
.PHONY: all opt install clean realclean depend tex doc

#
# Default clean line
#
MLZFILES =
CLEAN = $'(RM) *.opt *.run *.o *.obj *.lib *.cm* *.a *~ .\#* *.ppo *.p4i *.p4o $'(addsuffix .ml, $(MLZFILES)) $'(addsuffix .mli, $(MLZFILES))

clean:
    $(CLEAN) $(file bin/ocamldep$(EXE) lib/camlp4* bin/convert$(EXE) lib/*.cm* lib/*.ml* lib/*.txt lib/*.dat lib/*.a bin/prlc*)

realclean: clean
    -$'(RM) $(file theories/*/*.prlb theories/*/*/*.prlb) # This is a temporary HACK
    cvs_realclean

#
# Phony target for installing libraries
#
INSTALL_INTERFACES = true
MPINSTALL = mp.install
LMINSTALL = $(MPINSTALL)

.PHONY: $(MPINSTALL)

#
# Always use -linkall on libraries
#
OCAML_LIB_FLAGS = $(OCAML_LIB_FLAGS) -linkall
OTHER_CCLIBS =
if $(not $(equal $(OSTYPE), Win32))
    OTHER_CCLIBS = -cclib -lreadline -cclib -lncurses -cclib -ltermcap
    export

#
# Directories needing only the standard config
#
.SUBDIRS: clib util

########################################################################
# Generic directories with no special options

#
# For the rest of MetaPRL, use our custom scanner.
#
OCAMLDEP = $(file bin/ocamldep$(EXE))

.SCANNER: %.cmi: %.mli $(OCAMLDEP)
    $(OCAMLDEP) $(OCAMLDEPFLAGS) $(OCAMLINCLUDES) $(set $(replacesuffixes .cmi .cmo .cmx, .mli .ml .ml, $^))

.SCANNER: %.cmo %.cmx: %.ml $(squashed-dependencies %.mli) $(OCAMLDEP)
    $(OCAMLDEP) $(OCAMLDEPFLAGS) $(OCAMLINCLUDES) $(set $(replacesuffixes .cmi .cmo .cmx, .mli .ml .ml, $^))

#
# Do not compile MetaPRL with threads.
#
THREADS_ENABLED = false
THREADSLIB =

#
# Directories using our custom scanner, but otherwise config is normal
#
.SUBDIRS: libmojave library debug $(ENSEMBLE_DIR) tactics/proof filter

########################################################################
# Refiner building
#

# Macro preprocess
OCAMLMACROS = $(file lib/macro.cmo)
CAMLP4MACRO = camlp4o $(OCAMLMACROS)
CAMLP4MACROPRINT = camlp4o -I $(CAMLP4LIB) pr_o.cmo $(OCAMLMACROS)
LINEARSET = $(file libmojave/stdlib/$(uncapitalize $(SEQ_SET)_linear_set.cmi))

#
# For the refiner and mllib directories,
# add a dependency on the macro processor.
#
if true
    # Add the extra dependency
    %.cmi: $(OCAMLMACROS) $(LINEARSET)
    %.cmo: $(OCAMLMACROS) $(LINEARSET)
    %.cmx: $(OCAMLMACROS) $(LINEARSET)

    # These directories use the macro preprocessor
    .SUBDIRS: mllib refiner

########################################################################
# Theory building
#

#
# Commands to compile theory files
#
PRLC    = $(file $(BIN)/prlc$(EXE))
CAMLP4N = $(file $(LIB)/camlp4n$(EXE))
CAMLP4O = $(file $(LIB)/camlp4o$(EXE))
CONVERT = $(file $(BIN)/convert$(EXE))
CAMLP4NFLAGS = $'(OCAMLINCLUDES)
CAMLP4OFLAGS = $'(OCAMLINCLUDES)
MPTIME =

#
# Commands for running MetaPRL
#
if $(equal $(OSTYPE), Win32)
    SET_MPLIB = set MPLIB=$(LIB)&&
    export
else
    SET_MPLIB = MPLIB=$(LIB) LC_ALL=C $(MPTIME)
    export

PRLCC     = $(SET_MPLIB) $(PRLC)
CAMLP4NC  = $(SET_MPLIB) $(CAMLP4N)
CAMLP4OC  = $(SET_MPLIB) $(CAMLP4O)
CONVERTC  = $(SET_MPLIB) $(CONVERT)

#
# Add dependency scanning for .ppo files
#
.SCANNER: %.ppo: %.ml $(squashed-dependencies %.mli) $(OCAMLDEP)
    $(OCAMLDEP) $(OCAMLDEPFLAGS) $(OCAMLINCLUDES) $(replacesuffixes .ppo, .ml, $^)

#
# For theory files, generate intermediate .ppo files
#
%.ppo %.cmoz: %.ml $(CAMLP4N)
        $(CAMLP4NC) $(CAMLP4NFLAGS) -o $*.ppo $<

%.prla: %.cmoz
        $(CONVERT) $(OCAMLINCLUDES) -impl $<

%.prlb: %.prla
        $(CONVERT) $(OCAMLINCLUDES) -raw -impl $*<

%.cmi %.cmiz: %.mli
        $(PRLCC) $(OCAMLCFLAGS) $(OCAMLPPFLAGS) $(OCAMLINCLUDES) -c $<

%.cmo: %.ppo
        $(OCAMLC) $(OCAMLCFLAGS) $(OCAMLINCLUDES) -c -impl $<

%.cmx %$(EXT_OBJ): %.ppo
        $(OCAMLOPT) $(OCAMLOPTFLAGS) $(OCAMLINCLUDES) -c -impl $<

%.p4i: %.mli
        $(PRLCC) $(INCLUDE) -E $*.mli > $@

%.p4: %.ml
        $(PRLCC) $(INCLUDE) -E $*.ml > $@

#
# Support directories
#
SUPPORT = $(dir support)
SUPPORT_DIRS = $(dir $(addprefix $(SUPPORT)/, display shell tactics))
SUPPORT_INCLUDE = $'(addprefix -I , $(SUPPORT_DIRS))

# Add the extra dependency
%.cmi: $(MPINSTALL) $(PRLC)
%.cmo: $(MPINSTALL) $(PRLC)
%.cmx: $(MPINSTALL) $(PRLC)

# Dependency analysis uses -prl flag by default
OCAMLDEPFLAGS = -prl

# Add library to include path
OCAMLINCLUDES += -I $(CAMLP4LIB) -I $(LIB)

# These directories use prlc
THEORIES = $(if $(equal $(THEORIES), all), $(THEORIES_ALL), $(THEORIES))
MP_DIRS  = $(SUPPORT_DIRS) $(dir $(addprefix theories/, $(THEORIES)))

########################################################################
# LaTeX documentation
#

#
# Add the inputs directory to the search path.
#
INPUTSDIR = $(dir doc/latex/inputs)
TEXINPUTS += $(INPUTSDIR)

#
# Directory that store the .ps and .pdf files
#
DOCDIR = $(dir doc/ps/theories)

#
# Assume these files are always dependencies.
#
TEXDEPS += $(file $(INPUTSDIR)/rc.bib $(INPUTSDIR)/metaprl.tex)

#
# MetaPRL command
#
MP = $(file $(ROOT)/editor/ml/mp$(OBJ_SUFFIX))

#
# Build a theory document locally.
# The main goal is to get MetaPRL to generate the TeX files.
#
TheoryDocument(docname, theories) =
    CMOZFILES = $(file $(addsuffix .cmoz, $(theories)))
    THEORIES = $(tail $(theories))

    #
    # Contents of the print.ml file
    #
    $(docname)_print.ml:
        echo 'set_tex_file "$(docname).tex";; $(add-quoted-wrapper print_theory , ;;, $(THEORIES))' > $@

    #
    # Get MetaPRL to generate the .tex files
    #
    $(docname).tex $(docname)-body.tex: $(MP) $(CMOZFILES) $(docname)_print.ml
        $(SET_MPLIB) $(MP) $(OCAMLINCLUDES) $(docname)_print.ml

#
# Format the document and copy it to the DOCDIR directory.
#
TheoryDocumentInstall(name, theories) =
    TheoryDocument(theory, $(theories))
    LaTeXDocumentInstall(tex, $(DOCDIR), $(name), theory, theory-body)

#
# Also clean up the TeX files in the subdirectories
#
CLEAN += *.log *.aux *.idx *.ilg *.ind *.pdf *.ps *.dvi *.blg *.bbl *.out *.toc

########################################################################
# Subdirectories to build
#
.SUBDIRS: $(MP_DIRS) editor/ml doc
