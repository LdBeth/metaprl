#
# Override the root directory
#
OLDROOT = $(ROOT)
ROOT    = $(dir .)
LIB     = $(dir lib)
BIN     = $(dir bin)

#
# Default compile options are to be quiet
# and print a progress bar.
#
if $(not $(defined VERBOSE))
   OMakeFlags(-S --progress)

#
# Configuration defaults
#
.INCLUDE: mk/defaults

#
# We always need threads
#
# OCAMLFLAGS += -thread

#
# Win32-specific config.
# Read the config file.
# If the config file does not exist, then create one.
#
if $(equal $(OSTYPE), Win32)
   .INCLUDE: mk/config: mk/config.win32
      copy mk\config.win32 mk\config

   .INCLUDE: mk/config.local
      copy mk\config.local.empty mk\config.local

   #
   # No native-code version of camlp4 on windows
   #
   NATIVE_ENABLED = false
   BYTE_ENABLED = true
   READLINE = false
   NCURSES = false
   CFLAGS += /MT

   #
   # CAMLLIB should be set in the environment
   #
   CAMLLIB = $(dir $(getenv OCAMLLIB))
   CAMLP4LIB = $(dir $(CAMLLIB)/camlp4)
   export

else
   .INCLUDE: mk/config
      ROOT="$(ROOT)" TERMS="$(TERMS_DEFAULT)" REFINER="$(REFINER_DEFAULT)" MAKE_OPTS="" SEQ_SET="$(SEQ_SET_DEFAULT)" CCC="$(CCC_DEFAULT)" ENSROOT="$(ENSROOT_DEFAULT)" OCAMLSRC="$(OCAMLSRC_DEFAULT)" THEORIES="$(THEORIES_DEFAULT)" TESTS="$(TESTS_DEFAULT)" READLINE="yes" NCURSES="yes" SLOPPY_DEPENDENCIES="no" NATIVE_ENABLED="$(NATIVE_ENABLED_DEFAULT)" BYTE_ENABLED="$(BYTE_ENABLED_DEFAULT)" mk/make_config.sh

   .INCLUDE: mk/config: mk/make_config.sh
      ROOT="$(ROOT)" TERMS="$(TERMS)" REFINER="$(REFINER)" MAKE_OPTS="$(MAKE_OPTS)" SEQ_SET="$(SEQ_SET)" CCC="$(CCC)" ENSROOT="$(ENSROOT)" OCAMLSRC="$(OCAMLSRC)" THEORIES="$(THEORIES)" TESTS="$(TESTS)" READLINE="$(READLINE)" NCURSES="$(NCURSES)" SLOPPY_DEPENDENCIES="$(SLOPPY_DEPENDENCIES)" NATIVE_ENABLED="$(NATIVE_ENABLED)" BYTE_ENABLED="$(BYTE_ENABLED)" mk/make_config.sh

   .INCLUDE: mk/config.local
      $(CP) mk/config.local.empty mk/config.local

   #
   # Location of OCaml root
   #
   if $(not $(defined CAMLLIB))
      CAMLLIB = $(dir $(CAMLLIB_DEFAULT))
      export

   if $(not $(defined CAMLP4LIB))
      CAMLP4LIB = $(dir $(CAMLP4LIB_DEFAULT))
      export

   #
   # Generic CC options
   #
   CC = $(CCC)
   CFLAGS =
   export

#
# Check the configuration
#
if $(not $(file-exists $(CAMLLIB)/parsetree.cmi))
   eprint(!!! The file $(CAMLLIB)/parsetree.cmi does not exist \(or is not readable\))
   eprint(!!! Please consult doc/htmlman/mp-install.html \(http://metaprl.org/install.html\))
   eprint(!!! for instructions on compiling OCaml and setting the CAMLLIB variable)
   exit(1)

if $(BYTE_ENABLED)
   if $(not $(file-exists $(CAMLP4LIB)/camlp4.cma))
      eprint(!!! The file $(CAMLP4LIB)/camlp4.cma does not exist \(or is not readable\))
      eprint(!!! Please consult doc/htmlman/mp-install.html \(http://metaprl.org/install.html\))
      eprint(!!! for instructions on compiling OCaml and setting the CAMLP4LIB variable)
      exit(1)

if $(NATIVE_ENABLED)
   if $(not $(file-exists $(CAMLP4LIB)/camlp4.cmxa))
      eprint(!!! The file $(CAMLP4LIB)/camlp4.cmxa does not exist \(or is not readable\))
      eprint(!!! Please consult doc/htmlman/mp-install.html \(http://metaprl.org/install.html\))
      eprint(!!! for instructions on compiling OCaml and setting the CAMLP4LIB variable)
      exit(1)

if $(not $(or $(equal $(TERMS), ds), $(equal $(TERMS), std)))
   eprint(ERROR: the TERMS variable is currently set to an invalid value "$(TERMS)"\, please fix it in the mk/config file)
   exit(1)

if $(not $(or $(equal $(REFINER), SIMPLE), $(equal $(REFINER), VERBOSE)))
   eprint(ERROR: the REFINER variable is currently set to an invalid value "$(REFINER)"\, please fix it in the mk/config file)
   exit(1)

if $(not $(or $(equal $(SEQ_SET), Lm_array), $(equal $(SEQ_SET), Lm_splay)))
   eprint(ERROR: the SEQ_SET variable is currently set to an invalid value "$(SEQ_SET)"\, please fix it in the mk/config file)
   exit(1)

#
# Library suffix
#
if $(NATIVE_ENABLED)
   LIB_SUFFIX = .cmxa
   OBJ_SUFFIX = .opt
   export
else
   LIB_SUFFIX = .cma
   OBJ_SUFFIX = .run
   export

#
# Whether to compile a distributed version or not
#
if $(equal $(ENSROOT), undefined)
   ENSEMBLE_DIR = tactics/null
   export
else
   ENSEMBLE_DIR = tactics/ensemble
   export

#
# Include the generic caml library
#
INCLUDES += -I$(CAMLLIB)

#
# Generic phony targets
#
.PHONY: all opt install clean realclean depend

#
# Default clean line
#
MLZFILES =
CLEAN = $'(RM) *.opt *.run *.o *.cm* *.a *~ .\#* *.ppo *.p4i *.p4o $'(addsuffix .ml, $(MLZFILES)) $'(addsuffix .mli, $(MLZFILES))

clean:
    $(CLEAN) $(file bin/ocamldep$(EXE) lib/camlp4* bin/convert$(EXE) lib/*.cm* lib/*.ml* lib/*.txt lib/*.dat lib/*.a bin/prlc*)

realclean: clean
    $'(RM) $(file theories/*/*.prlb theories/*/*/*.prlb) # This is a temporary HACK
    cvs_realclean

#
# Phony target for installing libraries
#
INSTALL_INTERFACES = true
MPINSTALL = mp.install

.PHONY: $(MPINSTALL)

#
# Always use -linkall on libraries
#
OCAML_LIB_FLAGS = $(OCAML_LIB_FLAGS) -linkall
OTHER_CCLIBS =
if $(not $(equal $(OSTYPE), Win32))
    OTHER_CCLIBS = -cclib -lreadline -cclib -lncurses -cclib -ltermcap
    export

#
# Directories needing only the standard config
#
.SUBDIRS: clib util

########################################################################
# Generic directories with no special options

#
# For the rest of MetaPRL, use our custom scanner.
#
OCAMLDEP = $(file bin/ocamldep$(EXE))

.SCANNER: %.cmi: %.mli $(OCAMLDEP)
    $(OCAMLDEP) $(OCAMLDEPFLAGS) $(OCAMLINCLUDES) $(set $(replacesuffixes .cmi .cmo .cmx, .mli .ml .ml, $^))

.SCANNER: %.cmo %.cmx: %.ml $(OCAMLDEP)
    $(OCAMLDEP) $(OCAMLDEPFLAGS) $(OCAMLINCLUDES) $(set $(replacesuffixes .cmi .cmo .cmx, .mli .ml .ml, $^))

#
# Do not compile MetaPRL with threads.
#
THREADS_ENABLED = false
THREADSLIB =

#
# Directories using our custom scanner, but otherwise config is normal
#
.SUBDIRS: libmojave library debug $(ENSEMBLE_DIR) tactics/proof filter

########################################################################
# Refiner building
#

# Macro preprocess
OCAMLMACROS = $(file lib/macro.cmo)
CAMLP4MACRO = camlp4o $(OCAMLMACROS)
CAMLP4MACROPRINT = camlp4o -I $(CAMLP4LIB) pr_o.cmo $(OCAMLMACROS)

#
# For the refiner and mllib directories,
# add a dependency on the macro processor.
#
if true
    # Add the extra dependency
    %.mli: $(OCAMLMACROS)
    %.ml: $(OCAMLMACROS)

    # These directories use the macro preprocessor
    .SUBDIRS: mllib refiner

########################################################################
# Theory building
#

#
# Commands to compile theory files
#
PRLC    = $(file $(BIN)/prlc$(EXE))
CAMLP4N = $(file $(LIB)/camlp4n$(EXE))
CAMLP4O = $(file $(LIB)/camlp4o$(EXE))
CONVERT = $(file $(BIN)/convert$(EXE))
CAMLP4NFLAGS = $'(OCAMLINCLUDES)
CAMLP4OFLAGS = $'(OCAMLINCLUDES)
MPTIME =

# Use prlc, not ocamlc
if $(equal $(OSTYPE), Win32)
    PRLCC    = set MPLIB=$(LIB)&& $(PRLC)
    CAMLP4NC = set MPLIB=$(LIB)&& $(CAMLP4N)
    CAMLP4OC = set MPLIB=$(LIB)&& $(CAMLP4O)
    CONVERTC = set MPLIB=$(LIB)&& $(CONVERT)
    export
else
    PRLCC     = MPLIB=$(LIB) $(PRLC)
    CAMLP4NC  = MPLIB=$(LIB) LC_ALL=C $(MPTIME) $(CAMLP4N)
    CAMLP4OC  = MPLIB=$(LIB) LC_ALL=C $(MPTIME) $(CAMLP4O)
    CONVERTC  = MPLIB=$(LIB) LC_ALL=C $(MPTIME) $(CONVERT)
    export

#
# Add dependency scanning for .ppo files
#
.SCANNER: %.ppo: %.ml $(OCAMLDEP)
    $(OCAMLDEP) $(OCAMLDEPFLAGS) $(OCAMLINCLUDES) $(replacesuffixes .ppo, .ml, $^)

#
# For theory files, generate intermediate .ppo files
#
%.ppo: %.ml
	$(CAMLP4NC) $(CAMLP4NFLAGS) $*.ml -o $*.ppo

%.prla: %.cmoz
	$(CONVERT) $(OCAMLINCLUDES) -impl $*.cmoz

%.prlb: %.prla
	$(CONVERT) $(OCAMLINCLUDES) -raw -impl $*.prla

%.cmi: %.mli
        $(PRLCC) $(OCAMLCFLAGS) $(OCAMLPPFLAGS) $(OCAMLINCLUDES) -c $<

%.cmo: %.ppo
	$(OCAMLC) $(OCAMLCFLAGS) $(OCAMLINCLUDES) -c -impl $<

%.cmx %$(EXT_OBJ): %.ppo
	$(OCAMLOPT) $(OCAMLOPTFLAGS) $(OCAMLINCLUDES) -c -impl $<

%.p4i: %.mli
	$(PRLCC) $(INCLUDE) -E $*.mli > $*.p4i

%.p4: %.ml
	$(PRLCC) $(INCLUDE) -E $*.ml > $*.p4

#
# Support directories
#
SUPPORT_DIRS = $(dir $(addprefix support/, display shell tactics))
SUPPORT_INCLUDE = $'(addprefix -I , $(SUPPORT_DIRS))

# Add the extra dependency
%.cmi: $(MPINSTALL) $(PRLC)
%.cmo: $(MPINSTALL) $(PRLC)
%.cmx: $(MPINSTALL) $(PRLC)

# Dependency analysis uses -prl flag by default
OCAMLDEPFLAGS = -prl

# Add library to include path
OCAMLINCLUDES += -I $(CAMLP4LIB) -I $(LIB)

# These directories use prlc
THEORIES = $(if $(equal $(THEORIES), all), $(THEORIES_ALL), $(THEORIES))
MP_DIRS  = $(SUPPORT_DIRS) $(dir $(addprefix theories/, $(THEORIES)))

.SUBDIRS: $(MP_DIRS) editor/ml
