#
# Override the root directory
#
OLDROOT = $(ROOT)
ROOT    = $(dir .)
LIB     = $(dir lib)
BIN     = $(dir bin)

#
# Default compile options are to be quiet
# and print a progress bar.
#
if $(not $(defined VERBOSE))
   OMakeFlags(-S --progress)

#
# Configuration defaults
#
.INCLUDE: mk/defaults

#
# We always need threads
#
OCAMLFLAGS += -thread

#
# Win32-specific config.
# Read the config file.
# If the config file does not exist, then create one.
#
if $(equal $(OSTYPE), Win32)
   .INCLUDE: mk/config
      copy mk\config.win32 mk\config

   .INCLUDE: mk/config.local
      copy mk\config.local.empty mk\config.local 

   #
   # No native-code version of camlp4 on windows
   #
   NATIVE_ENABLED = false
   BYTE_ENABLED = true
   READLINE = NO
   NCURSES = NO
   CFLAGS += /MT
   WIN32LIB = h:\home\jyh\lib\win32
   OCAML_LINK_FLAGS += -ccopt /link -ccopt /LIBPATH:$(WIN32LIB)

   #
   # CAMLLIB should be set in the environment
   #
   CAMLLIB = $(dir $(getenv OCAMLLIB))
   CAMLP4LIB = $(dir $(CAMLLIB)/camlp4)
   export

else
   .INCLUDE: mk/config
      ROOT="$(ROOT)" TERMS="$(TERMS_DEFAULT)" REFINER="$(REFINER_DEFAULT)" MAKE_OPTS="" SEQ_SET="$(SEQ_SET_DEFAULT)" CCC="$(CCC_DEFAULT)" ENSROOT="$(ENSROOT_DEFAULT)" OCAMLSRC="$(OCAMLSRC_DEFAULT)" THEORIES="$(THEORIES_DEFAULT)" TESTS="$(TESTS_DEFAULT)" READLINE="yes" NCURSES="no" SLOPPY_DEPENDENCIES="no" NATIVE_ENABLED="$(NATIVE_ENABLED_DEFAULT)" BYTE_ENABLED="$(BYTE_ENABLED_DEFAULT)" mk/make_config.sh
      $(CP) mk/config mk/config.win32

   mk/config: mk/make_config.sh
      ROOT="$(ROOT)" TERMS="$(TERMS)" REFINER="$(REFINER)" MAKE_OPTS="$(MAKE_OPTS)" SEQ_SET="$(SEQ_SET)" CCC="$(CCC)" ENSROOT="$(ENSROOT)" OCAMLSRC="$(OCAMLSRC)" THEORIES="$(THEORIES)" TESTS="$(TESTS)" READLINE="$(READLINE)" NCURSES="$(NCURSES)" SLOPPY_DEPENDENCIES="$(SLOPPY_DEPENDENCIES)" NATIVE_ENABLED="$(NATIVE_ENABLED)" BYTE_ENABLED="$(BYTE_ENABLED)" mk/make_config.sh

   .INCLUDE: mk/config.local
      $(CP) mk/config.local.empty mk/config.local

   if $(not $(defined CAMLLIB))
      CAMLLIB = $(dir $(CAMLLIB_DEFAULT))
      export

   if $(not $(defined CAMLP4LIB))
      CAMLP4LIB = $(dir $(CAMLP4LIB_DEFAULT))
      export

   #
   # Generic CC options
   #
   CC = $(CCC)
   CFLAGS =
   export

#
# Library suffix
#
if $(NATIVE_ENABLED)
   LIB_SUFFIX = .cmxa
   OBJ_SUFFIX = .opt
   export
else
   LIB_SUFFIX = .cma
   OBJ_SUFFIX = .run
   export

#
# Include the generic caml library
#
INCLUDES += -I$(CAMLLIB)

#
# Generic phony targets
#
.PHONY: all opt install clean realclean depend

#
# Default clean line
#
CLEAN = $'(RM) *.opt *.run *.o *.cm* *~ .\#*
REALCLEAN = $(CLEAN) *.prlb

clean:
    $(CLEAN)

realclean: clean
    cvs_realclean

#
# Phony target for installing libraries
#
INSTALL_INTERFACES = true
MPINSTALL = mp.install

.PHONY: $(MPINSTALL)

#
# Always use -linkall on libraries
#
OCAML_LIB_FLAGS = $(OCAML_LIB_FLAGS) -linkall
OTHER_CCLIBS =
if $(not $(equal $(OSTYPE), Win32))
    OTHER_CCLIBS = -cclib -lreadline -cclib -lncurses -cclib -ltermcap
    export

#
# Directories needing only the standard config
#
.SUBDIRS: util clib

########################################################################
# Generic directories with no special options

#
# For the rest of MetaPRL, use our custom scanner.
#
OCAMLDEP = $(file bin/ocamldep$(EXE))

.SCANNER: %.cmi: %.mli $(OCAMLDEP)
    $(OCAMLDEP) $(OCAMLDEPFLAGS) $(OCAMLINCLUDES) $(set $(replacesuffixes .cmi .cmo .cmx, .mli .ml .ml, $^))

.SCANNER: %.cmo %.cmx: %.ml $(OCAMLDEP)
    $(OCAMLDEP) $(OCAMLDEPFLAGS) $(OCAMLINCLUDES) $(set $(replacesuffixes .cmi .cmo .cmx, .mli .ml .ml, $^))

#
# MetaPRL is always compiled with threads.
#
THREADS_ENABLED = true
OCAMLFLAGS = $(OCAMLFLAGS) -thread
THREADSLIB = threads

#
# Directories using our custom scanner, but otherwise config is normal
#
.SUBDIRS: libmojave library debug ensemble filter

########################################################################
# Refiner building
#

#
# For the refiner and mllib directories,
# add a dependency on the macro processor.
#
if true
    # Add a dependency on the macro preprocess
    OCAMLMACROS = $(file lib/macro.cmo)
    CAMLP4MACRO = camlp4o $(OCAMLMACROS)
    CAMLP4MACROPRINT = camlp4o -I $(CAMLP4LIB) pr_o.cmo $(OCAMLMACROS)

    # Add the extra dependency
    %.mli: $(OCAMLMACROS)
    %.ml: $(OCAMLMACROS)

    # These directories use the macro preprocessor
    .SUBDIRS: mllib refiner

########################################################################
# Theory building

#
# Support directories
#
SUPPORT_DIRS = $(dir $(addprefix support/, display shell tactics))
SUPPORT_INCLUDE = $'(addprefix -I , $(SUPPORT_DIRS))

#
# Commands to compile theory files
#
PRLC = $(file lib/prlc$(EXE))

# Use prlc, not ocamlc
if $(equal $(OSTYPE), Win32)
    OCAMLC = set MPLIB=$(LIB)&& $(PRLC)
    OCAMLOPT = set MPLIB=$(LIB)&& $(PRLC) -opt
    export
else
    OCAMLC = MPLIB=$(LIB) $(PRLC)
    OCAMLOPT = MPLIB=$(LIB) $(PRLC) -opt
    export

# Add the extra dependency
%.cmi: $(MPINSTALL) $(PRLC)
%.cmo: $(MPINSTALL) $(PRLC)
%.cmx: $(MPINSTALL) $(PRLC)

# Dependency analysis uses -prl flag by default
OCAMLDEPFLAGS = -prl

# Add library to include path
OCAMLINCLUDES = $(OCAMLINCLUDES) -I $(CAMLP4LIB) -I $(LIB)

# These directories use prlc
THEORIES = $(if $(equal $(THEORIES), all), $(THEORIES_ALL), $(THEORIES))
MP_DIRS  = $(SUPPORT_DIRS) $(dir $(addprefix theories/, $(THEORIES)))

.SUBDIRS: $(MP_DIRS) editor/ml
