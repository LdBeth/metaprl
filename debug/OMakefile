# Shared files
MLZFILES =\
    asttypes\
    parser_aux

PFILES_SRC =\
    $(MLZFILES)\
    ident\
    config\
    misc\
    tbl\
    primitive\
    path\
    types\
    btype\
    subst\
    predef\
    datarepr\
    env\
    lambda\
    instruct\
    opcodes\
    clflags\
    typedtree\
    ctype\
    typeopt\
    terminfo\
    linenum\
    location\
    matching\
    translobj\
    translcore\
    translclass\
    translmod\
    meta\
    emitcode\
    runtimedef\
    symtable\
    debugger_config\
    primitives\
    lexer\
    input_handling\
    parser\
    debugcom\
    symbols\
    debug

PFILES_NONE =

PFILES = $(if $(equal $(OCAMLSRC), undefined), $(PFILES_NONE), $(PFILES_SRC))

#
# Standard library files
#
LMFILES =\
    debug_symbols

OCamlLibrary(ldsymbols, $(LMFILES))

#
# Rules
#
DEBUG_FILES =\
	debugger_config\
	primitives\
	input_handling\
	debugcom\
	symbols\
	parser

TYPING_FILES =\
	env\
	path\
	types\
	subst\
	btype\
	predef\
	datarepr\
	primitive\
	ident\
	typedtree\
	ctype

BYTECOMP_FILES =\
	lambda\
	instruct\
	typeopt\
	matching\
	translclass\
	translcore\
	translobj\
	translmod\
	meta\
	emitcode\
	runtimedef\
	symtable

UTIL_FILES =\
	tbl\
	config\
	misc\
	terminfo

PARSING_FILES =\
	linenum\
	location

asttypes.mlz: $(OCAMLSRC)/parsing/asttypes.mli
   $(symlink $<, $@)

parser_aux.mlz: $(OCAMLSRC)/debugger/parser_aux.mli
   $(symlink $<, $@)

opcodes.ml: $(OCAMLSRC)/bytecomp/opcodes.ml
   $(symlink $<, $@)

opcodes.mli: opcodes.ml
	sed -e 's,let \(.*\)=.*,val \1 : int,' < opcodes.ml > opcodes.mli

clflags.ml: $(OCAMLSRC)/utils/clflags.ml
   $(symlink $<, $@)

clflags.mli: clflags.ml
   $(symlink $<, $@)

lexer.ml: $(OCAMLSRC)/debugger/lexer.ml
   $(symlink $<, $@)

lexer.mli: lexer.ml
	$(OCAMLC) $(OCAMLCFLAGS) -i lexer.ml > lexer.mli

$(addsuffix .ml, $(DEBUG_FILES)): %.ml: $(OCAMLSRC)/debugger/%.ml
   $(symlink $<, $@)

$(addsuffix .mli, $(DEBUG_FILES)): %.mli: $(OCAMLSRC)/debugger/%.mli
   $(symlink $<, $@)

$(addsuffix .ml, $(TYPING_FILES)): %.ml: $(OCAMLSRC)/typing/%.ml
   $(symlink $<, $@)

$(addsuffix .mli, $(TYPING_FILES)): %.mli: $(OCAMLSRC)/typing/%.mli
   $(symlink $<, $@)

$(addsuffix .ml, $(BYTECOMP_FILES)): %.ml: $(OCAMLSRC)/bytecomp/%.ml
   $(symlink $<, $@)

$(addsuffix .mli, $(BYTECOMP_FILES)): %.mli: $(OCAMLSRC)/bytecomp/%.mli
   $(symlink $<, $@)

$(addsuffix .ml, $(UTIL_FILES)): %.ml: $(OCAMLSRC)/utils/%.ml
   $(symlink $<, $@)

$(addsuffix .mli, $(UTIL_FILES)): %.mli: $(OCAMLSRC)/utils/%.mli
   $(symlink $<, $@)

$(addsuffix .ml, $(PARSING_FILES)): %.ml: $(OCAMLSRC)/parsing/%.ml
   $(symlink $<, $@)

$(addsuffix .mli, $(PARSING_FILES)): %.mli: $(OCAMLSRC)/parsing/%.mli
   $(symlink $<, $@)

#
# Clean up
#
clean:
    $(CLEAN)
