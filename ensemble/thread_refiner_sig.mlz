(*
 * This is a module that threads refiner operations.
 *)

(*
 * This module is used to provide arguments to the thread module.
 *)
module type ThreadRefinerArgSig =
sig
   type extract

   (* Function for composing extracts *)
   val compose : extract -> extract list -> extract
end

module type ThreadRefinerSig =
sig
   (* Access is through a server *)
   type ('term, 'share) server

   (* These are the thread objects *)
   type 'term t

   (* Shared values *)
   type 'c key

   (* Arguments are result *)
   type extract
   type 'term tactic = 'term -> 'term t

   (* Create a server *)
   val create : (out_channel -> 'term -> unit) -> ('term, 'share) server

   (* Fold a value *)
   val create_value : 'term list -> extract -> 'term t

   (* First operation that succeeds *)
   val first : 'term tactic list -> 'term tactic

   (* All operations should succeed *)
   val compose1 : 'term tactic -> 'term tactic -> 'term tactic
   val compose2 : 'term tactic -> 'term tactic list -> 'term tactic
   val composef : 'term tactic -> ('term list -> 'term t list) -> 'term tactic

   (* Fully evaluate the thread *)
   val eval : ('term, 'share) server -> 'term t -> 'term list * extract

   (* Shared memory *)
   val share : ('term, 'share) server -> string -> (unit -> 'share) -> 'share key
   val arg_of_key : ('term, 'share) server -> 'share key -> 'share

   (* Start the main loop *)
   val args : unit -> (string * Arg.spec * string) list
   val main_loop : ('term, 'share) server -> unit
end

(*
 * -*-
 * Local Variables:
 * Caml-master: "refiner"
 * End:
 * -*-
 *)
