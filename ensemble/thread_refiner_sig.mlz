(*
 * This is a module that threads refiner operations.
 *
 * ----------------------------------------------------------------
 *
 * This file is part of Nuprl-Light, a modular, higher order
 * logical framework that provides a logical programming
 * environment for OCaml and other languages.
 *
 * See the file doc/index.html for information on Nuprl,
 * OCaml, and more information about this system.
 *
 * Copyright (C) 1998 Jason Hickey, Cornell University
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 * 
 * Author: Jason Hickey
 * jyh@cs.cornell.edu
 *)

(*
 * This module is used to provide arguments to the thread module.
 *)
module type ThreadRefinerArgSig =
sig
   type extract

   (* Function for composing extracts *)
   val compose : extract -> extract list -> extract
end

module type ThreadRefinerSig =
sig
   (* Access is through a server *)
   type ('term, 'share) server

   (* These are the thread objects *)
   type 'term t

   (* Shared values *)
   type 'c key

   (* Arguments are result *)
   type extract
   type 'term tactic = 'term -> 'term t

   (* Create a server *)
   val create : (out_channel -> 'term -> unit) -> ('term, 'share) server

   (* Fold a value *)
   val create_value : 'term list -> extract -> 'term t

   (* First operation that succeeds *)
   val first : 'term tactic list -> 'term tactic

   (* All operations should succeed *)
   val compose1 : 'term tactic -> 'term tactic -> 'term tactic
   val compose2 : 'term tactic -> 'term tactic list -> 'term tactic
   val composef : 'term tactic -> ('term list -> 'term t list) -> 'term tactic

   (* Fully evaluate the thread *)
   val eval : ('term, 'share) server -> 'term t -> 'term list * extract

   (* Shared memory *)
   val share : ('term, 'share) server -> string -> (unit -> 'share) -> 'share key
   val arg_of_key : ('term, 'share) server -> 'share key -> 'share

   (* Start the main loop *)
   val args : unit -> (string * Arg.spec * string) list
   val main_loop : ('term, 'share) server -> unit
end

(*
 * -*-
 * Local Variables:
 * Caml-master: "refiner"
 * End:
 * -*-
 *)
