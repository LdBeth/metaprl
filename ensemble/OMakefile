#
# JYH: this file is all wrong.  Will have to fix it when we actually
# want to include ensemble again.
#
OCAMLINCLUDES =\
	$(OCAMLINCLUDES)\
	-I $(ROOT)/refiner/refsig\
	-I $(ROOT)/refiner/refiner

#
# Name of this library
#
LIBNAME = trefiner

#
# Files for both versions of the thread refiner
#
LMFILES = thread_refiner_sig

#
# Config depends on whether we want to build Ensemble.
#
if $(equal $(ENSROOT), undefined)
    #
    # Null library
    # Just use thread_refiner_null.ml in place of thread_refiner.ml
    #
    FILES_null =\
	$(LMFILES)\
	thread_refiner

    thread_refiner.ml: thread_refiner_null.ml
	$(LN) $^ $@

    OCamlLibraryInstall($(MPINSTALL), $(LIB), $(LIBNAME), $(FILES_null))

else
    #
    # Otherwise, we want to use Ensemble.
    # We haven't used Ensemble in several years,
    # so this code is likely to fail.
    #
    MLZFILES =
    HOSTTYPE =
    MAIN = x
    LMFILES_null =

    ENSFILES =\
        appl_outboard_common\
        appl_outboard_client\
        ensemble_queue

    LMFILES_ens =\
        $(MLZFILES)\
        $(LMFILES)\
        $(ENSFILES)\
        remote_sig\
        remote_null\
        remote_ensemble\
        remote_monitor\
        thread_refiner_ens

    LIBS_ens =\
        $(LIB)/trefiner_ens

    #
    # Server program
    #
    MSFILES =\
        appl_outboard_common\
        appl_outboard_server

    LIBS_serv =\
        $(CAMLLIB)/unix.cma\
        $(THREADSLIB)\
        $(ENSROOT)/lib/$(HOSTTYPE)/socket.cma\
        $(ENSROOT)/lib/$(HOSTTYPE)/crypto.cma\
        $(ENSROOT)/lib/$(HOSTTYPE)/_nulldynlink.cmo\
        $(ENSROOT)/lib/$(HOSTTYPE)/libenscore.cma\
        $(ENSROOT)/lib/$(HOSTTYPE)/libensmin.cma\
        $(ENSROOT)/lib/$(HOSTTYPE)/libensrest.cma\
        $(LIB)/util.cma\
        $(MAIN).cma

    OTHERLIBS_serv =\
        $(ENSROOT)/lib/$(HOSTTYPE)/socket.cmxa\
        $(ENSROOT)/lib/$(HOSTTYPE)/crypto.cmxa\
        $(ENSROOT)/lib/$(HOSTTYPE)/libenscore.cmxa\
        $(ENSROOT)/lib/$(HOSTTYPE)/libensmin.cmxa\
        $(ENSROOT)/lib/$(HOSTTYPE)/libensrest.cmxa

    CLIBS_serv = $(LIB)/clib

    OTHER_CCLIBS_serv =\
        -cclib -lunix\
        -ccopt -L$(ENSROOT)/lib/$(HOSTTYPE)\
        -cclib -lsock\
        -cclib -lcryptoc

    NATIVE_CCLIBS_serv =\
        -cclib -lunix\
        -ccopt -L$(ENSROOT)/lib/$(HOSTTYPE)\
        -cclib -lsock\
        -cclib -lcryptoc

    OCAMLINCLUDES =\
           -I .\
           -I $(ENSROOT)/lib/$(HOSTTYPE)\
           -I $(LIB)

    #
    # Name of the server
    #
    MPSERVER = mpserver
    MFILES = $(LMFILES) $(LMFILES_ens) $(LMFILES_null) thread_refiner

    ENS_LIB = $(LIBNAME)_ens.cma
    OPT_ENS_LIB = $(LIBNAME)_ens.cmxa
    RENS_LIB = $(LIB)/$(ENS_LIB)
    ROPT_ENS_LIB = $(LIB)/$(OPT_ENS_LIB) $(LIB)/$(LIBNAME)_ens$(EXT_LIB)

    OCamlProgram($(MPSERVER), $(LMFILES))

#
# Clean up
#
clean:
    $(CLEAN)

realclean:
    $(REALCLEAN)
