#
# Generic camlp4 preprocessing
#
OCAMLPPFLAGS = -pp $(quote-argv $(CAMLP4O) -I $(CAMLP4LIB) q_MLast.cmo pa_extend.cmo $(LOC))

%.cmx %.o: $(CAMLP4O_VERSION)
%.cmo: $(CAMLP4O_VERSION)

#
# Name of main program
#
MAINLIB = prlc
MAINPROG = prlc

########################################################################
# Recursive make
#########################################################################

.SUBDIRS: base filter

#
# Build combined libraries from subdirs
#
include base/Files

SUB_FILES[] =
    $(addprefix base/, $(BASE_FILES))
    filter/term_grammar

OCamlLibraryInstall($(MPINSTALL), $(LIB), $(MAINLIB), $(SUB_FILES))

########################################################################
# MAIN PROGRAMS
########################################################################

#
# When native code is profiled, filter binaries need to be bytecode
#
if $(NATIVE_PROFILING_ENABLED)
   NATIVE_ENABLED = false
   export

#
# Other libraries that we always want to include
#
OCAML_CLIBS[] =
   $(LIB)/clib
   $(LIB)/liblmcutil

OCAML_OTHER_LIBS += str

OCAML_LIBS[] =
   $(LIB)/lm
   $(file $(ROOT)/mllib/util)

#
# Libraries for camlp4n
#
STANDARD_LIBS[] =
    $(CAMLP4LIB)/camlp4
    $(ROOT)/refiner/refiner
    $(ROOT)/library/library
    $(ROOT)/$(ENSEMBLE_DIR)/trefiner
    $(ROOT)/tactics/proof/prooflib
    $(MAINLIB)

#
# Compile a special camlp4 to run MetaPRL filter
#
section
    OCAML_LIBS[] +=
        $(CAMLP4LIB)/odyl
        $(STANDARD_LIBS)

    CAMLP4_FILES[] =
        $(CAMLP4LIB)/pa_o
        $(CAMLP4LIB)/pa_extend
        $(CAMLP4LIB)/q_MLast
        filter/filter_patt
        filter/filter_prog
        filter/filter_parse
        $(ROOT)/util/pa_macro
        filter/filter_main

    # XXX: http://caml.inria.fr/bin/caml-bugs?selectid=3439 workaround
    if $(and $(file-exists $(CAMLP4LIB)/argl.cmx), $(file-exists $(CAMLP4LIB)/argl.o), $(file-exists $(CAMLP4LIB)/argl.cmo))
        CAMLP4_FILES[] =
            $(CAMLP4LIB)/argl
            $(CAMLP4_FILES)
        export
    else
        OCAML_LINK_FLAGS += -linkall
        export

    CAMLP4N_FILES[] =
        $(CAMLP4LIB)/pr_dump
        $(CAMLP4_FILES)

    CAMLP4O_FILES[] =
        $(CAMLP4LIB)/pr_o
        $(CAMLP4_FILES)

    OCamlProgramInstall($(MPINSTALL), $(LIB), camlp4n, $(CAMLP4N_FILES))
    OCamlProgramInstall($(MPINSTALL), $(LIB), camlp4o, $(CAMLP4O_FILES))

    LIB_PROGS = camlp4n camlp4o

    export LIB_PROGS

section
    OCAML_LIBS[] +=
        $(STANDARD_LIBS)

    #
    # Files for binary compiler.
    #
    PRLC_FILES[] =
        filter/filter_prog
        filter/filter_reflect
        filter/filter_bin

    PRLCN_FILES[] =
        $(CAMLP4LIB)/pr_dump
        $(PRLC_FILES)

    PRLCO_FILES[] =
        $(CAMLP4LIB)/pr_o
        $(PRLC_FILES)

    OCamlProgramInstall($(MPINSTALL), $(BIN), prlcn, $(PRLCN_FILES))
    OCamlProgramInstall($(MPINSTALL), $(BIN), prlco, $(PRLCO_FILES))

    #
    # File format conversion
    #
    OCamlProgramInstall($(MPINSTALL), $(BIN), convert, filter/filter_convert)
    OCamlProgramInstall($(MPINSTALL), $(BIN), merge_prla, filter/filter_merge_prla)

    #
    # Main program
    #
    #OCamlProgramInstall($(MPINSTALL), $(BIN), prlc, $(PRLCOMP_FILES))

    BIN_PROGS = prlcn prlco convert merge_prla

    export BIN_PROGS

#
# Default targets
#
PROGS = $(LIB_PROGS) $(BIN_PROGS)

all: $(PROGS)
opt: $(PROGS)

LibInstall(words)

#
# Clean up
#
clean:
    $(CLEAN)
