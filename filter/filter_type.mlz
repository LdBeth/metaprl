(*
 * Types used by filter machine.
 *
 * ----------------------------------------------------------------
 *
 * This file is part of Nuprl-Light, a modular, higher order
 * logical framework that provides a logical programming
 * environment for OCaml and other languages.
 *
 * See the file doc/index.html for information on Nuprl,
 * OCaml, and more information about this system.
 *
 * Copyright (C) 1998 Jason Hickey, Cornell University
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 * 
 * Author: Jason Hickey
 * jyh@cs.cornell.edu
 *)

open Refiner.Refiner
open Refiner.Refiner.Term
open Refiner.Refiner.TermMeta

(************************************************************************
 * COMMON ERRORS                                                        *
 ************************************************************************)

(*
 * Input exceptions.
 *)
exception NotANumber of string         (* Int param is not a number *)
exception BadParam of string           (* Bogus parameter format *)
exception BadLevelExp of level_exp     (* Level expression has wrong type *)
exception BadParamCast of param * string
exception BadArgList of (string list * term) list
exception BadBinder of term
exception ParseError of string

(*
 * Generic exception.
 *)
exception BadCommand of string

(************************************************************************
 * COMMON TYPES                                                         *
 ************************************************************************)

(*
 * A "quoted" term is given in exploded form.
 *)
type quote_term = string * Term.param list * bound_term list

(*
 * Module paths, but empty paths are not allowed.
 *)
exception EmptyModulePath of string

type module_path = string list

(*
 * Annotated terms may have a name.
 *)
type aterm = { aname : term option; aterm : term }

(*
 * -*-
 * Local Variables:
 * Caml-master: "manager"
 * End:
 * -*-
 *)
